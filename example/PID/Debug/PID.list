
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08007930  08007930  00017930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e34  08007e34  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e34  08007e34  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e34  08007e34  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e4  08008020  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008020  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009701  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e81  00000000  00000000  0002990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b3  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000949a  00000000  00000000  00044c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845df  00000000  00000000  0004e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d268c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000341c  00000000  00000000  000d26e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007914 	.word	0x08007914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007914 	.word	0x08007914

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	460c      	mov	r4, r1
 8001140:	4605      	mov	r5, r0
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	2200      	movs	r2, #0
 8001148:	2300      	movs	r3, #0
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_GPIO_Init+0x58>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_GPIO_Init+0x58>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_GPIO_Init+0x58>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0x58>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <MX_GPIO_Init+0x58>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_GPIO_Init+0x58>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_GPIO_Init+0x58>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <MX_GPIO_Init+0x58>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MX_GPIO_Init+0x58>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000

08001208 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800120c:	f000 fdd4 	bl	8001db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001210:	f000 f840 	bl	8001294 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	PID_Init(&pid1, 0.2, 0.015, 0.2);
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <main+0x6c>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <main+0x70>)
 8001218:	4916      	ldr	r1, [pc, #88]	; (8001274 <main+0x6c>)
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <main+0x74>)
 800121c:	f000 f916 	bl	800144c <PID_Init>
	PID_Init(&pid2, 0.4, 0.2, 0.2);
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <main+0x6c>)
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <main+0x6c>)
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <main+0x78>)
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <main+0x7c>)
 8001228:	f000 f910 	bl	800144c <PID_Init>
	PID_Config(&pid1, pid_hold_output, PID_MAX_ROUND);
 800122c:	f001 fcd2 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8001230:	4603      	mov	r3, r0
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <main+0x80>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	09db      	lsrs	r3, r3, #7
 800123c:	461a      	mov	r2, r3
 800123e:	2101      	movs	r1, #1
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <main+0x74>)
 8001242:	f000 f94d 	bl	80014e0 <PID_Config>
	PID_Config(&pid2, pid_reset_output, PID_MAX_ROUND);
 8001246:	f001 fcc5 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 800124a:	4603      	mov	r3, r0
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <main+0x80>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	09db      	lsrs	r3, r3, #7
 8001256:	461a      	mov	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <main+0x7c>)
 800125c:	f000 f940 	bl	80014e0 <PID_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001260:	f7ff ffa4 	bl	80011ac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001264:	f000 fcf2 	bl	8001c4c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, RecvBuff, sizeof(RecvBuff));
 8001268:	2205      	movs	r2, #5
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <main+0x84>)
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <main+0x88>)
 800126e:	f001 fe40 	bl	8002ef2 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001272:	e7fe      	b.n	8001272 <main+0x6a>
 8001274:	3e4ccccd 	.word	0x3e4ccccd
 8001278:	3c75c28f 	.word	0x3c75c28f
 800127c:	2000024c 	.word	0x2000024c
 8001280:	3ecccccd 	.word	0x3ecccccd
 8001284:	20000218 	.word	0x20000218
 8001288:	0a7c5ac5 	.word	0x0a7c5ac5
 800128c:	20000200 	.word	0x20000200
 8001290:	20000280 	.word	0x20000280

08001294 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	2228      	movs	r2, #40	; 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 faac 	bl	8003800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f90f 	bl	8002500 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x58>
		Error_Handler();
 80012e8:	f000 f88c 	bl	8001404 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fb7a 	bl	8002a00 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x82>
		Error_Handler();
 8001312:	f000 f877 	bl	8001404 <Error_Handler>
	}
}
 8001316:	bf00      	nop
 8001318:	3740      	adds	r7, #64	; 0x40
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
 8001326:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_UART_RxCpltCallback+0xb4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d14b      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xaa>

		PID_Target = (float) atoff((const char*) RecvBuff);
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <HAL_UART_RxCpltCallback+0xb8>)
 8001334:	f002 fa36 	bl	80037a4 <atoff>
 8001338:	4603      	mov	r3, r0
 800133a:	4a28      	ldr	r2, [pc, #160]	; (80013dc <HAL_UART_RxCpltCallback+0xbc>)
 800133c:	6013      	str	r3, [r2, #0]

		printf("Beginning value: %f\n",pid1.ActualValue);
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_UART_RxCpltCallback+0xc0>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <HAL_UART_RxCpltCallback+0xc4>)
 800134e:	f002 febf 	bl	80040d0 <iprintf>
		printf("%f\n", PID_Model_Positional(&pid1, PID_Target));
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_UART_RxCpltCallback+0xbc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4821      	ldr	r0, [pc, #132]	; (80013e0 <HAL_UART_RxCpltCallback+0xc0>)
 800135a:	f000 f947 	bl	80015ec <PID_Model_Positional>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f861 	bl	8000428 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <HAL_UART_RxCpltCallback+0xc8>)
 800136c:	f002 feb0 	bl	80040d0 <iprintf>
		PID_OutputHandler(&pid1);
 8001370:	481b      	ldr	r0, [pc, #108]	; (80013e0 <HAL_UART_RxCpltCallback+0xc0>)
 8001372:	f000 f8e2 	bl	800153a <PID_OutputHandler>
		printf("PID Finished!\n");
 8001376:	481d      	ldr	r0, [pc, #116]	; (80013ec <HAL_UART_RxCpltCallback+0xcc>)
 8001378:	f002 ff30 	bl	80041dc <puts>

		printf("Beginning value: %f\n",pid2.ActualValue);
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_UART_RxCpltCallback+0xd0>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f851 	bl	8000428 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <HAL_UART_RxCpltCallback+0xc4>)
 800138c:	f002 fea0 	bl	80040d0 <iprintf>
		printf("%f\n",PID_Model_TrapezoidalIntegral(&pid2, PID_Target, 400, -200, 200));
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_UART_RxCpltCallback+0xbc>)
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_RxCpltCallback+0xd8>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_UART_RxCpltCallback+0xdc>)
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <HAL_UART_RxCpltCallback+0xd0>)
 800139e:	f000 f9c9 	bl	8001734 <PID_Model_TrapezoidalIntegral>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f83f 	bl	8000428 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <HAL_UART_RxCpltCallback+0xc8>)
 80013b0:	f002 fe8e 	bl	80040d0 <iprintf>
		PID_OutputHandler(&pid2);
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <HAL_UART_RxCpltCallback+0xd0>)
 80013b6:	f000 f8c0 	bl	800153a <PID_OutputHandler>
		printf("PID Finished!\n");
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_UART_RxCpltCallback+0xcc>)
 80013bc:	f002 ff0e 	bl	80041dc <puts>

		//printf("%f\n",PID_Model_Incremental(&pid1, PID_Target));
		//PID_OutputHandle(&pid1);
		//printf("PID Finished!\n");

		HAL_UART_Receive_IT(&huart1, RecvBuff, sizeof(RecvBuff));
 80013c0:	2205      	movs	r2, #5
 80013c2:	4905      	ldr	r1, [pc, #20]	; (80013d8 <HAL_UART_RxCpltCallback+0xb8>)
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <HAL_UART_RxCpltCallback+0xe0>)
 80013c6:	f001 fd94 	bl	8002ef2 <HAL_UART_Receive_IT>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013800 	.word	0x40013800
 80013d8:	20000200 	.word	0x20000200
 80013dc:	20000208 	.word	0x20000208
 80013e0:	2000024c 	.word	0x2000024c
 80013e4:	08007930 	.word	0x08007930
 80013e8:	08007948 	.word	0x08007948
 80013ec:	0800794c 	.word	0x0800794c
 80013f0:	20000218 	.word	0x20000218
 80013f4:	43480000 	.word	0x43480000
 80013f8:	c3480000 	.word	0xc3480000
 80013fc:	43c80000 	.word	0x43c80000
 8001400:	20000280 	.word	0x20000280

08001404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>

0800140e <GetModul>:
 * @brief:  get modulus of a double
 *          the same function as fabs() in "math.h"
 *          but I don't need all functions in it
 * @return: modulus of the param
 * */
static double GetModul(double num) {
 800140e:	b5b0      	push	{r4, r5, r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	e9c7 0100 	strd	r0, r1, [r7]

#ifndef _MATH_H_
	if(num>=0.0)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001424:	f7ff fade 	bl	80009e4 <__aeabi_dcmpge>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <GetModul+0x26>
		return num;
 800142e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001432:	e003      	b.n	800143c <GetModul+0x2e>
	else
		return -num;
 8001434:	683c      	ldr	r4, [r7, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800143c:	4622      	mov	r2, r4
 800143e:	462b      	mov	r3, r5
#endif

#ifdef _MATH_H_
	return fabs(num);
#endif
}
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800144c <PID_Init>:
 * @brief: Init all params in pid
 *         Always call the function before use pid
 *         Some of the params with be set to default
 * @call:  Before all pid related functions
 * */
void PID_Init(PID_HandleTypeDef *pid, float kp, float ki, float kd) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]

	pid->Status = pid_enable;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
	pid->UkStatus = pid_reset_output;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	705a      	strb	r2, [r3, #1]
	pid->SetValue = 0.0;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
	pid->ActualValue = 0.0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
	pid->Offset = 0.0;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
	pid->OffsetNext = 0.0;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	pid->OffsetLast = 0.0;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
	pid->Integral = 0.0;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Kp = kp;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	619a      	str	r2, [r3, #24]
	pid->Ki = ki;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	61da      	str	r2, [r3, #28]
	pid->Kd = kd;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	621a      	str	r2, [r3, #32]
	pid->Uk = 0.0;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
	pid->Round = 0;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->MaxRound = PID_MAX_ROUND;
 80014b6:	f001 fb8d 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 80014ba:	4603      	mov	r3, r0
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <PID_Init+0x8c>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	09da      	lsrs	r2, r3, #7
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30

	PID_SetAccuracy(PID_DEFAULT_ACCURACY);
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <PID_Init+0x90>)
 80014cc:	f000 f880 	bl	80015d0 <PID_SetAccuracy>

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0a7c5ac5 	.word	0x0a7c5ac5
 80014dc:	3a03126f 	.word	0x3a03126f

080014e0 <PID_Config>:
 *         It will set UkStatus to ukstatus(default: pid_reset_output)
 *         It will set MaxRound to mround(default: PID_MAX_ROUND)
 *         All PID processes will run no more than MaxRound times
 * @call:  After PID_Init() if this function is needed
 * */
void PID_Config(PID_HandleTypeDef *pid, PID_StatusDef ukstatus, uint32_t mround) {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	72fb      	strb	r3, [r7, #11]

	pid->UkStatus = ukstatus;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	7afa      	ldrb	r2, [r7, #11]
 80014f2:	705a      	strb	r2, [r3, #1]
	pid->MaxRound = mround;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <PID_ResetRound>:
 *          If pid is enable, set MaxRound to mround
 *          If pid is not enable, set MaxRound to 0
 * @call:   After PID process is over
 * @called: In every PID process
 * */
void PID_ResetRound(PID_HandleTypeDef *pid, uint32_t mround) {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]

	if (pid->Status == pid_enable) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d106      	bne.n	8001524 <PID_ResetRound+0x20>
		pid->Round = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
		pid->MaxRound = mround;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		pid->Round = 0;
		pid->MaxRound = 0;
	}

}
 8001522:	e005      	b.n	8001530 <PID_ResetRound+0x2c>
		pid->Round = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
		pid->MaxRound = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <PID_OutputHandler>:
 * @brief: Handle PID output
 *         If UkStatus is pid_reset_output, reset all params related to Uk
 *         If UkStatus is pid_hold_output, hold last status
 * @call: After getting PID result
 * */
void PID_OutputHandler(PID_HandleTypeDef *pid) {
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]

	if (pid->UkStatus == pid_reset_output) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11c      	bne.n	8001584 <PID_OutputHandler+0x4a>

		// Reset output related params
		pid->SetValue = 0.0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
		pid->ActualValue = 0.0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
		pid->Offset = 0.0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
		pid->OffsetNext = 0.0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
		pid->OffsetLast = 0.0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
		pid->Integral = 0.0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
		pid->Uk = 0.0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
		pid->OffsetLast = pid->OffsetLast;
		pid->Integral = pid->Integral;
		pid->Uk = pid->Uk;
	}

}
 8001582:	e01f      	b.n	80015c4 <PID_OutputHandler+0x8a>
	} else if (pid->UkStatus == pid_hold_output) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d11b      	bne.n	80015c4 <PID_OutputHandler+0x8a>
		pid->SetValue = pid->SetValue;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]
		pid->ActualValue = pid->ActualValue;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]
		pid->Offset = pid->Offset;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
		pid->OffsetNext = pid->OffsetNext;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
		pid->OffsetLast = pid->OffsetLast;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	615a      	str	r2, [r3, #20]
		pid->Integral = pid->Integral;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
		pid->Uk = pid->Uk;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <PID_SetAccuracy>:

/**
 * @brief: set PID accuracy
 * @param accuracy:   desired accuracy
 * */
void PID_SetAccuracy(float accuracy) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	pid_accuracy = accuracy;
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <PID_SetAccuracy+0x18>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000000 	.word	0x20000000

080015ec <PID_Model_Positional>:
/**
 * @brief: positional pid
 * @param pid:     pid
 * @param target:  target value
 * */
float PID_Model_Positional(PID_HandleTypeDef *pid, float target) {
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]

	if (pid->Status == pid_enable) {
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	f040 808b 	bne.w	8001716 <PID_Model_Positional+0x12a>

		while (pid->Round <= pid->MaxRound) {
 8001600:	e078      	b.n	80016f4 <PID_Model_Positional+0x108>

			if (((float) GetModul(pid->ActualValue - target)) <= pid_accuracy)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fab1 	bl	8000b70 <__aeabi_fsub>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff09 	bl	8000428 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fef6 	bl	800140e <GetModul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fa4d 	bl	8000ac8 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <PID_Model_Positional+0x140>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fd4c 	bl	80010d4 <__aeabi_fcmple>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d15f      	bne.n	8001702 <PID_Model_Positional+0x116>
				break;

			pid->SetValue = target;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	605a      	str	r2, [r3, #4]
			pid->Offset = (pid->SetValue) - (pid->ActualValue);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fa8c 	bl	8000b70 <__aeabi_fsub>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	60da      	str	r2, [r3, #12]
			pid->Integral += pid->Offset;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4619      	mov	r1, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f7ff fa82 	bl	8000b74 <__addsf3>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
			pid->Uk = (pid->Kp * pid->Offset) + (pid->Ki * pid->Integral)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fb7e 	bl	8000d84 <__aeabi_fmul>
 8001688:	4603      	mov	r3, r0
 800168a:	461c      	mov	r4, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f7ff fb74 	bl	8000d84 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff fa67 	bl	8000b74 <__addsf3>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461d      	mov	r5, r3
					+ pid->Kd * (pid->Offset - pid->OffsetLast);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1c      	ldr	r4, [r3, #32]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fa59 	bl	8000b70 <__aeabi_fsub>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fb5e 	bl	8000d84 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff fa51 	bl	8000b74 <__addsf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
			pid->Uk = (pid->Kp * pid->Offset) + (pid->Ki * pid->Integral)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
			pid->OffsetLast = pid->Offset;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	615a      	str	r2, [r3, #20]
			pid->ActualValue = pid->Uk * 1.0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	609a      	str	r2, [r3, #8]

			++pid->Round;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
		while (pid->Round <= pid->MaxRound) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d980      	bls.n	8001602 <PID_Model_Positional+0x16>
 8001700:	e000      	b.n	8001704 <PID_Model_Positional+0x118>
				break;
 8001702:	bf00      	nop
		}

		PID_ResetRound(pid, pid->MaxRound);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fefa 	bl	8001504 <PID_ResetRound>
		return pid->ActualValue;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	e005      	b.n	8001722 <PID_Model_Positional+0x136>

	} else {
		pid->Round = pid->MaxRound + 1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
		return (float) PID_FAILED;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <PID_Model_Positional+0x144>)
	}
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	40400000 	.word	0x40400000

08001734 <PID_Model_TrapezoidalIntegral>:
 * @param umax:       max integral offset
 * @param umin:       min integral offset
 * @param sepedge:    separation edge
 * */
float PID_Model_TrapezoidalIntegral(PID_HandleTypeDef *pid, float target,
		float umax, float umin, float sepedge) {
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
	if (pid->Status == pid_enable) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 813a 	bne.w	80019c0 <PID_Model_TrapezoidalIntegral+0x28c>
		while (pid->Round <= pid->MaxRound) {
 800174c:	e126      	b.n	800199c <PID_Model_TrapezoidalIntegral+0x268>

			if (((float) GetModul(pid->ActualValue - target)) <= pid_accuracy)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fa0b 	bl	8000b70 <__aeabi_fsub>
 800175a:	4603      	mov	r3, r0
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe63 	bl	8000428 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fe50 	bl	800140e <GetModul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f9a7 	bl	8000ac8 <__aeabi_d2f>
 800177a:	4602      	mov	r2, r0
 800177c:	4b95      	ldr	r3, [pc, #596]	; (80019d4 <PID_Model_TrapezoidalIntegral+0x2a0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f7ff fca6 	bl	80010d4 <__aeabi_fcmple>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 810e 	bne.w	80019ac <PID_Model_TrapezoidalIntegral+0x278>
				break;

			uint8_t flag = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	75fb      	strb	r3, [r7, #23]
			pid->SetValue = target;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	605a      	str	r2, [r3, #4]
			pid->Offset = pid->SetValue - pid->ActualValue;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f7ff f9e3 	bl	8000b70 <__aeabi_fsub>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	60da      	str	r2, [r3, #12]

			if (pid->ActualValue > umax) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fc81 	bl	80010c0 <__aeabi_fcmplt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d034      	beq.n	800182e <PID_Model_TrapezoidalIntegral+0xfa>
				if (GetModul(pid->Offset) > sepedge) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe2d 	bl	8000428 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff fe1a 	bl	800140e <GetModul>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017e0:	f7fe fe22 	bl	8000428 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7ff f904 	bl	80009f8 <__aeabi_dcmpgt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <PID_Model_TrapezoidalIntegral+0xc8>
					flag = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
 80017fa:	e080      	b.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
				} else {
					flag = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	75fb      	strb	r3, [r7, #23]
					if (pid->Offset < 0) {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc59 	bl	80010c0 <__aeabi_fcmplt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d074      	beq.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
						pid->Integral += pid->Offset;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f7ff f9a8 	bl	8000b74 <__addsf3>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
 800182c:	e067      	b.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
					}
				}
			} else if (pid->ActualValue < umin) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4619      	mov	r1, r3
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f7ff fc61 	bl	80010fc <__aeabi_fcmpgt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d034      	beq.n	80018aa <PID_Model_TrapezoidalIntegral+0x176>
				if (GetModul(pid->Offset) > sepedge) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fdef 	bl	8000428 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff fddc 	bl	800140e <GetModul>
 8001856:	4604      	mov	r4, r0
 8001858:	460d      	mov	r5, r1
 800185a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800185c:	f7fe fde4 	bl	8000428 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4620      	mov	r0, r4
 8001866:	4629      	mov	r1, r5
 8001868:	f7ff f8c6 	bl	80009f8 <__aeabi_dcmpgt>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <PID_Model_TrapezoidalIntegral+0x144>
					flag = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
 8001876:	e042      	b.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
				} else {
					flag = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	75fb      	strb	r3, [r7, #23]
					if (pid->Offset > 0) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc39 	bl	80010fc <__aeabi_fcmpgt>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d036      	beq.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
						pid->Integral += pid->Offset;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4619      	mov	r1, r3
 800189a:	4610      	mov	r0, r2
 800189c:	f7ff f96a 	bl	8000b74 <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
 80018a8:	e029      	b.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
					}
				}
			} else {
				if (GetModul(pid->Offset) > sepedge) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdba 	bl	8000428 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff fda7 	bl	800140e <GetModul>
 80018c0:	4604      	mov	r4, r0
 80018c2:	460d      	mov	r5, r1
 80018c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018c6:	f7fe fdaf 	bl	8000428 <__aeabi_f2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4620      	mov	r0, r4
 80018d0:	4629      	mov	r1, r5
 80018d2:	f7ff f891 	bl	80009f8 <__aeabi_dcmpgt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <PID_Model_TrapezoidalIntegral+0x1ae>
					flag = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	75fb      	strb	r3, [r7, #23]
 80018e0:	e00d      	b.n	80018fe <PID_Model_TrapezoidalIntegral+0x1ca>
				} else {
					flag = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
					pid->Integral += pid->Offset;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff f93f 	bl	8000b74 <__addsf3>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}

			pid->Uk = (pid->Kp * pid->Offset)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4619      	mov	r1, r3
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff fa3b 	bl	8000d84 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	461c      	mov	r4, r3
					+ (flag * pid->Ki * pid->Integral / 2)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f9e1 	bl	8000cdc <__aeabi_i2f>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7ff fa2e 	bl	8000d84 <__aeabi_fmul>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff fa26 	bl	8000d84 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fad4 	bl	8000eec <__aeabi_fdiv>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff f913 	bl	8000b74 <__addsf3>
 800194e:	4603      	mov	r3, r0
 8001950:	461d      	mov	r5, r3
					+ pid->Kd * (pid->Offset - pid->OffsetLast);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a1c      	ldr	r4, [r3, #32]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7ff f905 	bl	8000b70 <__aeabi_fsub>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fa0a 	bl	8000d84 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	4628      	mov	r0, r5
 8001976:	f7ff f8fd 	bl	8000b74 <__addsf3>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
			pid->Uk = (pid->Kp * pid->Offset)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
			pid->OffsetLast = pid->Offset;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	615a      	str	r2, [r3, #20]
			pid->ActualValue = pid->Uk * 1.0;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	609a      	str	r2, [r3, #8]

			++pid->Round;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
		while (pid->Round <= pid->MaxRound) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f67f aed2 	bls.w	800174e <PID_Model_TrapezoidalIntegral+0x1a>
 80019aa:	e000      	b.n	80019ae <PID_Model_TrapezoidalIntegral+0x27a>
				break;
 80019ac:	bf00      	nop

		}

		PID_ResetRound(pid, pid->MaxRound);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4619      	mov	r1, r3
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff fda5 	bl	8001504 <PID_ResetRound>
		return pid->ActualValue;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	e005      	b.n	80019cc <PID_Model_TrapezoidalIntegral+0x298>

	} else {
		pid->Round = pid->MaxRound + 1;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
		return (float) PID_FAILED;
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <PID_Model_TrapezoidalIntegral+0x2a4>)
	}
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	40400000 	.word	0x40400000

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_MspInit+0x6c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_MspInit+0x6c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_MspInit+0x6c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_MspInit+0x6c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_MspInit+0x6c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x6c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2005      	movs	r0, #5
 8001a18:	f000 fb07 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f000 fb20 	bl	8002062 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x70>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x70>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 f9d5 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART1_IRQHandler+0x10>)
 8001ab2:	f001 fa4f 	bl	8002f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000280 	.word	0x20000280

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <_kill>:

int _kill(int pid, int sig)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad8:	f001 fe68 	bl	80037ac <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2216      	movs	r2, #22
 8001ae0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_exit>:

void _exit (int status)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af6:	f04f 31ff 	mov.w	r1, #4294967295
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffe7 	bl	8001ace <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b00:	e7fe      	b.n	8001b00 <_exit+0x12>

08001b02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e00a      	b.n	8001b2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b14:	f3af 8000 	nop.w
 8001b18:	4601      	mov	r1, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60ba      	str	r2, [r7, #8]
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbf0      	blt.n	8001b14 <_read+0x12>
	}

return len;
 8001b32:	687b      	ldr	r3, [r7, #4]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e009      	b.n	8001b62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f8f6 	bl	8001d48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbf1      	blt.n	8001b4e <_write+0x12>
	}
	return len;
 8001b6a:	687b      	ldr	r3, [r7, #4]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_close>:

int _close(int file)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_isatty>:

int _isatty(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f001 fdd2 	bl	80037ac <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20005000 	.word	0x20005000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	2000020c 	.word	0x2000020c
 8001c3c:	20000340 	.word	0x20000340

08001c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_USART1_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART1_UART_Init+0x4c>)
 8001c84:	f001 f856 	bl	8002d34 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f7ff fbb9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000280 	.word	0x20000280
 8001c9c:	40013800 	.word	0x40013800

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <HAL_UART_MspInit+0x9c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d139      	bne.n	8001d34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4619      	mov	r1, r3
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001d06:	f000 fa77 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4809      	ldr	r0, [pc, #36]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001d20:	f000 fa6a 	bl	80021f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2025      	movs	r0, #37	; 0x25
 8001d2a:	f000 f97e 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2e:	2025      	movs	r0, #37	; 0x25
 8001d30:	f000 f997 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010800 	.word	0x40010800

08001d48 <__io_putchar>:

FILE __stdout;
#endif

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 2, HAL_MAX_DELAY);
 8001d50:	1d39      	adds	r1, r7, #4
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	2202      	movs	r2, #2
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <__io_putchar+0x20>)
 8001d5a:	f001 f838 	bl	8002dce <HAL_UART_Transmit>
	return ch;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000280 	.word	0x20000280

08001d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d92:	f7ff ff55 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f001 fd0f 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9a:	f7ff fa35 	bl	8001208 <main>
  bx lr
 8001d9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001da8:	08007e3c 	.word	0x08007e3c
  ldr r2, =_sbss
 8001dac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001db0:	20000340 	.word	0x20000340

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_Init+0x28>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_Init+0x28>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f923 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fe02 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f93b 	bl	800207e <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 f903 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	2000032c 	.word	0x2000032c

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	2000032c 	.word	0x2000032c

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4906      	ldr	r1, [pc, #24]	; (8001f14 <__NVIC_EnableIRQ+0x34>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff90 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff2d 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff42 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff90 	bl	8001f6c <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5f 	bl	8001f18 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff35 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2204      	movs	r2, #4
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e020      	b.n	8002100 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020e 	bic.w	r2, r2, #14
 80020cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211e:	2b02      	cmp	r3, #2
 8002120:	d005      	beq.n	800212e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2204      	movs	r2, #4
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e051      	b.n	80021d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 020e 	bic.w	r2, r2, #14
 800213c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_DMA_Abort_IT+0xd0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d029      	beq.n	80021ac <HAL_DMA_Abort_IT+0xa0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_DMA_Abort_IT+0xd4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x9c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_DMA_Abort_IT+0xd8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01a      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x96>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_DMA_Abort_IT+0xdc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d012      	beq.n	800219c <HAL_DMA_Abort_IT+0x90>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_DMA_Abort_IT+0xe0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00a      	beq.n	8002196 <HAL_DMA_Abort_IT+0x8a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_DMA_Abort_IT+0xe4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d102      	bne.n	8002190 <HAL_DMA_Abort_IT+0x84>
 800218a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800218e:	e00e      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 8002190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002194:	e00b      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 8002196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800219a:	e008      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 800219c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a0:	e005      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 80021a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a6:	e002      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 80021a8:	2310      	movs	r3, #16
 80021aa:	e000      	b.n	80021ae <HAL_DMA_Abort_IT+0xa2>
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_DMA_Abort_IT+0xe8>)
 80021b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    } 
  }
  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020008 	.word	0x40020008
 80021e0:	4002001c 	.word	0x4002001c
 80021e4:	40020030 	.word	0x40020030
 80021e8:	40020044 	.word	0x40020044
 80021ec:	40020058 	.word	0x40020058
 80021f0:	4002006c 	.word	0x4002006c
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e169      	b.n	80024e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800220c:	2201      	movs	r2, #1
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8158 	bne.w	80024da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a9a      	ldr	r2, [pc, #616]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d05e      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002234:	4a98      	ldr	r2, [pc, #608]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d875      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800223a:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_GPIO_Init+0x2a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d058      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002240:	4a96      	ldr	r2, [pc, #600]	; (800249c <HAL_GPIO_Init+0x2a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d86f      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002246:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d052      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 800224c:	4a94      	ldr	r2, [pc, #592]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d869      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002252:	4a94      	ldr	r2, [pc, #592]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04c      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d863      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800225e:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d046      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002264:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d85d      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800226a:	2b12      	cmp	r3, #18
 800226c:	d82a      	bhi.n	80022c4 <HAL_GPIO_Init+0xcc>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d859      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_GPIO_Init+0x80>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022f3 	.word	0x080022f3
 800227c:	080022cd 	.word	0x080022cd
 8002280:	080022df 	.word	0x080022df
 8002284:	08002321 	.word	0x08002321
 8002288:	08002327 	.word	0x08002327
 800228c:	08002327 	.word	0x08002327
 8002290:	08002327 	.word	0x08002327
 8002294:	08002327 	.word	0x08002327
 8002298:	08002327 	.word	0x08002327
 800229c:	08002327 	.word	0x08002327
 80022a0:	08002327 	.word	0x08002327
 80022a4:	08002327 	.word	0x08002327
 80022a8:	08002327 	.word	0x08002327
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002327 	.word	0x08002327
 80022b4:	08002327 	.word	0x08002327
 80022b8:	08002327 	.word	0x08002327
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022e9 	.word	0x080022e9
 80022c4:	4a79      	ldr	r2, [pc, #484]	; (80024ac <HAL_GPIO_Init+0x2b4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ca:	e02c      	b.n	8002326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e029      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	3304      	adds	r3, #4
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e024      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	3308      	adds	r3, #8
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e01f      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	330c      	adds	r3, #12
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e01a      	b.n	8002328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fa:	2304      	movs	r3, #4
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e013      	b.n	8002328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	611a      	str	r2, [r3, #16]
          break;
 8002312:	e009      	b.n	8002328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	615a      	str	r2, [r3, #20]
          break;
 800231e:	e003      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x130>
          break;
 8002326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d801      	bhi.n	8002332 <HAL_GPIO_Init+0x13a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	e001      	b.n	8002336 <HAL_GPIO_Init+0x13e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d802      	bhi.n	8002344 <HAL_GPIO_Init+0x14c>
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x152>
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3b08      	subs	r3, #8
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	210f      	movs	r1, #15
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	431a      	orrs	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80b1 	beq.w	80024da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <HAL_GPIO_Init+0x2c0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_GPIO_Init+0x2c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <HAL_GPIO_Init+0x2c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_Init+0x1e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <HAL_GPIO_Init+0x2cc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_Init+0x1e0>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023d8:	2304      	movs	r3, #4
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e4:	2300      	movs	r3, #0
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023f6:	492f      	ldr	r1, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4928      	ldr	r1, [pc, #160]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	491e      	ldr	r1, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002450:	4013      	ands	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d021      	beq.n	80024cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e021      	b.n	80024da <HAL_GPIO_Init+0x2e2>
 8002496:	bf00      	nop
 8002498:	10320000 	.word	0x10320000
 800249c:	10310000 	.word	0x10310000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10110000 	.word	0x10110000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae8e 	bne.w	800220c <HAL_GPIO_Init+0x14>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e26c      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8087 	beq.w	800262e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002520:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b04      	cmp	r3, #4
 800252a:	d00c      	beq.n	8002546 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800252c:	4b8f      	ldr	r3, [pc, #572]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d112      	bne.n	800255e <HAL_RCC_OscConfig+0x5e>
 8002538:	4b8c      	ldr	r3, [pc, #560]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d10b      	bne.n	800255e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d06c      	beq.n	800262c <HAL_RCC_OscConfig+0x12c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d168      	bne.n	800262c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e246      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x76>
 8002568:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7f      	ldr	r2, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e02e      	b.n	80025d4 <HAL_RCC_OscConfig+0xd4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b7b      	ldr	r3, [pc, #492]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7a      	ldr	r2, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b78      	ldr	r3, [pc, #480]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a77      	ldr	r2, [pc, #476]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xd4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0xbc>
 80025a2:	4b72      	ldr	r3, [pc, #456]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a71      	ldr	r2, [pc, #452]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xd4>
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a67      	ldr	r2, [pc, #412]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fc44 	bl	8001e68 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff fc40 	bl	8001e68 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1fa      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe4>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fc30 	bl	8001e68 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff fc2c 	bl	8001e68 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1e6      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x10c>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d063      	beq.n	8002702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11c      	bne.n	800268c <HAL_RCC_OscConfig+0x18c>
 8002652:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x176>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1ba      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4939      	ldr	r1, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	e03a      	b.n	8002702 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x270>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7ff fbe5 	bl	8001e68 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fbe1 	bl	8001e68 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e19b      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4927      	ldr	r1, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x270>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fbc4 	bl	8001e68 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff fbc0 	bl	8001e68 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e17a      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03a      	beq.n	8002784 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_OscConfig+0x274>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7ff fba4 	bl	8001e68 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002724:	f7ff fba0 	bl	8001e68 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e15a      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_RCC_OscConfig+0x26c>)
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002742:	2001      	movs	r0, #1
 8002744:	f000 fad8 	bl	8002cf8 <RCC_Delay>
 8002748:	e01c      	b.n	8002784 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_OscConfig+0x274>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7ff fb8a 	bl	8001e68 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002756:	e00f      	b.n	8002778 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff fb86 	bl	8001e68 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d908      	bls.n	8002778 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e140      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	42420000 	.word	0x42420000
 8002774:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b9e      	ldr	r3, [pc, #632]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e9      	bne.n	8002758 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a6 	beq.w	80028de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b97      	ldr	r3, [pc, #604]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b94      	ldr	r3, [pc, #592]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a93      	ldr	r2, [pc, #588]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b91      	ldr	r3, [pc, #580]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b8e      	ldr	r3, [pc, #568]	; (80029f8 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a8a      	ldr	r2, [pc, #552]	; (80029f8 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fb47 	bl	8001e68 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7ff fb43 	bl	8001e68 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	; 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0fd      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x312>
 8002804:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a7a      	ldr	r2, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	e02d      	b.n	800286e <HAL_RCC_OscConfig+0x36e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x334>
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a75      	ldr	r2, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	e01c      	b.n	800286e <HAL_RCC_OscConfig+0x36e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x356>
 800283c:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4a6c      	ldr	r2, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	f043 0304 	orr.w	r3, r3, #4
 8002846:	6213      	str	r3, [r2, #32]
 8002848:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	e00b      	b.n	800286e <HAL_RCC_OscConfig+0x36e>
 8002856:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a66      	ldr	r2, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a63      	ldr	r2, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d015      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff faf7 	bl	8001e68 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff faf3 	bl	8001e68 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0ab      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ee      	beq.n	800287e <HAL_RCC_OscConfig+0x37e>
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7ff fae1 	bl	8001e68 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7ff fadd 	bl	8001e68 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e095      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8081 	beq.w	80029ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d061      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d146      	bne.n	800298a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x4fc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7ff fab1 	bl	8001e68 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7ff faad 	bl	8001e68 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e067      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d108      	bne.n	8002944 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	492d      	ldr	r1, [pc, #180]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a19      	ldr	r1, [r3, #32]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	430b      	orrs	r3, r1
 8002956:	4927      	ldr	r1, [pc, #156]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x4fc>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7ff fa81 	bl	8001e68 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7ff fa7d 	bl	8001e68 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e037      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x46a>
 8002988:	e02f      	b.n	80029ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_RCC_OscConfig+0x4fc>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff fa6a 	bl	8001e68 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff fa66 	bl	8001e68 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e020      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x498>
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
 80029fc:	42420060 	.word	0x42420060

08002a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0d0      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4965      	ldr	r1, [pc, #404]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b8      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a52      	ldr	r2, [pc, #328]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	494d      	ldr	r1, [pc, #308]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d040      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d115      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e07f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e073      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4936      	ldr	r1, [pc, #216]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7ff f9ba 	bl	8001e68 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7ff f9b6 	bl	8001e68 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e053      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d210      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4922      	ldr	r1, [pc, #136]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e032      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8e:	f000 f821 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490a      	ldr	r1, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1cc>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f918 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	0800796c 	.word	0x0800796c
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	20000008 	.word	0x20000008

08002bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd4:	b490      	push	{r4, r7}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bdc:	1d3c      	adds	r4, r7, #4
 8002bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002be4:	f240 2301 	movw	r3, #513	; 0x201
 8002be8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x46>
 8002c12:	e02d      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c16:	623b      	str	r3, [r7, #32]
      break;
 8002c18:	e02d      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	0c9b      	lsrs	r3, r3, #18
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c26:	4413      	add	r3, r2
 8002c28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c5b      	lsrs	r3, r3, #17
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c46:	4413      	add	r3, r2
 8002c48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c52:	fb02 f203 	mul.w	r2, r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e004      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	623b      	str	r3, [r7, #32]
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c72:	623b      	str	r3, [r7, #32]
      break;
 8002c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c76:	6a3b      	ldr	r3, [r7, #32]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc90      	pop	{r4, r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	0800795c 	.word	0x0800795c
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	003d0900 	.word	0x003d0900

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff2 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0800797c 	.word	0x0800797c

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	0800797c 	.word	0x0800797c

08002cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCC_Delay+0x34>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <RCC_Delay+0x38>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0a5b      	lsrs	r3, r3, #9
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d14:	bf00      	nop
  }
  while (Delay --);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e5a      	subs	r2, r3, #1
 8002d1a:	60fa      	str	r2, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f9      	bne.n	8002d14 <RCC_Delay+0x1c>
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	10624dd3 	.word	0x10624dd3

08002d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e03f      	b.n	8002dc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe ffa0 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fc85 	bl	8003688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08a      	sub	sp, #40	; 0x28
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d17c      	bne.n	8002ee8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_Transmit+0x2c>
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e075      	b.n	8002eea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Transmit+0x3e>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e06e      	b.n	8002eea <HAL_UART_Transmit+0x11c>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e22:	f7ff f821 	bl	8001e68 <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d108      	bne.n	8002e50 <HAL_UART_Transmit+0x82>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e003      	b.n	8002e58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e60:	e02a      	b.n	8002eb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa38 	bl	80032e2 <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e036      	b.n	8002eea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	3302      	adds	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e007      	b.n	8002eaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1cf      	bne.n	8002e62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa08 	bl	80032e2 <UART_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e006      	b.n	8002eea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d11d      	bne.n	8002f48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Receive_IT+0x26>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e016      	b.n	8002f4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Receive_IT+0x38>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e00f      	b.n	8002f4a <HAL_UART_Receive_IT+0x58>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa19 	bl	8003376 <UART_Start_Receive_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e000      	b.n	8002f4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x52>
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fac9 	bl	8003536 <UART_Receive_IT>
      return;
 8002fa4:	e17b      	b.n	800329e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80b1 	beq.w	8003110 <HAL_UART_IRQHandler+0x1bc>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x70>
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a6 	beq.w	8003110 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x90>
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_UART_IRQHandler+0xb0>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0202 	orr.w	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_UART_IRQHandler+0xd0>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00f      	beq.n	800304e <HAL_UART_IRQHandler+0xfa>
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_UART_IRQHandler+0xee>
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0208 	orr.w	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 811e 	beq.w	8003294 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_UART_IRQHandler+0x11e>
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fa62 	bl	8003536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_UART_IRQHandler+0x146>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d031      	beq.n	80030fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9a4 	bl	80033e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d023      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d013      	beq.n	80030ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_UART_IRQHandler+0x350>)
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f81a 	bl	800210c <HAL_DMA_Abort_IT>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e8:	4610      	mov	r0, r2
 80030ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ec:	e00e      	b.n	800310c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8e3 	bl	80032ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	e00a      	b.n	800310c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8df 	bl	80032ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	e006      	b.n	800310c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8db 	bl	80032ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800310a:	e0c3      	b.n	8003294 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310c:	bf00      	nop
    return;
 800310e:	e0c1      	b.n	8003294 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	f040 80a1 	bne.w	800325c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 809b 	beq.w	800325c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8095 	beq.w	800325c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d04e      	beq.n	80031f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003160:	8a3b      	ldrh	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8098 	beq.w	8003298 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800316c:	8a3a      	ldrh	r2, [r7, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	f080 8092 	bcs.w	8003298 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8a3a      	ldrh	r2, [r7, #16]
 8003178:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b20      	cmp	r3, #32
 8003182:	d02b      	beq.n	80031dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003192:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0210 	bic.w	r2, r2, #16
 80031d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe ff5d 	bl	8002096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f86d 	bl	80032cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031f2:	e051      	b.n	8003298 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d047      	beq.n	800329c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800320c:	8a7b      	ldrh	r3, [r7, #18]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003220:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003250:	8a7b      	ldrh	r3, [r7, #18]
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f839 	bl	80032cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800325a:	e01f      	b.n	800329c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_UART_IRQHandler+0x324>
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f8f9 	bl	8003468 <UART_Transmit_IT>
    return;
 8003276:	e012      	b.n	800329e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_UART_IRQHandler+0x34a>
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f93a 	bl	8003506 <UART_EndTransmit_IT>
    return;
 8003292:	e004      	b.n	800329e <HAL_UART_IRQHandler+0x34a>
    return;
 8003294:	bf00      	nop
 8003296:	e002      	b.n	800329e <HAL_UART_IRQHandler+0x34a>
      return;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_UART_IRQHandler+0x34a>
      return;
 800329c:	bf00      	nop
  }
}
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	08003441 	.word	0x08003441

080032a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	e02c      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d028      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x30>
 8003302:	f7fe fdb1 	bl	8001e68 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	429a      	cmp	r2, r3
 8003310:	d21d      	bcs.n	800334e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003320:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e00f      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d0c3      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	4613      	mov	r3, r2
 8003382:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2222      	movs	r2, #34	; 0x22
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0210 	bic.w	r2, r2, #16
 8003426:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff2d 	bl	80032ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b21      	cmp	r3, #33	; 0x21
 800347a:	d13e      	bne.n	80034fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d114      	bne.n	80034b0 <UART_Transmit_IT+0x48>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d110      	bne.n	80034b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]
 80034ae:	e008      	b.n	80034c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6211      	str	r1, [r2, #32]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4619      	mov	r1, r3
 80034d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff febe 	bl	80032a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b22      	cmp	r3, #34	; 0x22
 8003548:	f040 8099 	bne.w	800367e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d117      	bne.n	8003586 <UART_Receive_IT+0x50>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	b29a      	uxth	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
 8003584:	e026      	b.n	80035d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d007      	beq.n	80035aa <UART_Receive_IT+0x74>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <UART_Receive_IT+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e008      	b.n	80035ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4619      	mov	r1, r3
 80035e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d148      	bne.n	800367a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0220 	bic.w	r2, r2, #32
 80035f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	d123      	bne.n	8003670 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b10      	cmp	r3, #16
 800364a:	d10a      	bne.n	8003662 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fe2f 	bl	80032cc <HAL_UARTEx_RxEventCallback>
 800366e:	e002      	b.n	8003676 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fd fe55 	bl	8001320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e002      	b.n	8003680 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
  }
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036c2:	f023 030c 	bic.w	r3, r3, #12
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <UART_SetConfig+0x114>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d103      	bne.n	80036f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff faee 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	e002      	b.n	80036fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7ff fad6 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80036fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <UART_SetConfig+0x118>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	0119      	lsls	r1, r3, #4
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fbb2 f2f3 	udiv	r2, r2, r3
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <UART_SetConfig+0x118>)
 8003736:	fba3 0302 	umull	r0, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	fb00 f303 	mul.w	r3, r0, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	3332      	adds	r3, #50	; 0x32
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <UART_SetConfig+0x118>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	4419      	add	r1, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <UART_SetConfig+0x118>)
 800376e:	fba3 0302 	umull	r0, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2064      	movs	r0, #100	; 0x64
 8003776:	fb00 f303 	mul.w	r3, r0, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	; 0x32
 8003780:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <UART_SetConfig+0x118>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	440a      	add	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40013800 	.word	0x40013800
 80037a0:	51eb851f 	.word	0x51eb851f

080037a4 <atoff>:
 80037a4:	2100      	movs	r1, #0
 80037a6:	f001 bb37 	b.w	8004e18 <strtof>
	...

080037ac <__errno>:
 80037ac:	4b01      	ldr	r3, [pc, #4]	; (80037b4 <__errno+0x8>)
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000010 	.word	0x20000010

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	2600      	movs	r6, #0
 80037bc:	4d0c      	ldr	r5, [pc, #48]	; (80037f0 <__libc_init_array+0x38>)
 80037be:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037c0:	1b64      	subs	r4, r4, r5
 80037c2:	10a4      	asrs	r4, r4, #2
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	f004 f8a4 	bl	8007914 <_init>
 80037cc:	2600      	movs	r6, #0
 80037ce:	4d0a      	ldr	r5, [pc, #40]	; (80037f8 <__libc_init_array+0x40>)
 80037d0:	4c0a      	ldr	r4, [pc, #40]	; (80037fc <__libc_init_array+0x44>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	08007e34 	.word	0x08007e34
 80037f4:	08007e34 	.word	0x08007e34
 80037f8:	08007e34 	.word	0x08007e34
 80037fc:	08007e38 	.word	0x08007e38

08003800 <memset>:
 8003800:	4603      	mov	r3, r0
 8003802:	4402      	add	r2, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <__cvt>:
 8003810:	2b00      	cmp	r3, #0
 8003812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003816:	461f      	mov	r7, r3
 8003818:	bfbb      	ittet	lt
 800381a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800381e:	461f      	movlt	r7, r3
 8003820:	2300      	movge	r3, #0
 8003822:	232d      	movlt	r3, #45	; 0x2d
 8003824:	b088      	sub	sp, #32
 8003826:	4614      	mov	r4, r2
 8003828:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800382a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800382c:	7013      	strb	r3, [r2, #0]
 800382e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003830:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003834:	f023 0820 	bic.w	r8, r3, #32
 8003838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800383c:	d005      	beq.n	800384a <__cvt+0x3a>
 800383e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003842:	d100      	bne.n	8003846 <__cvt+0x36>
 8003844:	3501      	adds	r5, #1
 8003846:	2302      	movs	r3, #2
 8003848:	e000      	b.n	800384c <__cvt+0x3c>
 800384a:	2303      	movs	r3, #3
 800384c:	aa07      	add	r2, sp, #28
 800384e:	9204      	str	r2, [sp, #16]
 8003850:	aa06      	add	r2, sp, #24
 8003852:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003856:	e9cd 3500 	strd	r3, r5, [sp]
 800385a:	4622      	mov	r2, r4
 800385c:	463b      	mov	r3, r7
 800385e:	f001 fc7b 	bl	8005158 <_dtoa_r>
 8003862:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003866:	4606      	mov	r6, r0
 8003868:	d102      	bne.n	8003870 <__cvt+0x60>
 800386a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800386c:	07db      	lsls	r3, r3, #31
 800386e:	d522      	bpl.n	80038b6 <__cvt+0xa6>
 8003870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003874:	eb06 0905 	add.w	r9, r6, r5
 8003878:	d110      	bne.n	800389c <__cvt+0x8c>
 800387a:	7833      	ldrb	r3, [r6, #0]
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d10a      	bne.n	8003896 <__cvt+0x86>
 8003880:	2200      	movs	r2, #0
 8003882:	2300      	movs	r3, #0
 8003884:	4620      	mov	r0, r4
 8003886:	4639      	mov	r1, r7
 8003888:	f7fd f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800388c:	b918      	cbnz	r0, 8003896 <__cvt+0x86>
 800388e:	f1c5 0501 	rsb	r5, r5, #1
 8003892:	f8ca 5000 	str.w	r5, [sl]
 8003896:	f8da 3000 	ldr.w	r3, [sl]
 800389a:	4499      	add	r9, r3
 800389c:	2200      	movs	r2, #0
 800389e:	2300      	movs	r3, #0
 80038a0:	4620      	mov	r0, r4
 80038a2:	4639      	mov	r1, r7
 80038a4:	f7fd f880 	bl	80009a8 <__aeabi_dcmpeq>
 80038a8:	b108      	cbz	r0, 80038ae <__cvt+0x9e>
 80038aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80038ae:	2230      	movs	r2, #48	; 0x30
 80038b0:	9b07      	ldr	r3, [sp, #28]
 80038b2:	454b      	cmp	r3, r9
 80038b4:	d307      	bcc.n	80038c6 <__cvt+0xb6>
 80038b6:	4630      	mov	r0, r6
 80038b8:	9b07      	ldr	r3, [sp, #28]
 80038ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038bc:	1b9b      	subs	r3, r3, r6
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	b008      	add	sp, #32
 80038c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	9107      	str	r1, [sp, #28]
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e7f0      	b.n	80038b0 <__cvt+0xa0>

080038ce <__exponent>:
 80038ce:	4603      	mov	r3, r0
 80038d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038d2:	2900      	cmp	r1, #0
 80038d4:	f803 2b02 	strb.w	r2, [r3], #2
 80038d8:	bfb6      	itet	lt
 80038da:	222d      	movlt	r2, #45	; 0x2d
 80038dc:	222b      	movge	r2, #43	; 0x2b
 80038de:	4249      	neglt	r1, r1
 80038e0:	2909      	cmp	r1, #9
 80038e2:	7042      	strb	r2, [r0, #1]
 80038e4:	dd2b      	ble.n	800393e <__exponent+0x70>
 80038e6:	f10d 0407 	add.w	r4, sp, #7
 80038ea:	46a4      	mov	ip, r4
 80038ec:	270a      	movs	r7, #10
 80038ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80038f2:	460a      	mov	r2, r1
 80038f4:	46a6      	mov	lr, r4
 80038f6:	fb07 1516 	mls	r5, r7, r6, r1
 80038fa:	2a63      	cmp	r2, #99	; 0x63
 80038fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003900:	4631      	mov	r1, r6
 8003902:	f104 34ff 	add.w	r4, r4, #4294967295
 8003906:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800390a:	dcf0      	bgt.n	80038ee <__exponent+0x20>
 800390c:	3130      	adds	r1, #48	; 0x30
 800390e:	f1ae 0502 	sub.w	r5, lr, #2
 8003912:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003916:	4629      	mov	r1, r5
 8003918:	1c44      	adds	r4, r0, #1
 800391a:	4561      	cmp	r1, ip
 800391c:	d30a      	bcc.n	8003934 <__exponent+0x66>
 800391e:	f10d 0209 	add.w	r2, sp, #9
 8003922:	eba2 020e 	sub.w	r2, r2, lr
 8003926:	4565      	cmp	r5, ip
 8003928:	bf88      	it	hi
 800392a:	2200      	movhi	r2, #0
 800392c:	4413      	add	r3, r2
 800392e:	1a18      	subs	r0, r3, r0
 8003930:	b003      	add	sp, #12
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003934:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003938:	f804 2f01 	strb.w	r2, [r4, #1]!
 800393c:	e7ed      	b.n	800391a <__exponent+0x4c>
 800393e:	2330      	movs	r3, #48	; 0x30
 8003940:	3130      	adds	r1, #48	; 0x30
 8003942:	7083      	strb	r3, [r0, #2]
 8003944:	70c1      	strb	r1, [r0, #3]
 8003946:	1d03      	adds	r3, r0, #4
 8003948:	e7f1      	b.n	800392e <__exponent+0x60>
	...

0800394c <_printf_float>:
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	b091      	sub	sp, #68	; 0x44
 8003952:	460c      	mov	r4, r1
 8003954:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003958:	4616      	mov	r6, r2
 800395a:	461f      	mov	r7, r3
 800395c:	4605      	mov	r5, r0
 800395e:	f002 ff07 	bl	8006770 <_localeconv_r>
 8003962:	6803      	ldr	r3, [r0, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	9309      	str	r3, [sp, #36]	; 0x24
 8003968:	f7fc fbf2 	bl	8000150 <strlen>
 800396c:	2300      	movs	r3, #0
 800396e:	930e      	str	r3, [sp, #56]	; 0x38
 8003970:	f8d8 3000 	ldr.w	r3, [r8]
 8003974:	900a      	str	r0, [sp, #40]	; 0x28
 8003976:	3307      	adds	r3, #7
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	f103 0208 	add.w	r2, r3, #8
 8003980:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003984:	f8d4 b000 	ldr.w	fp, [r4]
 8003988:	f8c8 2000 	str.w	r2, [r8]
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003994:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003998:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800399c:	930b      	str	r3, [sp, #44]	; 0x2c
 800399e:	f04f 32ff 	mov.w	r2, #4294967295
 80039a2:	4640      	mov	r0, r8
 80039a4:	4b9c      	ldr	r3, [pc, #624]	; (8003c18 <_printf_float+0x2cc>)
 80039a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039a8:	f7fd f830 	bl	8000a0c <__aeabi_dcmpun>
 80039ac:	bb70      	cbnz	r0, 8003a0c <_printf_float+0xc0>
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295
 80039b2:	4640      	mov	r0, r8
 80039b4:	4b98      	ldr	r3, [pc, #608]	; (8003c18 <_printf_float+0x2cc>)
 80039b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039b8:	f7fd f80a 	bl	80009d0 <__aeabi_dcmple>
 80039bc:	bb30      	cbnz	r0, 8003a0c <_printf_float+0xc0>
 80039be:	2200      	movs	r2, #0
 80039c0:	2300      	movs	r3, #0
 80039c2:	4640      	mov	r0, r8
 80039c4:	4651      	mov	r1, sl
 80039c6:	f7fc fff9 	bl	80009bc <__aeabi_dcmplt>
 80039ca:	b110      	cbz	r0, 80039d2 <_printf_float+0x86>
 80039cc:	232d      	movs	r3, #45	; 0x2d
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d2:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <_printf_float+0x2d0>)
 80039d4:	4892      	ldr	r0, [pc, #584]	; (8003c20 <_printf_float+0x2d4>)
 80039d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80039da:	bf94      	ite	ls
 80039dc:	4698      	movls	r8, r3
 80039de:	4680      	movhi	r8, r0
 80039e0:	2303      	movs	r3, #3
 80039e2:	f04f 0a00 	mov.w	sl, #0
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	f02b 0304 	bic.w	r3, fp, #4
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	4633      	mov	r3, r6
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	9700      	str	r7, [sp, #0]
 80039f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80039f8:	f000 f9d4 	bl	8003da4 <_printf_common>
 80039fc:	3001      	adds	r0, #1
 80039fe:	f040 8090 	bne.w	8003b22 <_printf_float+0x1d6>
 8003a02:	f04f 30ff 	mov.w	r0, #4294967295
 8003a06:	b011      	add	sp, #68	; 0x44
 8003a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	4653      	mov	r3, sl
 8003a10:	4640      	mov	r0, r8
 8003a12:	4651      	mov	r1, sl
 8003a14:	f7fc fffa 	bl	8000a0c <__aeabi_dcmpun>
 8003a18:	b148      	cbz	r0, 8003a2e <_printf_float+0xe2>
 8003a1a:	f1ba 0f00 	cmp.w	sl, #0
 8003a1e:	bfb8      	it	lt
 8003a20:	232d      	movlt	r3, #45	; 0x2d
 8003a22:	4880      	ldr	r0, [pc, #512]	; (8003c24 <_printf_float+0x2d8>)
 8003a24:	bfb8      	it	lt
 8003a26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a2a:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <_printf_float+0x2dc>)
 8003a2c:	e7d3      	b.n	80039d6 <_printf_float+0x8a>
 8003a2e:	6863      	ldr	r3, [r4, #4]
 8003a30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	d142      	bne.n	8003abe <_printf_float+0x172>
 8003a38:	2306      	movs	r3, #6
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	9206      	str	r2, [sp, #24]
 8003a40:	aa0e      	add	r2, sp, #56	; 0x38
 8003a42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a46:	aa0d      	add	r2, sp, #52	; 0x34
 8003a48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a4c:	9203      	str	r2, [sp, #12]
 8003a4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	6863      	ldr	r3, [r4, #4]
 8003a5a:	4642      	mov	r2, r8
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4628      	mov	r0, r5
 8003a60:	4653      	mov	r3, sl
 8003a62:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a64:	f7ff fed4 	bl	8003810 <__cvt>
 8003a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a6a:	4680      	mov	r8, r0
 8003a6c:	2947      	cmp	r1, #71	; 0x47
 8003a6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a70:	d108      	bne.n	8003a84 <_printf_float+0x138>
 8003a72:	1cc8      	adds	r0, r1, #3
 8003a74:	db02      	blt.n	8003a7c <_printf_float+0x130>
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	4299      	cmp	r1, r3
 8003a7a:	dd40      	ble.n	8003afe <_printf_float+0x1b2>
 8003a7c:	f1a9 0902 	sub.w	r9, r9, #2
 8003a80:	fa5f f989 	uxtb.w	r9, r9
 8003a84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a88:	d81f      	bhi.n	8003aca <_printf_float+0x17e>
 8003a8a:	464a      	mov	r2, r9
 8003a8c:	3901      	subs	r1, #1
 8003a8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a92:	910d      	str	r1, [sp, #52]	; 0x34
 8003a94:	f7ff ff1b 	bl	80038ce <__exponent>
 8003a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a9a:	4682      	mov	sl, r0
 8003a9c:	1813      	adds	r3, r2, r0
 8003a9e:	2a01      	cmp	r2, #1
 8003aa0:	6123      	str	r3, [r4, #16]
 8003aa2:	dc02      	bgt.n	8003aaa <_printf_float+0x15e>
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	07d2      	lsls	r2, r2, #31
 8003aa8:	d501      	bpl.n	8003aae <_printf_float+0x162>
 8003aaa:	3301      	adds	r3, #1
 8003aac:	6123      	str	r3, [r4, #16]
 8003aae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d09b      	beq.n	80039ee <_printf_float+0xa2>
 8003ab6:	232d      	movs	r3, #45	; 0x2d
 8003ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abc:	e797      	b.n	80039ee <_printf_float+0xa2>
 8003abe:	2947      	cmp	r1, #71	; 0x47
 8003ac0:	d1bc      	bne.n	8003a3c <_printf_float+0xf0>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ba      	bne.n	8003a3c <_printf_float+0xf0>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e7b7      	b.n	8003a3a <_printf_float+0xee>
 8003aca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003ace:	d118      	bne.n	8003b02 <_printf_float+0x1b6>
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	dd0b      	ble.n	8003aee <_printf_float+0x1a2>
 8003ad6:	6121      	str	r1, [r4, #16]
 8003ad8:	b913      	cbnz	r3, 8003ae0 <_printf_float+0x194>
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	07d0      	lsls	r0, r2, #31
 8003ade:	d502      	bpl.n	8003ae6 <_printf_float+0x19a>
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	440b      	add	r3, r1
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	f04f 0a00 	mov.w	sl, #0
 8003aea:	65a1      	str	r1, [r4, #88]	; 0x58
 8003aec:	e7df      	b.n	8003aae <_printf_float+0x162>
 8003aee:	b913      	cbnz	r3, 8003af6 <_printf_float+0x1aa>
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	07d2      	lsls	r2, r2, #31
 8003af4:	d501      	bpl.n	8003afa <_printf_float+0x1ae>
 8003af6:	3302      	adds	r3, #2
 8003af8:	e7f4      	b.n	8003ae4 <_printf_float+0x198>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e7f2      	b.n	8003ae4 <_printf_float+0x198>
 8003afe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b04:	4299      	cmp	r1, r3
 8003b06:	db05      	blt.n	8003b14 <_printf_float+0x1c8>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	6121      	str	r1, [r4, #16]
 8003b0c:	07d8      	lsls	r0, r3, #31
 8003b0e:	d5ea      	bpl.n	8003ae6 <_printf_float+0x19a>
 8003b10:	1c4b      	adds	r3, r1, #1
 8003b12:	e7e7      	b.n	8003ae4 <_printf_float+0x198>
 8003b14:	2900      	cmp	r1, #0
 8003b16:	bfcc      	ite	gt
 8003b18:	2201      	movgt	r2, #1
 8003b1a:	f1c1 0202 	rsble	r2, r1, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	e7e0      	b.n	8003ae4 <_printf_float+0x198>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	055a      	lsls	r2, r3, #21
 8003b26:	d407      	bmi.n	8003b38 <_printf_float+0x1ec>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d12b      	bne.n	8003b8e <_printf_float+0x242>
 8003b36:	e764      	b.n	8003a02 <_printf_float+0xb6>
 8003b38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b3c:	f240 80dd 	bls.w	8003cfa <_printf_float+0x3ae>
 8003b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b44:	2200      	movs	r2, #0
 8003b46:	2300      	movs	r3, #0
 8003b48:	f7fc ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d033      	beq.n	8003bb8 <_printf_float+0x26c>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4631      	mov	r1, r6
 8003b54:	4628      	mov	r0, r5
 8003b56:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <_printf_float+0x2e0>)
 8003b58:	47b8      	blx	r7
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	f43f af51 	beq.w	8003a02 <_printf_float+0xb6>
 8003b60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b64:	429a      	cmp	r2, r3
 8003b66:	db02      	blt.n	8003b6e <_printf_float+0x222>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	07d8      	lsls	r0, r3, #31
 8003b6c:	d50f      	bpl.n	8003b8e <_printf_float+0x242>
 8003b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f af42 	beq.w	8003a02 <_printf_float+0xb6>
 8003b7e:	f04f 0800 	mov.w	r8, #0
 8003b82:	f104 091a 	add.w	r9, r4, #26
 8003b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	4543      	cmp	r3, r8
 8003b8c:	dc09      	bgt.n	8003ba2 <_printf_float+0x256>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	079b      	lsls	r3, r3, #30
 8003b92:	f100 8102 	bmi.w	8003d9a <_printf_float+0x44e>
 8003b96:	68e0      	ldr	r0, [r4, #12]
 8003b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b9a:	4298      	cmp	r0, r3
 8003b9c:	bfb8      	it	lt
 8003b9e:	4618      	movlt	r0, r3
 8003ba0:	e731      	b.n	8003a06 <_printf_float+0xba>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	464a      	mov	r2, r9
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b8      	blx	r7
 8003bac:	3001      	adds	r0, #1
 8003bae:	f43f af28 	beq.w	8003a02 <_printf_float+0xb6>
 8003bb2:	f108 0801 	add.w	r8, r8, #1
 8003bb6:	e7e6      	b.n	8003b86 <_printf_float+0x23a>
 8003bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	dc38      	bgt.n	8003c30 <_printf_float+0x2e4>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <_printf_float+0x2e0>)
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	f43f af1a 	beq.w	8003a02 <_printf_float+0xb6>
 8003bce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d102      	bne.n	8003bdc <_printf_float+0x290>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	07d9      	lsls	r1, r3, #31
 8003bda:	d5d8      	bpl.n	8003b8e <_printf_float+0x242>
 8003bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003be0:	4631      	mov	r1, r6
 8003be2:	4628      	mov	r0, r5
 8003be4:	47b8      	blx	r7
 8003be6:	3001      	adds	r0, #1
 8003be8:	f43f af0b 	beq.w	8003a02 <_printf_float+0xb6>
 8003bec:	f04f 0900 	mov.w	r9, #0
 8003bf0:	f104 0a1a 	add.w	sl, r4, #26
 8003bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bf6:	425b      	negs	r3, r3
 8003bf8:	454b      	cmp	r3, r9
 8003bfa:	dc01      	bgt.n	8003c00 <_printf_float+0x2b4>
 8003bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfe:	e794      	b.n	8003b2a <_printf_float+0x1de>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4652      	mov	r2, sl
 8003c04:	4631      	mov	r1, r6
 8003c06:	4628      	mov	r0, r5
 8003c08:	47b8      	blx	r7
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f43f aef9 	beq.w	8003a02 <_printf_float+0xb6>
 8003c10:	f109 0901 	add.w	r9, r9, #1
 8003c14:	e7ee      	b.n	8003bf4 <_printf_float+0x2a8>
 8003c16:	bf00      	nop
 8003c18:	7fefffff 	.word	0x7fefffff
 8003c1c:	08007988 	.word	0x08007988
 8003c20:	0800798c 	.word	0x0800798c
 8003c24:	08007994 	.word	0x08007994
 8003c28:	08007990 	.word	0x08007990
 8003c2c:	08007998 	.word	0x08007998
 8003c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bfa8      	it	ge
 8003c38:	461a      	movge	r2, r3
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	4691      	mov	r9, r2
 8003c3e:	dc37      	bgt.n	8003cb0 <_printf_float+0x364>
 8003c40:	f04f 0b00 	mov.w	fp, #0
 8003c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c48:	f104 021a 	add.w	r2, r4, #26
 8003c4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c50:	ebaa 0309 	sub.w	r3, sl, r9
 8003c54:	455b      	cmp	r3, fp
 8003c56:	dc33      	bgt.n	8003cc0 <_printf_float+0x374>
 8003c58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	db3b      	blt.n	8003cd8 <_printf_float+0x38c>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	07da      	lsls	r2, r3, #31
 8003c64:	d438      	bmi.n	8003cd8 <_printf_float+0x38c>
 8003c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c6a:	eba2 030a 	sub.w	r3, r2, sl
 8003c6e:	eba2 0901 	sub.w	r9, r2, r1
 8003c72:	4599      	cmp	r9, r3
 8003c74:	bfa8      	it	ge
 8003c76:	4699      	movge	r9, r3
 8003c78:	f1b9 0f00 	cmp.w	r9, #0
 8003c7c:	dc34      	bgt.n	8003ce8 <_printf_float+0x39c>
 8003c7e:	f04f 0800 	mov.w	r8, #0
 8003c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c86:	f104 0a1a 	add.w	sl, r4, #26
 8003c8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	eba3 0309 	sub.w	r3, r3, r9
 8003c94:	4543      	cmp	r3, r8
 8003c96:	f77f af7a 	ble.w	8003b8e <_printf_float+0x242>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4652      	mov	r2, sl
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b8      	blx	r7
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	f43f aeac 	beq.w	8003a02 <_printf_float+0xb6>
 8003caa:	f108 0801 	add.w	r8, r8, #1
 8003cae:	e7ec      	b.n	8003c8a <_printf_float+0x33e>
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d1c0      	bne.n	8003c40 <_printf_float+0x2f4>
 8003cbe:	e6a0      	b.n	8003a02 <_printf_float+0xb6>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f43f ae99 	beq.w	8003a02 <_printf_float+0xb6>
 8003cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cd2:	f10b 0b01 	add.w	fp, fp, #1
 8003cd6:	e7b9      	b.n	8003c4c <_printf_float+0x300>
 8003cd8:	4631      	mov	r1, r6
 8003cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b8      	blx	r7
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d1bf      	bne.n	8003c66 <_printf_float+0x31a>
 8003ce6:	e68c      	b.n	8003a02 <_printf_float+0xb6>
 8003ce8:	464b      	mov	r3, r9
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	eb08 020a 	add.w	r2, r8, sl
 8003cf2:	47b8      	blx	r7
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d1c2      	bne.n	8003c7e <_printf_float+0x332>
 8003cf8:	e683      	b.n	8003a02 <_printf_float+0xb6>
 8003cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cfc:	2a01      	cmp	r2, #1
 8003cfe:	dc01      	bgt.n	8003d04 <_printf_float+0x3b8>
 8003d00:	07db      	lsls	r3, r3, #31
 8003d02:	d537      	bpl.n	8003d74 <_printf_float+0x428>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4642      	mov	r2, r8
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f ae77 	beq.w	8003a02 <_printf_float+0xb6>
 8003d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f ae6f 	beq.w	8003a02 <_printf_float+0xb6>
 8003d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f7fc fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8003d30:	b9d8      	cbnz	r0, 8003d6a <_printf_float+0x41e>
 8003d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d34:	f108 0201 	add.w	r2, r8, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	d10e      	bne.n	8003d62 <_printf_float+0x416>
 8003d44:	e65d      	b.n	8003a02 <_printf_float+0xb6>
 8003d46:	2301      	movs	r3, #1
 8003d48:	464a      	mov	r2, r9
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	f43f ae56 	beq.w	8003a02 <_printf_float+0xb6>
 8003d56:	f108 0801 	add.w	r8, r8, #1
 8003d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	4543      	cmp	r3, r8
 8003d60:	dcf1      	bgt.n	8003d46 <_printf_float+0x3fa>
 8003d62:	4653      	mov	r3, sl
 8003d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d68:	e6e0      	b.n	8003b2c <_printf_float+0x1e0>
 8003d6a:	f04f 0800 	mov.w	r8, #0
 8003d6e:	f104 091a 	add.w	r9, r4, #26
 8003d72:	e7f2      	b.n	8003d5a <_printf_float+0x40e>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4642      	mov	r2, r8
 8003d78:	e7df      	b.n	8003d3a <_printf_float+0x3ee>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	464a      	mov	r2, r9
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f ae3c 	beq.w	8003a02 <_printf_float+0xb6>
 8003d8a:	f108 0801 	add.w	r8, r8, #1
 8003d8e:	68e3      	ldr	r3, [r4, #12]
 8003d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d92:	1a5b      	subs	r3, r3, r1
 8003d94:	4543      	cmp	r3, r8
 8003d96:	dcf0      	bgt.n	8003d7a <_printf_float+0x42e>
 8003d98:	e6fd      	b.n	8003b96 <_printf_float+0x24a>
 8003d9a:	f04f 0800 	mov.w	r8, #0
 8003d9e:	f104 0919 	add.w	r9, r4, #25
 8003da2:	e7f4      	b.n	8003d8e <_printf_float+0x442>

08003da4 <_printf_common>:
 8003da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da8:	4616      	mov	r6, r2
 8003daa:	4699      	mov	r9, r3
 8003dac:	688a      	ldr	r2, [r1, #8]
 8003dae:	690b      	ldr	r3, [r1, #16]
 8003db0:	4607      	mov	r7, r0
 8003db2:	4293      	cmp	r3, r2
 8003db4:	bfb8      	it	lt
 8003db6:	4613      	movlt	r3, r2
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dc4:	b10a      	cbz	r2, 8003dca <_printf_common+0x26>
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	0699      	lsls	r1, r3, #26
 8003dce:	bf42      	ittt	mi
 8003dd0:	6833      	ldrmi	r3, [r6, #0]
 8003dd2:	3302      	addmi	r3, #2
 8003dd4:	6033      	strmi	r3, [r6, #0]
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	f015 0506 	ands.w	r5, r5, #6
 8003ddc:	d106      	bne.n	8003dec <_printf_common+0x48>
 8003dde:	f104 0a19 	add.w	sl, r4, #25
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	6832      	ldr	r2, [r6, #0]
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dc28      	bgt.n	8003e3e <_printf_common+0x9a>
 8003dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df0:	1e13      	subs	r3, r2, #0
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	bf18      	it	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	0692      	lsls	r2, r2, #26
 8003dfa:	d42d      	bmi.n	8003e58 <_printf_common+0xb4>
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	4638      	mov	r0, r7
 8003e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d020      	beq.n	8003e4c <_printf_common+0xa8>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	68e5      	ldr	r5, [r4, #12]
 8003e0e:	f003 0306 	and.w	r3, r3, #6
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	bf18      	it	ne
 8003e16:	2500      	movne	r5, #0
 8003e18:	6832      	ldr	r2, [r6, #0]
 8003e1a:	f04f 0600 	mov.w	r6, #0
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	bf08      	it	eq
 8003e22:	1aad      	subeq	r5, r5, r2
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	bf08      	it	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	bfc4      	itt	gt
 8003e30:	1a9b      	subgt	r3, r3, r2
 8003e32:	18ed      	addgt	r5, r5, r3
 8003e34:	341a      	adds	r4, #26
 8003e36:	42b5      	cmp	r5, r6
 8003e38:	d11a      	bne.n	8003e70 <_printf_common+0xcc>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e008      	b.n	8003e50 <_printf_common+0xac>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4652      	mov	r2, sl
 8003e42:	4649      	mov	r1, r9
 8003e44:	4638      	mov	r0, r7
 8003e46:	47c0      	blx	r8
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d103      	bne.n	8003e54 <_printf_common+0xb0>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	3501      	adds	r5, #1
 8003e56:	e7c4      	b.n	8003de2 <_printf_common+0x3e>
 8003e58:	2030      	movs	r0, #48	; 0x30
 8003e5a:	18e1      	adds	r1, r4, r3
 8003e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e66:	4422      	add	r2, r4
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e6e:	e7c5      	b.n	8003dfc <_printf_common+0x58>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4622      	mov	r2, r4
 8003e74:	4649      	mov	r1, r9
 8003e76:	4638      	mov	r0, r7
 8003e78:	47c0      	blx	r8
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0e6      	beq.n	8003e4c <_printf_common+0xa8>
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7d9      	b.n	8003e36 <_printf_common+0x92>
	...

08003e84 <_printf_i>:
 8003e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	460c      	mov	r4, r1
 8003e8a:	7e27      	ldrb	r7, [r4, #24]
 8003e8c:	4691      	mov	r9, r2
 8003e8e:	2f78      	cmp	r7, #120	; 0x78
 8003e90:	4680      	mov	r8, r0
 8003e92:	469a      	mov	sl, r3
 8003e94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9a:	d807      	bhi.n	8003eac <_printf_i+0x28>
 8003e9c:	2f62      	cmp	r7, #98	; 0x62
 8003e9e:	d80a      	bhi.n	8003eb6 <_printf_i+0x32>
 8003ea0:	2f00      	cmp	r7, #0
 8003ea2:	f000 80d9 	beq.w	8004058 <_printf_i+0x1d4>
 8003ea6:	2f58      	cmp	r7, #88	; 0x58
 8003ea8:	f000 80a4 	beq.w	8003ff4 <_printf_i+0x170>
 8003eac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb4:	e03a      	b.n	8003f2c <_printf_i+0xa8>
 8003eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eba:	2b15      	cmp	r3, #21
 8003ebc:	d8f6      	bhi.n	8003eac <_printf_i+0x28>
 8003ebe:	a001      	add	r0, pc, #4	; (adr r0, 8003ec4 <_printf_i+0x40>)
 8003ec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f31 	.word	0x08003f31
 8003ecc:	08003ead 	.word	0x08003ead
 8003ed0:	08003ead 	.word	0x08003ead
 8003ed4:	08003ead 	.word	0x08003ead
 8003ed8:	08003ead 	.word	0x08003ead
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003ead 	.word	0x08003ead
 8003ee4:	08003ead 	.word	0x08003ead
 8003ee8:	08003ead 	.word	0x08003ead
 8003eec:	08003ead 	.word	0x08003ead
 8003ef0:	0800403f 	.word	0x0800403f
 8003ef4:	08003f61 	.word	0x08003f61
 8003ef8:	08004021 	.word	0x08004021
 8003efc:	08003ead 	.word	0x08003ead
 8003f00:	08003ead 	.word	0x08003ead
 8003f04:	08004061 	.word	0x08004061
 8003f08:	08003ead 	.word	0x08003ead
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003ead 	.word	0x08003ead
 8003f14:	08003ead 	.word	0x08003ead
 8003f18:	08004029 	.word	0x08004029
 8003f1c:	680b      	ldr	r3, [r1, #0]
 8003f1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0a4      	b.n	800407a <_printf_i+0x1f6>
 8003f30:	6825      	ldr	r5, [r4, #0]
 8003f32:	6808      	ldr	r0, [r1, #0]
 8003f34:	062e      	lsls	r6, r5, #24
 8003f36:	f100 0304 	add.w	r3, r0, #4
 8003f3a:	d50a      	bpl.n	8003f52 <_printf_i+0xce>
 8003f3c:	6805      	ldr	r5, [r0, #0]
 8003f3e:	600b      	str	r3, [r1, #0]
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	da03      	bge.n	8003f4c <_printf_i+0xc8>
 8003f44:	232d      	movs	r3, #45	; 0x2d
 8003f46:	426d      	negs	r5, r5
 8003f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4c:	230a      	movs	r3, #10
 8003f4e:	485e      	ldr	r0, [pc, #376]	; (80040c8 <_printf_i+0x244>)
 8003f50:	e019      	b.n	8003f86 <_printf_i+0x102>
 8003f52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f56:	6805      	ldr	r5, [r0, #0]
 8003f58:	600b      	str	r3, [r1, #0]
 8003f5a:	bf18      	it	ne
 8003f5c:	b22d      	sxthne	r5, r5
 8003f5e:	e7ef      	b.n	8003f40 <_printf_i+0xbc>
 8003f60:	680b      	ldr	r3, [r1, #0]
 8003f62:	6825      	ldr	r5, [r4, #0]
 8003f64:	1d18      	adds	r0, r3, #4
 8003f66:	6008      	str	r0, [r1, #0]
 8003f68:	0628      	lsls	r0, r5, #24
 8003f6a:	d501      	bpl.n	8003f70 <_printf_i+0xec>
 8003f6c:	681d      	ldr	r5, [r3, #0]
 8003f6e:	e002      	b.n	8003f76 <_printf_i+0xf2>
 8003f70:	0669      	lsls	r1, r5, #25
 8003f72:	d5fb      	bpl.n	8003f6c <_printf_i+0xe8>
 8003f74:	881d      	ldrh	r5, [r3, #0]
 8003f76:	2f6f      	cmp	r7, #111	; 0x6f
 8003f78:	bf0c      	ite	eq
 8003f7a:	2308      	moveq	r3, #8
 8003f7c:	230a      	movne	r3, #10
 8003f7e:	4852      	ldr	r0, [pc, #328]	; (80040c8 <_printf_i+0x244>)
 8003f80:	2100      	movs	r1, #0
 8003f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f86:	6866      	ldr	r6, [r4, #4]
 8003f88:	2e00      	cmp	r6, #0
 8003f8a:	bfa8      	it	ge
 8003f8c:	6821      	ldrge	r1, [r4, #0]
 8003f8e:	60a6      	str	r6, [r4, #8]
 8003f90:	bfa4      	itt	ge
 8003f92:	f021 0104 	bicge.w	r1, r1, #4
 8003f96:	6021      	strge	r1, [r4, #0]
 8003f98:	b90d      	cbnz	r5, 8003f9e <_printf_i+0x11a>
 8003f9a:	2e00      	cmp	r6, #0
 8003f9c:	d04d      	beq.n	800403a <_printf_i+0x1b6>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8003fa8:	5dc7      	ldrb	r7, [r0, r7]
 8003faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fae:	462f      	mov	r7, r5
 8003fb0:	42bb      	cmp	r3, r7
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	d9f4      	bls.n	8003fa0 <_printf_i+0x11c>
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d10b      	bne.n	8003fd2 <_printf_i+0x14e>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	07df      	lsls	r7, r3, #31
 8003fbe:	d508      	bpl.n	8003fd2 <_printf_i+0x14e>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	6861      	ldr	r1, [r4, #4]
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	bfde      	ittt	le
 8003fc8:	2330      	movle	r3, #48	; 0x30
 8003fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd2:	1b92      	subs	r2, r2, r6
 8003fd4:	6122      	str	r2, [r4, #16]
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f8cd a000 	str.w	sl, [sp]
 8003fe0:	aa03      	add	r2, sp, #12
 8003fe2:	f7ff fedf 	bl	8003da4 <_printf_common>
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d14c      	bne.n	8004084 <_printf_i+0x200>
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	b004      	add	sp, #16
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	4834      	ldr	r0, [pc, #208]	; (80040c8 <_printf_i+0x244>)
 8003ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ffa:	680e      	ldr	r6, [r1, #0]
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004002:	061f      	lsls	r7, r3, #24
 8004004:	600e      	str	r6, [r1, #0]
 8004006:	d514      	bpl.n	8004032 <_printf_i+0x1ae>
 8004008:	07d9      	lsls	r1, r3, #31
 800400a:	bf44      	itt	mi
 800400c:	f043 0320 	orrmi.w	r3, r3, #32
 8004010:	6023      	strmi	r3, [r4, #0]
 8004012:	b91d      	cbnz	r5, 800401c <_printf_i+0x198>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	f023 0320 	bic.w	r3, r3, #32
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	2310      	movs	r3, #16
 800401e:	e7af      	b.n	8003f80 <_printf_i+0xfc>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	2378      	movs	r3, #120	; 0x78
 800402a:	4828      	ldr	r0, [pc, #160]	; (80040cc <_printf_i+0x248>)
 800402c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004030:	e7e3      	b.n	8003ffa <_printf_i+0x176>
 8004032:	065e      	lsls	r6, r3, #25
 8004034:	bf48      	it	mi
 8004036:	b2ad      	uxthmi	r5, r5
 8004038:	e7e6      	b.n	8004008 <_printf_i+0x184>
 800403a:	4616      	mov	r6, r2
 800403c:	e7bb      	b.n	8003fb6 <_printf_i+0x132>
 800403e:	680b      	ldr	r3, [r1, #0]
 8004040:	6826      	ldr	r6, [r4, #0]
 8004042:	1d1d      	adds	r5, r3, #4
 8004044:	6960      	ldr	r0, [r4, #20]
 8004046:	600d      	str	r5, [r1, #0]
 8004048:	0635      	lsls	r5, r6, #24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	d501      	bpl.n	8004052 <_printf_i+0x1ce>
 800404e:	6018      	str	r0, [r3, #0]
 8004050:	e002      	b.n	8004058 <_printf_i+0x1d4>
 8004052:	0671      	lsls	r1, r6, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0x1ca>
 8004056:	8018      	strh	r0, [r3, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	4616      	mov	r6, r2
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	e7ba      	b.n	8003fd6 <_printf_i+0x152>
 8004060:	680b      	ldr	r3, [r1, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	600a      	str	r2, [r1, #0]
 8004066:	681e      	ldr	r6, [r3, #0]
 8004068:	2100      	movs	r1, #0
 800406a:	4630      	mov	r0, r6
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	f002 fc05 	bl	800687c <memchr>
 8004072:	b108      	cbz	r0, 8004078 <_printf_i+0x1f4>
 8004074:	1b80      	subs	r0, r0, r6
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004082:	e7a8      	b.n	8003fd6 <_printf_i+0x152>
 8004084:	4632      	mov	r2, r6
 8004086:	4649      	mov	r1, r9
 8004088:	4640      	mov	r0, r8
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	47d0      	blx	sl
 800408e:	3001      	adds	r0, #1
 8004090:	d0ab      	beq.n	8003fea <_printf_i+0x166>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	079b      	lsls	r3, r3, #30
 8004096:	d413      	bmi.n	80040c0 <_printf_i+0x23c>
 8004098:	68e0      	ldr	r0, [r4, #12]
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	4298      	cmp	r0, r3
 800409e:	bfb8      	it	lt
 80040a0:	4618      	movlt	r0, r3
 80040a2:	e7a4      	b.n	8003fee <_printf_i+0x16a>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4632      	mov	r2, r6
 80040a8:	4649      	mov	r1, r9
 80040aa:	4640      	mov	r0, r8
 80040ac:	47d0      	blx	sl
 80040ae:	3001      	adds	r0, #1
 80040b0:	d09b      	beq.n	8003fea <_printf_i+0x166>
 80040b2:	3501      	adds	r5, #1
 80040b4:	68e3      	ldr	r3, [r4, #12]
 80040b6:	9903      	ldr	r1, [sp, #12]
 80040b8:	1a5b      	subs	r3, r3, r1
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	dcf2      	bgt.n	80040a4 <_printf_i+0x220>
 80040be:	e7eb      	b.n	8004098 <_printf_i+0x214>
 80040c0:	2500      	movs	r5, #0
 80040c2:	f104 0619 	add.w	r6, r4, #25
 80040c6:	e7f5      	b.n	80040b4 <_printf_i+0x230>
 80040c8:	0800799a 	.word	0x0800799a
 80040cc:	080079ab 	.word	0x080079ab

080040d0 <iprintf>:
 80040d0:	b40f      	push	{r0, r1, r2, r3}
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <iprintf+0x2c>)
 80040d4:	b513      	push	{r0, r1, r4, lr}
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	b124      	cbz	r4, 80040e4 <iprintf+0x14>
 80040da:	69a3      	ldr	r3, [r4, #24]
 80040dc:	b913      	cbnz	r3, 80040e4 <iprintf+0x14>
 80040de:	4620      	mov	r0, r4
 80040e0:	f001 ff42 	bl	8005f68 <__sinit>
 80040e4:	ab05      	add	r3, sp, #20
 80040e6:	4620      	mov	r0, r4
 80040e8:	9a04      	ldr	r2, [sp, #16]
 80040ea:	68a1      	ldr	r1, [r4, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	f003 f975 	bl	80073dc <_vfiprintf_r>
 80040f2:	b002      	add	sp, #8
 80040f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr
 80040fc:	20000010 	.word	0x20000010

08004100 <_puts_r>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	460e      	mov	r6, r1
 8004104:	4605      	mov	r5, r0
 8004106:	b118      	cbz	r0, 8004110 <_puts_r+0x10>
 8004108:	6983      	ldr	r3, [r0, #24]
 800410a:	b90b      	cbnz	r3, 8004110 <_puts_r+0x10>
 800410c:	f001 ff2c 	bl	8005f68 <__sinit>
 8004110:	69ab      	ldr	r3, [r5, #24]
 8004112:	68ac      	ldr	r4, [r5, #8]
 8004114:	b913      	cbnz	r3, 800411c <_puts_r+0x1c>
 8004116:	4628      	mov	r0, r5
 8004118:	f001 ff26 	bl	8005f68 <__sinit>
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <_puts_r+0xd0>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d120      	bne.n	8004164 <_puts_r+0x64>
 8004122:	686c      	ldr	r4, [r5, #4]
 8004124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d405      	bmi.n	8004136 <_puts_r+0x36>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	0598      	lsls	r0, r3, #22
 800412e:	d402      	bmi.n	8004136 <_puts_r+0x36>
 8004130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004132:	f002 fb22 	bl	800677a <__retarget_lock_acquire_recursive>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	0719      	lsls	r1, r3, #28
 800413a:	d51d      	bpl.n	8004178 <_puts_r+0x78>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b1db      	cbz	r3, 8004178 <_puts_r+0x78>
 8004140:	3e01      	subs	r6, #1
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004148:	3b01      	subs	r3, #1
 800414a:	60a3      	str	r3, [r4, #8]
 800414c:	bb39      	cbnz	r1, 800419e <_puts_r+0x9e>
 800414e:	2b00      	cmp	r3, #0
 8004150:	da38      	bge.n	80041c4 <_puts_r+0xc4>
 8004152:	4622      	mov	r2, r4
 8004154:	210a      	movs	r1, #10
 8004156:	4628      	mov	r0, r5
 8004158:	f000 feb0 	bl	8004ebc <__swbuf_r>
 800415c:	3001      	adds	r0, #1
 800415e:	d011      	beq.n	8004184 <_puts_r+0x84>
 8004160:	250a      	movs	r5, #10
 8004162:	e011      	b.n	8004188 <_puts_r+0x88>
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <_puts_r+0xd4>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d101      	bne.n	800416e <_puts_r+0x6e>
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	e7da      	b.n	8004124 <_puts_r+0x24>
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <_puts_r+0xd8>)
 8004170:	429c      	cmp	r4, r3
 8004172:	bf08      	it	eq
 8004174:	68ec      	ldreq	r4, [r5, #12]
 8004176:	e7d5      	b.n	8004124 <_puts_r+0x24>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 fef0 	bl	8004f60 <__swsetup_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	d0dd      	beq.n	8004140 <_puts_r+0x40>
 8004184:	f04f 35ff 	mov.w	r5, #4294967295
 8004188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800418a:	07da      	lsls	r2, r3, #31
 800418c:	d405      	bmi.n	800419a <_puts_r+0x9a>
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	d402      	bmi.n	800419a <_puts_r+0x9a>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f002 faf1 	bl	800677c <__retarget_lock_release_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	bd70      	pop	{r4, r5, r6, pc}
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da04      	bge.n	80041ac <_puts_r+0xac>
 80041a2:	69a2      	ldr	r2, [r4, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	dc06      	bgt.n	80041b6 <_puts_r+0xb6>
 80041a8:	290a      	cmp	r1, #10
 80041aa:	d004      	beq.n	80041b6 <_puts_r+0xb6>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	6022      	str	r2, [r4, #0]
 80041b2:	7019      	strb	r1, [r3, #0]
 80041b4:	e7c5      	b.n	8004142 <_puts_r+0x42>
 80041b6:	4622      	mov	r2, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 fe7f 	bl	8004ebc <__swbuf_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	d1bf      	bne.n	8004142 <_puts_r+0x42>
 80041c2:	e7df      	b.n	8004184 <_puts_r+0x84>
 80041c4:	250a      	movs	r5, #10
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	6022      	str	r2, [r4, #0]
 80041cc:	701d      	strb	r5, [r3, #0]
 80041ce:	e7db      	b.n	8004188 <_puts_r+0x88>
 80041d0:	08007ac4 	.word	0x08007ac4
 80041d4:	08007ae4 	.word	0x08007ae4
 80041d8:	08007aa4 	.word	0x08007aa4

080041dc <puts>:
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <puts+0xc>)
 80041de:	4601      	mov	r1, r0
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f7ff bf8d 	b.w	8004100 <_puts_r>
 80041e6:	bf00      	nop
 80041e8:	20000010 	.word	0x20000010

080041ec <sulp>:
 80041ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f0:	460f      	mov	r7, r1
 80041f2:	4690      	mov	r8, r2
 80041f4:	f002 fece 	bl	8006f94 <__ulp>
 80041f8:	4604      	mov	r4, r0
 80041fa:	460d      	mov	r5, r1
 80041fc:	f1b8 0f00 	cmp.w	r8, #0
 8004200:	d011      	beq.n	8004226 <sulp+0x3a>
 8004202:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004206:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800420a:	2b00      	cmp	r3, #0
 800420c:	dd0b      	ble.n	8004226 <sulp+0x3a>
 800420e:	2400      	movs	r4, #0
 8004210:	051b      	lsls	r3, r3, #20
 8004212:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004216:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	f7fc f95b 	bl	80004d8 <__aeabi_dmul>
 8004222:	4604      	mov	r4, r0
 8004224:	460d      	mov	r5, r1
 8004226:	4620      	mov	r0, r4
 8004228:	4629      	mov	r1, r5
 800422a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004230 <_strtod_l>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	469b      	mov	fp, r3
 8004236:	2300      	movs	r3, #0
 8004238:	b0a1      	sub	sp, #132	; 0x84
 800423a:	931c      	str	r3, [sp, #112]	; 0x70
 800423c:	4ba1      	ldr	r3, [pc, #644]	; (80044c4 <_strtod_l+0x294>)
 800423e:	4682      	mov	sl, r0
 8004240:	681f      	ldr	r7, [r3, #0]
 8004242:	460e      	mov	r6, r1
 8004244:	4638      	mov	r0, r7
 8004246:	9217      	str	r2, [sp, #92]	; 0x5c
 8004248:	f7fb ff82 	bl	8000150 <strlen>
 800424c:	f04f 0800 	mov.w	r8, #0
 8004250:	4604      	mov	r4, r0
 8004252:	f04f 0900 	mov.w	r9, #0
 8004256:	961b      	str	r6, [sp, #108]	; 0x6c
 8004258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	2a2b      	cmp	r2, #43	; 0x2b
 800425e:	d04c      	beq.n	80042fa <_strtod_l+0xca>
 8004260:	d83a      	bhi.n	80042d8 <_strtod_l+0xa8>
 8004262:	2a0d      	cmp	r2, #13
 8004264:	d833      	bhi.n	80042ce <_strtod_l+0x9e>
 8004266:	2a08      	cmp	r2, #8
 8004268:	d833      	bhi.n	80042d2 <_strtod_l+0xa2>
 800426a:	2a00      	cmp	r2, #0
 800426c:	d03d      	beq.n	80042ea <_strtod_l+0xba>
 800426e:	2300      	movs	r3, #0
 8004270:	930c      	str	r3, [sp, #48]	; 0x30
 8004272:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004274:	782b      	ldrb	r3, [r5, #0]
 8004276:	2b30      	cmp	r3, #48	; 0x30
 8004278:	f040 80af 	bne.w	80043da <_strtod_l+0x1aa>
 800427c:	786b      	ldrb	r3, [r5, #1]
 800427e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004282:	2b58      	cmp	r3, #88	; 0x58
 8004284:	d16c      	bne.n	8004360 <_strtod_l+0x130>
 8004286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004288:	4650      	mov	r0, sl
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	ab1c      	add	r3, sp, #112	; 0x70
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4a8d      	ldr	r2, [pc, #564]	; (80044c8 <_strtod_l+0x298>)
 8004292:	f8cd b008 	str.w	fp, [sp, #8]
 8004296:	ab1d      	add	r3, sp, #116	; 0x74
 8004298:	a91b      	add	r1, sp, #108	; 0x6c
 800429a:	f001 ff6b 	bl	8006174 <__gethex>
 800429e:	f010 0607 	ands.w	r6, r0, #7
 80042a2:	4604      	mov	r4, r0
 80042a4:	d005      	beq.n	80042b2 <_strtod_l+0x82>
 80042a6:	2e06      	cmp	r6, #6
 80042a8:	d129      	bne.n	80042fe <_strtod_l+0xce>
 80042aa:	2300      	movs	r3, #0
 80042ac:	3501      	adds	r5, #1
 80042ae:	951b      	str	r5, [sp, #108]	; 0x6c
 80042b0:	930c      	str	r3, [sp, #48]	; 0x30
 80042b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8596 	bne.w	8004de6 <_strtod_l+0xbb6>
 80042ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042bc:	b1d3      	cbz	r3, 80042f4 <_strtod_l+0xc4>
 80042be:	4642      	mov	r2, r8
 80042c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	b021      	add	sp, #132	; 0x84
 80042ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ce:	2a20      	cmp	r2, #32
 80042d0:	d1cd      	bne.n	800426e <_strtod_l+0x3e>
 80042d2:	3301      	adds	r3, #1
 80042d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80042d6:	e7bf      	b.n	8004258 <_strtod_l+0x28>
 80042d8:	2a2d      	cmp	r2, #45	; 0x2d
 80042da:	d1c8      	bne.n	800426e <_strtod_l+0x3e>
 80042dc:	2201      	movs	r2, #1
 80042de:	920c      	str	r2, [sp, #48]	; 0x30
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1c3      	bne.n	8004272 <_strtod_l+0x42>
 80042ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8577 	bne.w	8004de2 <_strtod_l+0xbb2>
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	e7e4      	b.n	80042c4 <_strtod_l+0x94>
 80042fa:	2200      	movs	r2, #0
 80042fc:	e7ef      	b.n	80042de <_strtod_l+0xae>
 80042fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004300:	b13a      	cbz	r2, 8004312 <_strtod_l+0xe2>
 8004302:	2135      	movs	r1, #53	; 0x35
 8004304:	a81e      	add	r0, sp, #120	; 0x78
 8004306:	f002 ff49 	bl	800719c <__copybits>
 800430a:	4650      	mov	r0, sl
 800430c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800430e:	f002 fb11 	bl	8006934 <_Bfree>
 8004312:	3e01      	subs	r6, #1
 8004314:	2e05      	cmp	r6, #5
 8004316:	d807      	bhi.n	8004328 <_strtod_l+0xf8>
 8004318:	e8df f006 	tbb	[pc, r6]
 800431c:	1d180b0e 	.word	0x1d180b0e
 8004320:	030e      	.short	0x030e
 8004322:	f04f 0900 	mov.w	r9, #0
 8004326:	46c8      	mov	r8, r9
 8004328:	0721      	lsls	r1, r4, #28
 800432a:	d5c2      	bpl.n	80042b2 <_strtod_l+0x82>
 800432c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004330:	e7bf      	b.n	80042b2 <_strtod_l+0x82>
 8004332:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004336:	e7f7      	b.n	8004328 <_strtod_l+0xf8>
 8004338:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800433a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800433e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004346:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800434a:	e7ed      	b.n	8004328 <_strtod_l+0xf8>
 800434c:	f04f 0800 	mov.w	r8, #0
 8004350:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80044cc <_strtod_l+0x29c>
 8004354:	e7e8      	b.n	8004328 <_strtod_l+0xf8>
 8004356:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800435a:	f04f 38ff 	mov.w	r8, #4294967295
 800435e:	e7e3      	b.n	8004328 <_strtod_l+0xf8>
 8004360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	921b      	str	r2, [sp, #108]	; 0x6c
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d0f9      	beq.n	8004360 <_strtod_l+0x130>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0a0      	beq.n	80042b2 <_strtod_l+0x82>
 8004370:	2301      	movs	r3, #1
 8004372:	9307      	str	r3, [sp, #28]
 8004374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004376:	220a      	movs	r2, #10
 8004378:	9308      	str	r3, [sp, #32]
 800437a:	2300      	movs	r3, #0
 800437c:	469b      	mov	fp, r3
 800437e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004382:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004384:	7805      	ldrb	r5, [r0, #0]
 8004386:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800438a:	b2d9      	uxtb	r1, r3
 800438c:	2909      	cmp	r1, #9
 800438e:	d926      	bls.n	80043de <_strtod_l+0x1ae>
 8004390:	4622      	mov	r2, r4
 8004392:	4639      	mov	r1, r7
 8004394:	f003 f9af 	bl	80076f6 <strncmp>
 8004398:	2800      	cmp	r0, #0
 800439a:	d032      	beq.n	8004402 <_strtod_l+0x1d2>
 800439c:	2000      	movs	r0, #0
 800439e:	462b      	mov	r3, r5
 80043a0:	465c      	mov	r4, fp
 80043a2:	4602      	mov	r2, r0
 80043a4:	9004      	str	r0, [sp, #16]
 80043a6:	2b65      	cmp	r3, #101	; 0x65
 80043a8:	d001      	beq.n	80043ae <_strtod_l+0x17e>
 80043aa:	2b45      	cmp	r3, #69	; 0x45
 80043ac:	d113      	bne.n	80043d6 <_strtod_l+0x1a6>
 80043ae:	b91c      	cbnz	r4, 80043b8 <_strtod_l+0x188>
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	4303      	orrs	r3, r0
 80043b4:	d099      	beq.n	80042ea <_strtod_l+0xba>
 80043b6:	2400      	movs	r4, #0
 80043b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80043ba:	1c73      	adds	r3, r6, #1
 80043bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80043be:	7873      	ldrb	r3, [r6, #1]
 80043c0:	2b2b      	cmp	r3, #43	; 0x2b
 80043c2:	d078      	beq.n	80044b6 <_strtod_l+0x286>
 80043c4:	2b2d      	cmp	r3, #45	; 0x2d
 80043c6:	d07b      	beq.n	80044c0 <_strtod_l+0x290>
 80043c8:	2700      	movs	r7, #0
 80043ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80043ce:	2909      	cmp	r1, #9
 80043d0:	f240 8082 	bls.w	80044d8 <_strtod_l+0x2a8>
 80043d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80043d6:	2500      	movs	r5, #0
 80043d8:	e09e      	b.n	8004518 <_strtod_l+0x2e8>
 80043da:	2300      	movs	r3, #0
 80043dc:	e7c9      	b.n	8004372 <_strtod_l+0x142>
 80043de:	f1bb 0f08 	cmp.w	fp, #8
 80043e2:	bfd5      	itete	le
 80043e4:	9906      	ldrle	r1, [sp, #24]
 80043e6:	9905      	ldrgt	r1, [sp, #20]
 80043e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80043ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80043f0:	f100 0001 	add.w	r0, r0, #1
 80043f4:	bfd4      	ite	le
 80043f6:	9306      	strle	r3, [sp, #24]
 80043f8:	9305      	strgt	r3, [sp, #20]
 80043fa:	f10b 0b01 	add.w	fp, fp, #1
 80043fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8004400:	e7bf      	b.n	8004382 <_strtod_l+0x152>
 8004402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004404:	191a      	adds	r2, r3, r4
 8004406:	921b      	str	r2, [sp, #108]	; 0x6c
 8004408:	5d1b      	ldrb	r3, [r3, r4]
 800440a:	f1bb 0f00 	cmp.w	fp, #0
 800440e:	d036      	beq.n	800447e <_strtod_l+0x24e>
 8004410:	465c      	mov	r4, fp
 8004412:	9004      	str	r0, [sp, #16]
 8004414:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004418:	2a09      	cmp	r2, #9
 800441a:	d912      	bls.n	8004442 <_strtod_l+0x212>
 800441c:	2201      	movs	r2, #1
 800441e:	e7c2      	b.n	80043a6 <_strtod_l+0x176>
 8004420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004422:	3001      	adds	r0, #1
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	921b      	str	r2, [sp, #108]	; 0x6c
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b30      	cmp	r3, #48	; 0x30
 800442c:	d0f8      	beq.n	8004420 <_strtod_l+0x1f0>
 800442e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004432:	2a08      	cmp	r2, #8
 8004434:	f200 84dc 	bhi.w	8004df0 <_strtod_l+0xbc0>
 8004438:	9004      	str	r0, [sp, #16]
 800443a:	2000      	movs	r0, #0
 800443c:	4604      	mov	r4, r0
 800443e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004440:	9208      	str	r2, [sp, #32]
 8004442:	3b30      	subs	r3, #48	; 0x30
 8004444:	f100 0201 	add.w	r2, r0, #1
 8004448:	d013      	beq.n	8004472 <_strtod_l+0x242>
 800444a:	9904      	ldr	r1, [sp, #16]
 800444c:	1905      	adds	r5, r0, r4
 800444e:	4411      	add	r1, r2
 8004450:	9104      	str	r1, [sp, #16]
 8004452:	4622      	mov	r2, r4
 8004454:	210a      	movs	r1, #10
 8004456:	42aa      	cmp	r2, r5
 8004458:	d113      	bne.n	8004482 <_strtod_l+0x252>
 800445a:	1822      	adds	r2, r4, r0
 800445c:	2a08      	cmp	r2, #8
 800445e:	f104 0401 	add.w	r4, r4, #1
 8004462:	4404      	add	r4, r0
 8004464:	dc1b      	bgt.n	800449e <_strtod_l+0x26e>
 8004466:	220a      	movs	r2, #10
 8004468:	9906      	ldr	r1, [sp, #24]
 800446a:	fb02 3301 	mla	r3, r2, r1, r3
 800446e:	9306      	str	r3, [sp, #24]
 8004470:	2200      	movs	r2, #0
 8004472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004474:	4610      	mov	r0, r2
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	911b      	str	r1, [sp, #108]	; 0x6c
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	e7ca      	b.n	8004414 <_strtod_l+0x1e4>
 800447e:	4658      	mov	r0, fp
 8004480:	e7d3      	b.n	800442a <_strtod_l+0x1fa>
 8004482:	2a08      	cmp	r2, #8
 8004484:	dc04      	bgt.n	8004490 <_strtod_l+0x260>
 8004486:	9f06      	ldr	r7, [sp, #24]
 8004488:	434f      	muls	r7, r1
 800448a:	9706      	str	r7, [sp, #24]
 800448c:	3201      	adds	r2, #1
 800448e:	e7e2      	b.n	8004456 <_strtod_l+0x226>
 8004490:	1c57      	adds	r7, r2, #1
 8004492:	2f10      	cmp	r7, #16
 8004494:	bfde      	ittt	le
 8004496:	9f05      	ldrle	r7, [sp, #20]
 8004498:	434f      	mulle	r7, r1
 800449a:	9705      	strle	r7, [sp, #20]
 800449c:	e7f6      	b.n	800448c <_strtod_l+0x25c>
 800449e:	2c10      	cmp	r4, #16
 80044a0:	bfdf      	itttt	le
 80044a2:	220a      	movle	r2, #10
 80044a4:	9905      	ldrle	r1, [sp, #20]
 80044a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80044aa:	9305      	strle	r3, [sp, #20]
 80044ac:	e7e0      	b.n	8004470 <_strtod_l+0x240>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2201      	movs	r2, #1
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	e77c      	b.n	80043b0 <_strtod_l+0x180>
 80044b6:	2700      	movs	r7, #0
 80044b8:	1cb3      	adds	r3, r6, #2
 80044ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80044bc:	78b3      	ldrb	r3, [r6, #2]
 80044be:	e784      	b.n	80043ca <_strtod_l+0x19a>
 80044c0:	2701      	movs	r7, #1
 80044c2:	e7f9      	b.n	80044b8 <_strtod_l+0x288>
 80044c4:	08007b70 	.word	0x08007b70
 80044c8:	080079bc 	.word	0x080079bc
 80044cc:	7ff00000 	.word	0x7ff00000
 80044d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	911b      	str	r1, [sp, #108]	; 0x6c
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b30      	cmp	r3, #48	; 0x30
 80044da:	d0f9      	beq.n	80044d0 <_strtod_l+0x2a0>
 80044dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80044e0:	2908      	cmp	r1, #8
 80044e2:	f63f af78 	bhi.w	80043d6 <_strtod_l+0x1a6>
 80044e6:	f04f 0e0a 	mov.w	lr, #10
 80044ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80044ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044f0:	9309      	str	r3, [sp, #36]	; 0x24
 80044f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044f4:	1c59      	adds	r1, r3, #1
 80044f6:	911b      	str	r1, [sp, #108]	; 0x6c
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80044fe:	2d09      	cmp	r5, #9
 8004500:	d935      	bls.n	800456e <_strtod_l+0x33e>
 8004502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004504:	1b49      	subs	r1, r1, r5
 8004506:	2908      	cmp	r1, #8
 8004508:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800450c:	dc02      	bgt.n	8004514 <_strtod_l+0x2e4>
 800450e:	4565      	cmp	r5, ip
 8004510:	bfa8      	it	ge
 8004512:	4665      	movge	r5, ip
 8004514:	b107      	cbz	r7, 8004518 <_strtod_l+0x2e8>
 8004516:	426d      	negs	r5, r5
 8004518:	2c00      	cmp	r4, #0
 800451a:	d14c      	bne.n	80045b6 <_strtod_l+0x386>
 800451c:	9907      	ldr	r1, [sp, #28]
 800451e:	4301      	orrs	r1, r0
 8004520:	f47f aec7 	bne.w	80042b2 <_strtod_l+0x82>
 8004524:	2a00      	cmp	r2, #0
 8004526:	f47f aee0 	bne.w	80042ea <_strtod_l+0xba>
 800452a:	2b69      	cmp	r3, #105	; 0x69
 800452c:	d026      	beq.n	800457c <_strtod_l+0x34c>
 800452e:	dc23      	bgt.n	8004578 <_strtod_l+0x348>
 8004530:	2b49      	cmp	r3, #73	; 0x49
 8004532:	d023      	beq.n	800457c <_strtod_l+0x34c>
 8004534:	2b4e      	cmp	r3, #78	; 0x4e
 8004536:	f47f aed8 	bne.w	80042ea <_strtod_l+0xba>
 800453a:	499c      	ldr	r1, [pc, #624]	; (80047ac <_strtod_l+0x57c>)
 800453c:	a81b      	add	r0, sp, #108	; 0x6c
 800453e:	f002 f867 	bl	8006610 <__match>
 8004542:	2800      	cmp	r0, #0
 8004544:	f43f aed1 	beq.w	80042ea <_strtod_l+0xba>
 8004548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b28      	cmp	r3, #40	; 0x28
 800454e:	d12c      	bne.n	80045aa <_strtod_l+0x37a>
 8004550:	4997      	ldr	r1, [pc, #604]	; (80047b0 <_strtod_l+0x580>)
 8004552:	aa1e      	add	r2, sp, #120	; 0x78
 8004554:	a81b      	add	r0, sp, #108	; 0x6c
 8004556:	f002 f86f 	bl	8006638 <__hexnan>
 800455a:	2805      	cmp	r0, #5
 800455c:	d125      	bne.n	80045aa <_strtod_l+0x37a>
 800455e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004560:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004564:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004568:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800456c:	e6a1      	b.n	80042b2 <_strtod_l+0x82>
 800456e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004572:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004576:	e7bc      	b.n	80044f2 <_strtod_l+0x2c2>
 8004578:	2b6e      	cmp	r3, #110	; 0x6e
 800457a:	e7dc      	b.n	8004536 <_strtod_l+0x306>
 800457c:	498d      	ldr	r1, [pc, #564]	; (80047b4 <_strtod_l+0x584>)
 800457e:	a81b      	add	r0, sp, #108	; 0x6c
 8004580:	f002 f846 	bl	8006610 <__match>
 8004584:	2800      	cmp	r0, #0
 8004586:	f43f aeb0 	beq.w	80042ea <_strtod_l+0xba>
 800458a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800458c:	498a      	ldr	r1, [pc, #552]	; (80047b8 <_strtod_l+0x588>)
 800458e:	3b01      	subs	r3, #1
 8004590:	a81b      	add	r0, sp, #108	; 0x6c
 8004592:	931b      	str	r3, [sp, #108]	; 0x6c
 8004594:	f002 f83c 	bl	8006610 <__match>
 8004598:	b910      	cbnz	r0, 80045a0 <_strtod_l+0x370>
 800459a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800459c:	3301      	adds	r3, #1
 800459e:	931b      	str	r3, [sp, #108]	; 0x6c
 80045a0:	f04f 0800 	mov.w	r8, #0
 80045a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80047c8 <_strtod_l+0x598>
 80045a8:	e683      	b.n	80042b2 <_strtod_l+0x82>
 80045aa:	4884      	ldr	r0, [pc, #528]	; (80047bc <_strtod_l+0x58c>)
 80045ac:	f003 f846 	bl	800763c <nan>
 80045b0:	4680      	mov	r8, r0
 80045b2:	4689      	mov	r9, r1
 80045b4:	e67d      	b.n	80042b2 <_strtod_l+0x82>
 80045b6:	9b04      	ldr	r3, [sp, #16]
 80045b8:	f1bb 0f00 	cmp.w	fp, #0
 80045bc:	bf08      	it	eq
 80045be:	46a3      	moveq	fp, r4
 80045c0:	1aeb      	subs	r3, r5, r3
 80045c2:	2c10      	cmp	r4, #16
 80045c4:	9806      	ldr	r0, [sp, #24]
 80045c6:	4626      	mov	r6, r4
 80045c8:	9307      	str	r3, [sp, #28]
 80045ca:	bfa8      	it	ge
 80045cc:	2610      	movge	r6, #16
 80045ce:	f7fb ff09 	bl	80003e4 <__aeabi_ui2d>
 80045d2:	2c09      	cmp	r4, #9
 80045d4:	4680      	mov	r8, r0
 80045d6:	4689      	mov	r9, r1
 80045d8:	dd13      	ble.n	8004602 <_strtod_l+0x3d2>
 80045da:	4b79      	ldr	r3, [pc, #484]	; (80047c0 <_strtod_l+0x590>)
 80045dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80045e4:	f7fb ff78 	bl	80004d8 <__aeabi_dmul>
 80045e8:	4680      	mov	r8, r0
 80045ea:	9805      	ldr	r0, [sp, #20]
 80045ec:	4689      	mov	r9, r1
 80045ee:	f7fb fef9 	bl	80003e4 <__aeabi_ui2d>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4640      	mov	r0, r8
 80045f8:	4649      	mov	r1, r9
 80045fa:	f7fb fdb7 	bl	800016c <__adddf3>
 80045fe:	4680      	mov	r8, r0
 8004600:	4689      	mov	r9, r1
 8004602:	2c0f      	cmp	r4, #15
 8004604:	dc36      	bgt.n	8004674 <_strtod_l+0x444>
 8004606:	9b07      	ldr	r3, [sp, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f43f ae52 	beq.w	80042b2 <_strtod_l+0x82>
 800460e:	dd22      	ble.n	8004656 <_strtod_l+0x426>
 8004610:	2b16      	cmp	r3, #22
 8004612:	dc09      	bgt.n	8004628 <_strtod_l+0x3f8>
 8004614:	4c6a      	ldr	r4, [pc, #424]	; (80047c0 <_strtod_l+0x590>)
 8004616:	4642      	mov	r2, r8
 8004618:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800461c:	464b      	mov	r3, r9
 800461e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004622:	f7fb ff59 	bl	80004d8 <__aeabi_dmul>
 8004626:	e7c3      	b.n	80045b0 <_strtod_l+0x380>
 8004628:	9a07      	ldr	r2, [sp, #28]
 800462a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800462e:	4293      	cmp	r3, r2
 8004630:	db20      	blt.n	8004674 <_strtod_l+0x444>
 8004632:	4d63      	ldr	r5, [pc, #396]	; (80047c0 <_strtod_l+0x590>)
 8004634:	f1c4 040f 	rsb	r4, r4, #15
 8004638:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800463c:	4642      	mov	r2, r8
 800463e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004642:	464b      	mov	r3, r9
 8004644:	f7fb ff48 	bl	80004d8 <__aeabi_dmul>
 8004648:	9b07      	ldr	r3, [sp, #28]
 800464a:	1b1c      	subs	r4, r3, r4
 800464c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004654:	e7e5      	b.n	8004622 <_strtod_l+0x3f2>
 8004656:	9b07      	ldr	r3, [sp, #28]
 8004658:	3316      	adds	r3, #22
 800465a:	db0b      	blt.n	8004674 <_strtod_l+0x444>
 800465c:	9b04      	ldr	r3, [sp, #16]
 800465e:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <_strtod_l+0x590>)
 8004660:	1b5d      	subs	r5, r3, r5
 8004662:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004666:	4640      	mov	r0, r8
 8004668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800466c:	4649      	mov	r1, r9
 800466e:	f7fc f85d 	bl	800072c <__aeabi_ddiv>
 8004672:	e79d      	b.n	80045b0 <_strtod_l+0x380>
 8004674:	9b07      	ldr	r3, [sp, #28]
 8004676:	1ba6      	subs	r6, r4, r6
 8004678:	441e      	add	r6, r3
 800467a:	2e00      	cmp	r6, #0
 800467c:	dd71      	ble.n	8004762 <_strtod_l+0x532>
 800467e:	f016 030f 	ands.w	r3, r6, #15
 8004682:	d00a      	beq.n	800469a <_strtod_l+0x46a>
 8004684:	494e      	ldr	r1, [pc, #312]	; (80047c0 <_strtod_l+0x590>)
 8004686:	4642      	mov	r2, r8
 8004688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800468c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004690:	464b      	mov	r3, r9
 8004692:	f7fb ff21 	bl	80004d8 <__aeabi_dmul>
 8004696:	4680      	mov	r8, r0
 8004698:	4689      	mov	r9, r1
 800469a:	f036 060f 	bics.w	r6, r6, #15
 800469e:	d050      	beq.n	8004742 <_strtod_l+0x512>
 80046a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80046a4:	dd27      	ble.n	80046f6 <_strtod_l+0x4c6>
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	f8cd b010 	str.w	fp, [sp, #16]
 80046ae:	f8cd b020 	str.w	fp, [sp, #32]
 80046b2:	f8cd b018 	str.w	fp, [sp, #24]
 80046b6:	2322      	movs	r3, #34	; 0x22
 80046b8:	f04f 0800 	mov.w	r8, #0
 80046bc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80047c8 <_strtod_l+0x598>
 80046c0:	f8ca 3000 	str.w	r3, [sl]
 80046c4:	9b08      	ldr	r3, [sp, #32]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f43f adf3 	beq.w	80042b2 <_strtod_l+0x82>
 80046cc:	4650      	mov	r0, sl
 80046ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046d0:	f002 f930 	bl	8006934 <_Bfree>
 80046d4:	4650      	mov	r0, sl
 80046d6:	9906      	ldr	r1, [sp, #24]
 80046d8:	f002 f92c 	bl	8006934 <_Bfree>
 80046dc:	4650      	mov	r0, sl
 80046de:	9904      	ldr	r1, [sp, #16]
 80046e0:	f002 f928 	bl	8006934 <_Bfree>
 80046e4:	4650      	mov	r0, sl
 80046e6:	9908      	ldr	r1, [sp, #32]
 80046e8:	f002 f924 	bl	8006934 <_Bfree>
 80046ec:	4659      	mov	r1, fp
 80046ee:	4650      	mov	r0, sl
 80046f0:	f002 f920 	bl	8006934 <_Bfree>
 80046f4:	e5dd      	b.n	80042b2 <_strtod_l+0x82>
 80046f6:	2300      	movs	r3, #0
 80046f8:	4640      	mov	r0, r8
 80046fa:	4649      	mov	r1, r9
 80046fc:	461f      	mov	r7, r3
 80046fe:	1136      	asrs	r6, r6, #4
 8004700:	2e01      	cmp	r6, #1
 8004702:	dc21      	bgt.n	8004748 <_strtod_l+0x518>
 8004704:	b10b      	cbz	r3, 800470a <_strtod_l+0x4da>
 8004706:	4680      	mov	r8, r0
 8004708:	4689      	mov	r9, r1
 800470a:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <_strtod_l+0x594>)
 800470c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004710:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004714:	4642      	mov	r2, r8
 8004716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800471a:	464b      	mov	r3, r9
 800471c:	f7fb fedc 	bl	80004d8 <__aeabi_dmul>
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <_strtod_l+0x598>)
 8004722:	460a      	mov	r2, r1
 8004724:	400b      	ands	r3, r1
 8004726:	4929      	ldr	r1, [pc, #164]	; (80047cc <_strtod_l+0x59c>)
 8004728:	4680      	mov	r8, r0
 800472a:	428b      	cmp	r3, r1
 800472c:	d8bb      	bhi.n	80046a6 <_strtod_l+0x476>
 800472e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004732:	428b      	cmp	r3, r1
 8004734:	bf86      	itte	hi
 8004736:	f04f 38ff 	movhi.w	r8, #4294967295
 800473a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80047d0 <_strtod_l+0x5a0>
 800473e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004742:	2300      	movs	r3, #0
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	e07e      	b.n	8004846 <_strtod_l+0x616>
 8004748:	07f2      	lsls	r2, r6, #31
 800474a:	d507      	bpl.n	800475c <_strtod_l+0x52c>
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <_strtod_l+0x594>)
 800474e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb febf 	bl	80004d8 <__aeabi_dmul>
 800475a:	2301      	movs	r3, #1
 800475c:	3701      	adds	r7, #1
 800475e:	1076      	asrs	r6, r6, #1
 8004760:	e7ce      	b.n	8004700 <_strtod_l+0x4d0>
 8004762:	d0ee      	beq.n	8004742 <_strtod_l+0x512>
 8004764:	4276      	negs	r6, r6
 8004766:	f016 020f 	ands.w	r2, r6, #15
 800476a:	d00a      	beq.n	8004782 <_strtod_l+0x552>
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <_strtod_l+0x590>)
 800476e:	4640      	mov	r0, r8
 8004770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004774:	4649      	mov	r1, r9
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f7fb ffd7 	bl	800072c <__aeabi_ddiv>
 800477e:	4680      	mov	r8, r0
 8004780:	4689      	mov	r9, r1
 8004782:	1136      	asrs	r6, r6, #4
 8004784:	d0dd      	beq.n	8004742 <_strtod_l+0x512>
 8004786:	2e1f      	cmp	r6, #31
 8004788:	dd24      	ble.n	80047d4 <_strtod_l+0x5a4>
 800478a:	f04f 0b00 	mov.w	fp, #0
 800478e:	f8cd b010 	str.w	fp, [sp, #16]
 8004792:	f8cd b020 	str.w	fp, [sp, #32]
 8004796:	f8cd b018 	str.w	fp, [sp, #24]
 800479a:	2322      	movs	r3, #34	; 0x22
 800479c:	f04f 0800 	mov.w	r8, #0
 80047a0:	f04f 0900 	mov.w	r9, #0
 80047a4:	f8ca 3000 	str.w	r3, [sl]
 80047a8:	e78c      	b.n	80046c4 <_strtod_l+0x494>
 80047aa:	bf00      	nop
 80047ac:	08007995 	.word	0x08007995
 80047b0:	080079d0 	.word	0x080079d0
 80047b4:	0800798d 	.word	0x0800798d
 80047b8:	08007a13 	.word	0x08007a13
 80047bc:	08007d30 	.word	0x08007d30
 80047c0:	08007c10 	.word	0x08007c10
 80047c4:	08007be8 	.word	0x08007be8
 80047c8:	7ff00000 	.word	0x7ff00000
 80047cc:	7ca00000 	.word	0x7ca00000
 80047d0:	7fefffff 	.word	0x7fefffff
 80047d4:	f016 0310 	ands.w	r3, r6, #16
 80047d8:	bf18      	it	ne
 80047da:	236a      	movne	r3, #106	; 0x6a
 80047dc:	4640      	mov	r0, r8
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	4649      	mov	r1, r9
 80047e2:	2300      	movs	r3, #0
 80047e4:	4fb2      	ldr	r7, [pc, #712]	; (8004ab0 <_strtod_l+0x880>)
 80047e6:	07f2      	lsls	r2, r6, #31
 80047e8:	d504      	bpl.n	80047f4 <_strtod_l+0x5c4>
 80047ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ee:	f7fb fe73 	bl	80004d8 <__aeabi_dmul>
 80047f2:	2301      	movs	r3, #1
 80047f4:	1076      	asrs	r6, r6, #1
 80047f6:	f107 0708 	add.w	r7, r7, #8
 80047fa:	d1f4      	bne.n	80047e6 <_strtod_l+0x5b6>
 80047fc:	b10b      	cbz	r3, 8004802 <_strtod_l+0x5d2>
 80047fe:	4680      	mov	r8, r0
 8004800:	4689      	mov	r9, r1
 8004802:	9b05      	ldr	r3, [sp, #20]
 8004804:	b1bb      	cbz	r3, 8004836 <_strtod_l+0x606>
 8004806:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800480a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800480e:	2b00      	cmp	r3, #0
 8004810:	4649      	mov	r1, r9
 8004812:	dd10      	ble.n	8004836 <_strtod_l+0x606>
 8004814:	2b1f      	cmp	r3, #31
 8004816:	f340 812b 	ble.w	8004a70 <_strtod_l+0x840>
 800481a:	2b34      	cmp	r3, #52	; 0x34
 800481c:	bfd8      	it	le
 800481e:	f04f 32ff 	movle.w	r2, #4294967295
 8004822:	f04f 0800 	mov.w	r8, #0
 8004826:	bfcf      	iteee	gt
 8004828:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800482c:	3b20      	suble	r3, #32
 800482e:	fa02 f303 	lslle.w	r3, r2, r3
 8004832:	ea03 0901 	andle.w	r9, r3, r1
 8004836:	2200      	movs	r2, #0
 8004838:	2300      	movs	r3, #0
 800483a:	4640      	mov	r0, r8
 800483c:	4649      	mov	r1, r9
 800483e:	f7fc f8b3 	bl	80009a8 <__aeabi_dcmpeq>
 8004842:	2800      	cmp	r0, #0
 8004844:	d1a1      	bne.n	800478a <_strtod_l+0x55a>
 8004846:	9b06      	ldr	r3, [sp, #24]
 8004848:	465a      	mov	r2, fp
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4650      	mov	r0, sl
 800484e:	4623      	mov	r3, r4
 8004850:	9908      	ldr	r1, [sp, #32]
 8004852:	f002 f8db 	bl	8006a0c <__s2b>
 8004856:	9008      	str	r0, [sp, #32]
 8004858:	2800      	cmp	r0, #0
 800485a:	f43f af24 	beq.w	80046a6 <_strtod_l+0x476>
 800485e:	9b04      	ldr	r3, [sp, #16]
 8004860:	f04f 0b00 	mov.w	fp, #0
 8004864:	1b5d      	subs	r5, r3, r5
 8004866:	9b07      	ldr	r3, [sp, #28]
 8004868:	f8cd b010 	str.w	fp, [sp, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	bfb4      	ite	lt
 8004870:	462b      	movlt	r3, r5
 8004872:	2300      	movge	r3, #0
 8004874:	930e      	str	r3, [sp, #56]	; 0x38
 8004876:	9b07      	ldr	r3, [sp, #28]
 8004878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800487c:	9316      	str	r3, [sp, #88]	; 0x58
 800487e:	9b08      	ldr	r3, [sp, #32]
 8004880:	4650      	mov	r0, sl
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	f002 f816 	bl	80068b4 <_Balloc>
 8004888:	9006      	str	r0, [sp, #24]
 800488a:	2800      	cmp	r0, #0
 800488c:	f43f af13 	beq.w	80046b6 <_strtod_l+0x486>
 8004890:	9b08      	ldr	r3, [sp, #32]
 8004892:	300c      	adds	r0, #12
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	f103 010c 	add.w	r1, r3, #12
 800489a:	3202      	adds	r2, #2
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	f001 fffb 	bl	8006898 <memcpy>
 80048a2:	ab1e      	add	r3, sp, #120	; 0x78
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	ab1d      	add	r3, sp, #116	; 0x74
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4642      	mov	r2, r8
 80048ac:	464b      	mov	r3, r9
 80048ae:	4650      	mov	r0, sl
 80048b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80048b4:	f002 fbe8 	bl	8007088 <__d2b>
 80048b8:	901c      	str	r0, [sp, #112]	; 0x70
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f43f aefb 	beq.w	80046b6 <_strtod_l+0x486>
 80048c0:	2101      	movs	r1, #1
 80048c2:	4650      	mov	r0, sl
 80048c4:	f002 f93a 	bl	8006b3c <__i2b>
 80048c8:	4603      	mov	r3, r0
 80048ca:	9004      	str	r0, [sp, #16]
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f43f aef2 	beq.w	80046b6 <_strtod_l+0x486>
 80048d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80048d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	bfab      	itete	ge
 80048da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80048dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80048de:	18ee      	addge	r6, r5, r3
 80048e0:	1b5c      	sublt	r4, r3, r5
 80048e2:	9b05      	ldr	r3, [sp, #20]
 80048e4:	bfa8      	it	ge
 80048e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80048e8:	eba5 0503 	sub.w	r5, r5, r3
 80048ec:	4415      	add	r5, r2
 80048ee:	4b71      	ldr	r3, [pc, #452]	; (8004ab4 <_strtod_l+0x884>)
 80048f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80048f4:	bfb8      	it	lt
 80048f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80048f8:	429d      	cmp	r5, r3
 80048fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048fe:	f280 80c9 	bge.w	8004a94 <_strtod_l+0x864>
 8004902:	1b5b      	subs	r3, r3, r5
 8004904:	2b1f      	cmp	r3, #31
 8004906:	f04f 0701 	mov.w	r7, #1
 800490a:	eba2 0203 	sub.w	r2, r2, r3
 800490e:	f300 80b6 	bgt.w	8004a7e <_strtod_l+0x84e>
 8004912:	2500      	movs	r5, #0
 8004914:	fa07 f303 	lsl.w	r3, r7, r3
 8004918:	930f      	str	r3, [sp, #60]	; 0x3c
 800491a:	18b7      	adds	r7, r6, r2
 800491c:	9b05      	ldr	r3, [sp, #20]
 800491e:	42be      	cmp	r6, r7
 8004920:	4414      	add	r4, r2
 8004922:	441c      	add	r4, r3
 8004924:	4633      	mov	r3, r6
 8004926:	bfa8      	it	ge
 8004928:	463b      	movge	r3, r7
 800492a:	42a3      	cmp	r3, r4
 800492c:	bfa8      	it	ge
 800492e:	4623      	movge	r3, r4
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfc2      	ittt	gt
 8004934:	1aff      	subgt	r7, r7, r3
 8004936:	1ae4      	subgt	r4, r4, r3
 8004938:	1af6      	subgt	r6, r6, r3
 800493a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	dd17      	ble.n	8004970 <_strtod_l+0x740>
 8004940:	461a      	mov	r2, r3
 8004942:	4650      	mov	r0, sl
 8004944:	9904      	ldr	r1, [sp, #16]
 8004946:	f002 f9b3 	bl	8006cb0 <__pow5mult>
 800494a:	9004      	str	r0, [sp, #16]
 800494c:	2800      	cmp	r0, #0
 800494e:	f43f aeb2 	beq.w	80046b6 <_strtod_l+0x486>
 8004952:	4601      	mov	r1, r0
 8004954:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004956:	4650      	mov	r0, sl
 8004958:	f002 f906 	bl	8006b68 <__multiply>
 800495c:	9009      	str	r0, [sp, #36]	; 0x24
 800495e:	2800      	cmp	r0, #0
 8004960:	f43f aea9 	beq.w	80046b6 <_strtod_l+0x486>
 8004964:	4650      	mov	r0, sl
 8004966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004968:	f001 ffe4 	bl	8006934 <_Bfree>
 800496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496e:	931c      	str	r3, [sp, #112]	; 0x70
 8004970:	2f00      	cmp	r7, #0
 8004972:	f300 8093 	bgt.w	8004a9c <_strtod_l+0x86c>
 8004976:	9b07      	ldr	r3, [sp, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	dd08      	ble.n	800498e <_strtod_l+0x75e>
 800497c:	4650      	mov	r0, sl
 800497e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004980:	9906      	ldr	r1, [sp, #24]
 8004982:	f002 f995 	bl	8006cb0 <__pow5mult>
 8004986:	9006      	str	r0, [sp, #24]
 8004988:	2800      	cmp	r0, #0
 800498a:	f43f ae94 	beq.w	80046b6 <_strtod_l+0x486>
 800498e:	2c00      	cmp	r4, #0
 8004990:	dd08      	ble.n	80049a4 <_strtod_l+0x774>
 8004992:	4622      	mov	r2, r4
 8004994:	4650      	mov	r0, sl
 8004996:	9906      	ldr	r1, [sp, #24]
 8004998:	f002 f9e4 	bl	8006d64 <__lshift>
 800499c:	9006      	str	r0, [sp, #24]
 800499e:	2800      	cmp	r0, #0
 80049a0:	f43f ae89 	beq.w	80046b6 <_strtod_l+0x486>
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	dd08      	ble.n	80049ba <_strtod_l+0x78a>
 80049a8:	4632      	mov	r2, r6
 80049aa:	4650      	mov	r0, sl
 80049ac:	9904      	ldr	r1, [sp, #16]
 80049ae:	f002 f9d9 	bl	8006d64 <__lshift>
 80049b2:	9004      	str	r0, [sp, #16]
 80049b4:	2800      	cmp	r0, #0
 80049b6:	f43f ae7e 	beq.w	80046b6 <_strtod_l+0x486>
 80049ba:	4650      	mov	r0, sl
 80049bc:	9a06      	ldr	r2, [sp, #24]
 80049be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049c0:	f002 fa58 	bl	8006e74 <__mdiff>
 80049c4:	4683      	mov	fp, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f43f ae75 	beq.w	80046b6 <_strtod_l+0x486>
 80049cc:	2400      	movs	r4, #0
 80049ce:	68c3      	ldr	r3, [r0, #12]
 80049d0:	9904      	ldr	r1, [sp, #16]
 80049d2:	60c4      	str	r4, [r0, #12]
 80049d4:	930d      	str	r3, [sp, #52]	; 0x34
 80049d6:	f002 fa31 	bl	8006e3c <__mcmp>
 80049da:	42a0      	cmp	r0, r4
 80049dc:	da70      	bge.n	8004ac0 <_strtod_l+0x890>
 80049de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e0:	ea53 0308 	orrs.w	r3, r3, r8
 80049e4:	f040 8096 	bne.w	8004b14 <_strtod_l+0x8e4>
 80049e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8091 	bne.w	8004b14 <_strtod_l+0x8e4>
 80049f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049f6:	0d1b      	lsrs	r3, r3, #20
 80049f8:	051b      	lsls	r3, r3, #20
 80049fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049fe:	f240 8089 	bls.w	8004b14 <_strtod_l+0x8e4>
 8004a02:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004a06:	b923      	cbnz	r3, 8004a12 <_strtod_l+0x7e2>
 8004a08:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f340 8081 	ble.w	8004b14 <_strtod_l+0x8e4>
 8004a12:	4659      	mov	r1, fp
 8004a14:	2201      	movs	r2, #1
 8004a16:	4650      	mov	r0, sl
 8004a18:	f002 f9a4 	bl	8006d64 <__lshift>
 8004a1c:	9904      	ldr	r1, [sp, #16]
 8004a1e:	4683      	mov	fp, r0
 8004a20:	f002 fa0c 	bl	8006e3c <__mcmp>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	dd75      	ble.n	8004b14 <_strtod_l+0x8e4>
 8004a28:	9905      	ldr	r1, [sp, #20]
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <_strtod_l+0x888>)
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	f000 8091 	beq.w	8004b56 <_strtod_l+0x926>
 8004a34:	ea02 0109 	and.w	r1, r2, r9
 8004a38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a3c:	f300 808b 	bgt.w	8004b56 <_strtod_l+0x926>
 8004a40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a44:	f77f aea9 	ble.w	800479a <_strtod_l+0x56a>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <_strtod_l+0x88c>)
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004a52:	4649      	mov	r1, r9
 8004a54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004a58:	f7fb fd3e 	bl	80004d8 <__aeabi_dmul>
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4303      	orrs	r3, r0
 8004a60:	bf08      	it	eq
 8004a62:	2322      	moveq	r3, #34	; 0x22
 8004a64:	4680      	mov	r8, r0
 8004a66:	4689      	mov	r9, r1
 8004a68:	bf08      	it	eq
 8004a6a:	f8ca 3000 	streq.w	r3, [sl]
 8004a6e:	e62d      	b.n	80046cc <_strtod_l+0x49c>
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	ea03 0808 	and.w	r8, r3, r8
 8004a7c:	e6db      	b.n	8004836 <_strtod_l+0x606>
 8004a7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004a82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004a86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004a8a:	35e2      	adds	r5, #226	; 0xe2
 8004a8c:	fa07 f505 	lsl.w	r5, r7, r5
 8004a90:	970f      	str	r7, [sp, #60]	; 0x3c
 8004a92:	e742      	b.n	800491a <_strtod_l+0x6ea>
 8004a94:	2301      	movs	r3, #1
 8004a96:	2500      	movs	r5, #0
 8004a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a9a:	e73e      	b.n	800491a <_strtod_l+0x6ea>
 8004a9c:	463a      	mov	r2, r7
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004aa2:	f002 f95f 	bl	8006d64 <__lshift>
 8004aa6:	901c      	str	r0, [sp, #112]	; 0x70
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f47f af64 	bne.w	8004976 <_strtod_l+0x746>
 8004aae:	e602      	b.n	80046b6 <_strtod_l+0x486>
 8004ab0:	080079e8 	.word	0x080079e8
 8004ab4:	fffffc02 	.word	0xfffffc02
 8004ab8:	7ff00000 	.word	0x7ff00000
 8004abc:	39500000 	.word	0x39500000
 8004ac0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ac4:	d166      	bne.n	8004b94 <_strtod_l+0x964>
 8004ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004acc:	b35a      	cbz	r2, 8004b26 <_strtod_l+0x8f6>
 8004ace:	4a9c      	ldr	r2, [pc, #624]	; (8004d40 <_strtod_l+0xb10>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d12c      	bne.n	8004b2e <_strtod_l+0x8fe>
 8004ad4:	9b05      	ldr	r3, [sp, #20]
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	b303      	cbz	r3, 8004b1c <_strtod_l+0x8ec>
 8004ada:	464b      	mov	r3, r9
 8004adc:	4a99      	ldr	r2, [pc, #612]	; (8004d44 <_strtod_l+0xb14>)
 8004ade:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004ae8:	d81b      	bhi.n	8004b22 <_strtod_l+0x8f2>
 8004aea:	0d12      	lsrs	r2, r2, #20
 8004aec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004af0:	fa01 f303 	lsl.w	r3, r1, r3
 8004af4:	4298      	cmp	r0, r3
 8004af6:	d11a      	bne.n	8004b2e <_strtod_l+0x8fe>
 8004af8:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <_strtod_l+0xb18>)
 8004afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d102      	bne.n	8004b06 <_strtod_l+0x8d6>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f add8 	beq.w	80046b6 <_strtod_l+0x486>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	4b8e      	ldr	r3, [pc, #568]	; (8004d44 <_strtod_l+0xb14>)
 8004b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b0e:	401a      	ands	r2, r3
 8004b10:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004b14:	9b05      	ldr	r3, [sp, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d196      	bne.n	8004a48 <_strtod_l+0x818>
 8004b1a:	e5d7      	b.n	80046cc <_strtod_l+0x49c>
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b20:	e7e8      	b.n	8004af4 <_strtod_l+0x8c4>
 8004b22:	460b      	mov	r3, r1
 8004b24:	e7e6      	b.n	8004af4 <_strtod_l+0x8c4>
 8004b26:	ea53 0308 	orrs.w	r3, r3, r8
 8004b2a:	f43f af7d 	beq.w	8004a28 <_strtod_l+0x7f8>
 8004b2e:	b1e5      	cbz	r5, 8004b6a <_strtod_l+0x93a>
 8004b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b32:	421d      	tst	r5, r3
 8004b34:	d0ee      	beq.n	8004b14 <_strtod_l+0x8e4>
 8004b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	b1c3      	cbz	r3, 8004b72 <_strtod_l+0x942>
 8004b40:	f7ff fb54 	bl	80041ec <sulp>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b4c:	f7fb fb0e 	bl	800016c <__adddf3>
 8004b50:	4680      	mov	r8, r0
 8004b52:	4689      	mov	r9, r1
 8004b54:	e7de      	b.n	8004b14 <_strtod_l+0x8e4>
 8004b56:	4013      	ands	r3, r2
 8004b58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004b60:	f04f 38ff 	mov.w	r8, #4294967295
 8004b64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004b68:	e7d4      	b.n	8004b14 <_strtod_l+0x8e4>
 8004b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b6c:	ea13 0f08 	tst.w	r3, r8
 8004b70:	e7e0      	b.n	8004b34 <_strtod_l+0x904>
 8004b72:	f7ff fb3b 	bl	80041ec <sulp>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b7e:	f7fb faf3 	bl	8000168 <__aeabi_dsub>
 8004b82:	2200      	movs	r2, #0
 8004b84:	2300      	movs	r3, #0
 8004b86:	4680      	mov	r8, r0
 8004b88:	4689      	mov	r9, r1
 8004b8a:	f7fb ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d0c0      	beq.n	8004b14 <_strtod_l+0x8e4>
 8004b92:	e602      	b.n	800479a <_strtod_l+0x56a>
 8004b94:	4658      	mov	r0, fp
 8004b96:	9904      	ldr	r1, [sp, #16]
 8004b98:	f002 fad2 	bl	8007140 <__ratio>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	f7fb ff13 	bl	80009d0 <__aeabi_dcmple>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d075      	beq.n	8004c9a <_strtod_l+0xa6a>
 8004bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d047      	beq.n	8004c44 <_strtod_l+0xa14>
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	4f65      	ldr	r7, [pc, #404]	; (8004d4c <_strtod_l+0xb1c>)
 8004bb8:	4d64      	ldr	r5, [pc, #400]	; (8004d4c <_strtod_l+0xb1c>)
 8004bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	051b      	lsls	r3, r3, #20
 8004bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bc8:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <_strtod_l+0xb20>)
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f040 80c8 	bne.w	8004d60 <_strtod_l+0xb30>
 8004bd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004be0:	4649      	mov	r1, r9
 8004be2:	f002 f9d7 	bl	8006f94 <__ulp>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4630      	mov	r0, r6
 8004bec:	4639      	mov	r1, r7
 8004bee:	f7fb fc73 	bl	80004d8 <__aeabi_dmul>
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	f7fb fab9 	bl	800016c <__adddf3>
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4951      	ldr	r1, [pc, #324]	; (8004d44 <_strtod_l+0xb14>)
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <_strtod_l+0xb24>)
 8004c00:	4019      	ands	r1, r3
 8004c02:	4291      	cmp	r1, r2
 8004c04:	4680      	mov	r8, r0
 8004c06:	d95e      	bls.n	8004cc6 <_strtod_l+0xa96>
 8004c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d103      	bne.n	8004c1a <_strtod_l+0x9ea>
 8004c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c14:	3301      	adds	r3, #1
 8004c16:	f43f ad4e 	beq.w	80046b6 <_strtod_l+0x486>
 8004c1a:	f04f 38ff 	mov.w	r8, #4294967295
 8004c1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004d48 <_strtod_l+0xb18>
 8004c22:	4650      	mov	r0, sl
 8004c24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c26:	f001 fe85 	bl	8006934 <_Bfree>
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	9906      	ldr	r1, [sp, #24]
 8004c2e:	f001 fe81 	bl	8006934 <_Bfree>
 8004c32:	4650      	mov	r0, sl
 8004c34:	9904      	ldr	r1, [sp, #16]
 8004c36:	f001 fe7d 	bl	8006934 <_Bfree>
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	f001 fe79 	bl	8006934 <_Bfree>
 8004c42:	e61c      	b.n	800487e <_strtod_l+0x64e>
 8004c44:	f1b8 0f00 	cmp.w	r8, #0
 8004c48:	d119      	bne.n	8004c7e <_strtod_l+0xa4e>
 8004c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c50:	b9e3      	cbnz	r3, 8004c8c <_strtod_l+0xa5c>
 8004c52:	2200      	movs	r2, #0
 8004c54:	4630      	mov	r0, r6
 8004c56:	4639      	mov	r1, r7
 8004c58:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <_strtod_l+0xb1c>)
 8004c5a:	f7fb feaf 	bl	80009bc <__aeabi_dcmplt>
 8004c5e:	b9c8      	cbnz	r0, 8004c94 <_strtod_l+0xa64>
 8004c60:	2200      	movs	r2, #0
 8004c62:	4630      	mov	r0, r6
 8004c64:	4639      	mov	r1, r7
 8004c66:	4b3c      	ldr	r3, [pc, #240]	; (8004d58 <_strtod_l+0xb28>)
 8004c68:	f7fb fc36 	bl	80004d8 <__aeabi_dmul>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c74:	9418      	str	r4, [sp, #96]	; 0x60
 8004c76:	9319      	str	r3, [sp, #100]	; 0x64
 8004c78:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004c7c:	e79d      	b.n	8004bba <_strtod_l+0x98a>
 8004c7e:	f1b8 0f01 	cmp.w	r8, #1
 8004c82:	d103      	bne.n	8004c8c <_strtod_l+0xa5c>
 8004c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f43f ad87 	beq.w	800479a <_strtod_l+0x56a>
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	2400      	movs	r4, #0
 8004c90:	4f32      	ldr	r7, [pc, #200]	; (8004d5c <_strtod_l+0xb2c>)
 8004c92:	e791      	b.n	8004bb8 <_strtod_l+0x988>
 8004c94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004c96:	4d30      	ldr	r5, [pc, #192]	; (8004d58 <_strtod_l+0xb28>)
 8004c98:	e7ea      	b.n	8004c70 <_strtod_l+0xa40>
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <_strtod_l+0xb28>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	b933      	cbnz	r3, 8004cbc <_strtod_l+0xa8c>
 8004cae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cb2:	9010      	str	r0, [sp, #64]	; 0x40
 8004cb4:	9311      	str	r3, [sp, #68]	; 0x44
 8004cb6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004cba:	e77e      	b.n	8004bba <_strtod_l+0x98a>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004cc4:	e7f7      	b.n	8004cb6 <_strtod_l+0xa86>
 8004cc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1a8      	bne.n	8004c22 <_strtod_l+0x9f2>
 8004cd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cd6:	0d1b      	lsrs	r3, r3, #20
 8004cd8:	051b      	lsls	r3, r3, #20
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d1a1      	bne.n	8004c22 <_strtod_l+0x9f2>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fc fa2b 	bl	800113c <__aeabi_d2lz>
 8004ce6:	f7fb fbc9 	bl	800047c <__aeabi_l2d>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fa39 	bl	8000168 <__aeabi_dsub>
 8004cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cfc:	ea43 0308 	orr.w	r3, r3, r8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	4604      	mov	r4, r0
 8004d04:	460d      	mov	r5, r1
 8004d06:	d066      	beq.n	8004dd6 <_strtod_l+0xba6>
 8004d08:	a309      	add	r3, pc, #36	; (adr r3, 8004d30 <_strtod_l+0xb00>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fe55 	bl	80009bc <__aeabi_dcmplt>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f47f acda 	bne.w	80046cc <_strtod_l+0x49c>
 8004d18:	a307      	add	r3, pc, #28	; (adr r3, 8004d38 <_strtod_l+0xb08>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	f7fb fe69 	bl	80009f8 <__aeabi_dcmpgt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f43f af7b 	beq.w	8004c22 <_strtod_l+0x9f2>
 8004d2c:	e4ce      	b.n	80046cc <_strtod_l+0x49c>
 8004d2e:	bf00      	nop
 8004d30:	94a03595 	.word	0x94a03595
 8004d34:	3fdfffff 	.word	0x3fdfffff
 8004d38:	35afe535 	.word	0x35afe535
 8004d3c:	3fe00000 	.word	0x3fe00000
 8004d40:	000fffff 	.word	0x000fffff
 8004d44:	7ff00000 	.word	0x7ff00000
 8004d48:	7fefffff 	.word	0x7fefffff
 8004d4c:	3ff00000 	.word	0x3ff00000
 8004d50:	7fe00000 	.word	0x7fe00000
 8004d54:	7c9fffff 	.word	0x7c9fffff
 8004d58:	3fe00000 	.word	0x3fe00000
 8004d5c:	bff00000 	.word	0xbff00000
 8004d60:	9b05      	ldr	r3, [sp, #20]
 8004d62:	b313      	cbz	r3, 8004daa <_strtod_l+0xb7a>
 8004d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d6a:	d81e      	bhi.n	8004daa <_strtod_l+0xb7a>
 8004d6c:	a326      	add	r3, pc, #152	; (adr r3, 8004e08 <_strtod_l+0xbd8>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb fe2b 	bl	80009d0 <__aeabi_dcmple>
 8004d7a:	b190      	cbz	r0, 8004da2 <_strtod_l+0xb72>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7fb fe82 	bl	8000a88 <__aeabi_d2uiz>
 8004d84:	2801      	cmp	r0, #1
 8004d86:	bf38      	it	cc
 8004d88:	2001      	movcc	r0, #1
 8004d8a:	f7fb fb2b 	bl	80003e4 <__aeabi_ui2d>
 8004d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	b9d3      	cbnz	r3, 8004dcc <_strtod_l+0xb9c>
 8004d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d9a:	9012      	str	r0, [sp, #72]	; 0x48
 8004d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004da2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004da4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004da8:	1a9f      	subs	r7, r3, r2
 8004daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dae:	f002 f8f1 	bl	8006f94 <__ulp>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4630      	mov	r0, r6
 8004db8:	4639      	mov	r1, r7
 8004dba:	f7fb fb8d 	bl	80004d8 <__aeabi_dmul>
 8004dbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dc2:	f7fb f9d3 	bl	800016c <__adddf3>
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	4689      	mov	r9, r1
 8004dca:	e77e      	b.n	8004cca <_strtod_l+0xa9a>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004dd4:	e7e3      	b.n	8004d9e <_strtod_l+0xb6e>
 8004dd6:	a30e      	add	r3, pc, #56	; (adr r3, 8004e10 <_strtod_l+0xbe0>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fdee 	bl	80009bc <__aeabi_dcmplt>
 8004de0:	e7a1      	b.n	8004d26 <_strtod_l+0xaf6>
 8004de2:	2300      	movs	r3, #0
 8004de4:	930c      	str	r3, [sp, #48]	; 0x30
 8004de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004de8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	f7ff ba65 	b.w	80042ba <_strtod_l+0x8a>
 8004df0:	2b65      	cmp	r3, #101	; 0x65
 8004df2:	f43f ab5c 	beq.w	80044ae <_strtod_l+0x27e>
 8004df6:	2b45      	cmp	r3, #69	; 0x45
 8004df8:	f43f ab59 	beq.w	80044ae <_strtod_l+0x27e>
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f7ff bb8d 	b.w	800451c <_strtod_l+0x2ec>
 8004e02:	bf00      	nop
 8004e04:	f3af 8000 	nop.w
 8004e08:	ffc00000 	.word	0xffc00000
 8004e0c:	41dfffff 	.word	0x41dfffff
 8004e10:	94a03595 	.word	0x94a03595
 8004e14:	3fcfffff 	.word	0x3fcfffff

08004e18 <strtof>:
 8004e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	4f22      	ldr	r7, [pc, #136]	; (8004ea8 <strtof+0x90>)
 8004e1e:	460a      	mov	r2, r1
 8004e20:	4b22      	ldr	r3, [pc, #136]	; (8004eac <strtof+0x94>)
 8004e22:	4601      	mov	r1, r0
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f7ff fa03 	bl	8004230 <_strtod_l>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4606      	mov	r6, r0
 8004e30:	460c      	mov	r4, r1
 8004e32:	f7fb fdeb 	bl	8000a0c <__aeabi_dcmpun>
 8004e36:	b168      	cbz	r0, 8004e54 <strtof+0x3c>
 8004e38:	2c00      	cmp	r4, #0
 8004e3a:	481d      	ldr	r0, [pc, #116]	; (8004eb0 <strtof+0x98>)
 8004e3c:	da06      	bge.n	8004e4c <strtof+0x34>
 8004e3e:	f002 fc13 	bl	8007668 <nanf>
 8004e42:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8004e46:	4628      	mov	r0, r5
 8004e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e50:	f002 bc0a 	b.w	8007668 <nanf>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7fb fe36 	bl	8000ac8 <__aeabi_d2f>
 8004e5c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8004e60:	4605      	mov	r5, r0
 8004e62:	4914      	ldr	r1, [pc, #80]	; (8004eb4 <strtof+0x9c>)
 8004e64:	4640      	mov	r0, r8
 8004e66:	f7fc f953 	bl	8001110 <__aeabi_fcmpun>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1eb      	bne.n	8004e46 <strtof+0x2e>
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4910      	ldr	r1, [pc, #64]	; (8004eb4 <strtof+0x9c>)
 8004e72:	f7fc f92f 	bl	80010d4 <__aeabi_fcmple>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d1e5      	bne.n	8004e46 <strtof+0x2e>
 8004e7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	4630      	mov	r0, r6
 8004e84:	4621      	mov	r1, r4
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <strtof+0xa0>)
 8004e88:	f7fb fdc0 	bl	8000a0c <__aeabi_dcmpun>
 8004e8c:	b940      	cbnz	r0, 8004ea0 <strtof+0x88>
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	4630      	mov	r0, r6
 8004e94:	4621      	mov	r1, r4
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <strtof+0xa0>)
 8004e98:	f7fb fd9a 	bl	80009d0 <__aeabi_dcmple>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d0d2      	beq.n	8004e46 <strtof+0x2e>
 8004ea0:	2222      	movs	r2, #34	; 0x22
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e7ce      	b.n	8004e46 <strtof+0x2e>
 8004ea8:	20000010 	.word	0x20000010
 8004eac:	20000078 	.word	0x20000078
 8004eb0:	08007d30 	.word	0x08007d30
 8004eb4:	7f7fffff 	.word	0x7f7fffff
 8004eb8:	7fefffff 	.word	0x7fefffff

08004ebc <__swbuf_r>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	460e      	mov	r6, r1
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	b118      	cbz	r0, 8004ece <__swbuf_r+0x12>
 8004ec6:	6983      	ldr	r3, [r0, #24]
 8004ec8:	b90b      	cbnz	r3, 8004ece <__swbuf_r+0x12>
 8004eca:	f001 f84d 	bl	8005f68 <__sinit>
 8004ece:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <__swbuf_r+0x98>)
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	d12b      	bne.n	8004f2c <__swbuf_r+0x70>
 8004ed4:	686c      	ldr	r4, [r5, #4]
 8004ed6:	69a3      	ldr	r3, [r4, #24]
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	071a      	lsls	r2, r3, #28
 8004ede:	d52f      	bpl.n	8004f40 <__swbuf_r+0x84>
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	b36b      	cbz	r3, 8004f40 <__swbuf_r+0x84>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	b2f6      	uxtb	r6, r6
 8004eea:	1ac0      	subs	r0, r0, r3
 8004eec:	6963      	ldr	r3, [r4, #20]
 8004eee:	4637      	mov	r7, r6
 8004ef0:	4283      	cmp	r3, r0
 8004ef2:	dc04      	bgt.n	8004efe <__swbuf_r+0x42>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 ffa2 	bl	8005e40 <_fflush_r>
 8004efc:	bb30      	cbnz	r0, 8004f4c <__swbuf_r+0x90>
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	3001      	adds	r0, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	60a3      	str	r3, [r4, #8]
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	701e      	strb	r6, [r3, #0]
 8004f0e:	6963      	ldr	r3, [r4, #20]
 8004f10:	4283      	cmp	r3, r0
 8004f12:	d004      	beq.n	8004f1e <__swbuf_r+0x62>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d506      	bpl.n	8004f28 <__swbuf_r+0x6c>
 8004f1a:	2e0a      	cmp	r6, #10
 8004f1c:	d104      	bne.n	8004f28 <__swbuf_r+0x6c>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 ff8d 	bl	8005e40 <_fflush_r>
 8004f26:	b988      	cbnz	r0, 8004f4c <__swbuf_r+0x90>
 8004f28:	4638      	mov	r0, r7
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <__swbuf_r+0x9c>)
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	d101      	bne.n	8004f36 <__swbuf_r+0x7a>
 8004f32:	68ac      	ldr	r4, [r5, #8]
 8004f34:	e7cf      	b.n	8004ed6 <__swbuf_r+0x1a>
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <__swbuf_r+0xa0>)
 8004f38:	429c      	cmp	r4, r3
 8004f3a:	bf08      	it	eq
 8004f3c:	68ec      	ldreq	r4, [r5, #12]
 8004f3e:	e7ca      	b.n	8004ed6 <__swbuf_r+0x1a>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 f80c 	bl	8004f60 <__swsetup_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d0cb      	beq.n	8004ee4 <__swbuf_r+0x28>
 8004f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f50:	e7ea      	b.n	8004f28 <__swbuf_r+0x6c>
 8004f52:	bf00      	nop
 8004f54:	08007ac4 	.word	0x08007ac4
 8004f58:	08007ae4 	.word	0x08007ae4
 8004f5c:	08007aa4 	.word	0x08007aa4

08004f60 <__swsetup_r>:
 8004f60:	4b32      	ldr	r3, [pc, #200]	; (800502c <__swsetup_r+0xcc>)
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	681d      	ldr	r5, [r3, #0]
 8004f66:	4606      	mov	r6, r0
 8004f68:	460c      	mov	r4, r1
 8004f6a:	b125      	cbz	r5, 8004f76 <__swsetup_r+0x16>
 8004f6c:	69ab      	ldr	r3, [r5, #24]
 8004f6e:	b913      	cbnz	r3, 8004f76 <__swsetup_r+0x16>
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 fff9 	bl	8005f68 <__sinit>
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <__swsetup_r+0xd0>)
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d10f      	bne.n	8004f9c <__swsetup_r+0x3c>
 8004f7c:	686c      	ldr	r4, [r5, #4]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f84:	0719      	lsls	r1, r3, #28
 8004f86:	d42c      	bmi.n	8004fe2 <__swsetup_r+0x82>
 8004f88:	06dd      	lsls	r5, r3, #27
 8004f8a:	d411      	bmi.n	8004fb0 <__swsetup_r+0x50>
 8004f8c:	2309      	movs	r3, #9
 8004f8e:	6033      	str	r3, [r6, #0]
 8004f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	e03e      	b.n	800501a <__swsetup_r+0xba>
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <__swsetup_r+0xd4>)
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	d101      	bne.n	8004fa6 <__swsetup_r+0x46>
 8004fa2:	68ac      	ldr	r4, [r5, #8]
 8004fa4:	e7eb      	b.n	8004f7e <__swsetup_r+0x1e>
 8004fa6:	4b24      	ldr	r3, [pc, #144]	; (8005038 <__swsetup_r+0xd8>)
 8004fa8:	429c      	cmp	r4, r3
 8004faa:	bf08      	it	eq
 8004fac:	68ec      	ldreq	r4, [r5, #12]
 8004fae:	e7e6      	b.n	8004f7e <__swsetup_r+0x1e>
 8004fb0:	0758      	lsls	r0, r3, #29
 8004fb2:	d512      	bpl.n	8004fda <__swsetup_r+0x7a>
 8004fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb6:	b141      	cbz	r1, 8004fca <__swsetup_r+0x6a>
 8004fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d002      	beq.n	8004fc6 <__swsetup_r+0x66>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f002 f93d 	bl	8007240 <_free_r>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	b94b      	cbnz	r3, 8004ffa <__swsetup_r+0x9a>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d003      	beq.n	8004ffa <__swsetup_r+0x9a>
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f001 fbe7 	bl	80067c8 <__smakebuf_r>
 8004ffa:	89a0      	ldrh	r0, [r4, #12]
 8004ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005000:	f010 0301 	ands.w	r3, r0, #1
 8005004:	d00a      	beq.n	800501c <__swsetup_r+0xbc>
 8005006:	2300      	movs	r3, #0
 8005008:	60a3      	str	r3, [r4, #8]
 800500a:	6963      	ldr	r3, [r4, #20]
 800500c:	425b      	negs	r3, r3
 800500e:	61a3      	str	r3, [r4, #24]
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	b943      	cbnz	r3, 8005026 <__swsetup_r+0xc6>
 8005014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005018:	d1ba      	bne.n	8004f90 <__swsetup_r+0x30>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	0781      	lsls	r1, r0, #30
 800501e:	bf58      	it	pl
 8005020:	6963      	ldrpl	r3, [r4, #20]
 8005022:	60a3      	str	r3, [r4, #8]
 8005024:	e7f4      	b.n	8005010 <__swsetup_r+0xb0>
 8005026:	2000      	movs	r0, #0
 8005028:	e7f7      	b.n	800501a <__swsetup_r+0xba>
 800502a:	bf00      	nop
 800502c:	20000010 	.word	0x20000010
 8005030:	08007ac4 	.word	0x08007ac4
 8005034:	08007ae4 	.word	0x08007ae4
 8005038:	08007aa4 	.word	0x08007aa4

0800503c <quorem>:
 800503c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	6903      	ldr	r3, [r0, #16]
 8005042:	690c      	ldr	r4, [r1, #16]
 8005044:	4607      	mov	r7, r0
 8005046:	42a3      	cmp	r3, r4
 8005048:	f2c0 8083 	blt.w	8005152 <quorem+0x116>
 800504c:	3c01      	subs	r4, #1
 800504e:	f100 0514 	add.w	r5, r0, #20
 8005052:	f101 0814 	add.w	r8, r1, #20
 8005056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005064:	3301      	adds	r3, #1
 8005066:	429a      	cmp	r2, r3
 8005068:	fbb2 f6f3 	udiv	r6, r2, r3
 800506c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005074:	d332      	bcc.n	80050dc <quorem+0xa0>
 8005076:	f04f 0e00 	mov.w	lr, #0
 800507a:	4640      	mov	r0, r8
 800507c:	46ac      	mov	ip, r5
 800507e:	46f2      	mov	sl, lr
 8005080:	f850 2b04 	ldr.w	r2, [r0], #4
 8005084:	b293      	uxth	r3, r2
 8005086:	fb06 e303 	mla	r3, r6, r3, lr
 800508a:	0c12      	lsrs	r2, r2, #16
 800508c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005090:	fb06 e202 	mla	r2, r6, r2, lr
 8005094:	b29b      	uxth	r3, r3
 8005096:	ebaa 0303 	sub.w	r3, sl, r3
 800509a:	f8dc a000 	ldr.w	sl, [ip]
 800509e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050a2:	fa1f fa8a 	uxth.w	sl, sl
 80050a6:	4453      	add	r3, sl
 80050a8:	fa1f fa82 	uxth.w	sl, r2
 80050ac:	f8dc 2000 	ldr.w	r2, [ip]
 80050b0:	4581      	cmp	r9, r0
 80050b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050c4:	f84c 3b04 	str.w	r3, [ip], #4
 80050c8:	d2da      	bcs.n	8005080 <quorem+0x44>
 80050ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ce:	b92b      	cbnz	r3, 80050dc <quorem+0xa0>
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	3b04      	subs	r3, #4
 80050d4:	429d      	cmp	r5, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	d32f      	bcc.n	800513a <quorem+0xfe>
 80050da:	613c      	str	r4, [r7, #16]
 80050dc:	4638      	mov	r0, r7
 80050de:	f001 fead 	bl	8006e3c <__mcmp>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	db25      	blt.n	8005132 <quorem+0xf6>
 80050e6:	4628      	mov	r0, r5
 80050e8:	f04f 0c00 	mov.w	ip, #0
 80050ec:	3601      	adds	r6, #1
 80050ee:	f858 1b04 	ldr.w	r1, [r8], #4
 80050f2:	f8d0 e000 	ldr.w	lr, [r0]
 80050f6:	b28b      	uxth	r3, r1
 80050f8:	ebac 0303 	sub.w	r3, ip, r3
 80050fc:	fa1f f28e 	uxth.w	r2, lr
 8005100:	4413      	add	r3, r2
 8005102:	0c0a      	lsrs	r2, r1, #16
 8005104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005112:	45c1      	cmp	r9, r8
 8005114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005118:	f840 3b04 	str.w	r3, [r0], #4
 800511c:	d2e7      	bcs.n	80050ee <quorem+0xb2>
 800511e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005126:	b922      	cbnz	r2, 8005132 <quorem+0xf6>
 8005128:	3b04      	subs	r3, #4
 800512a:	429d      	cmp	r5, r3
 800512c:	461a      	mov	r2, r3
 800512e:	d30a      	bcc.n	8005146 <quorem+0x10a>
 8005130:	613c      	str	r4, [r7, #16]
 8005132:	4630      	mov	r0, r6
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	3b04      	subs	r3, #4
 800513e:	2a00      	cmp	r2, #0
 8005140:	d1cb      	bne.n	80050da <quorem+0x9e>
 8005142:	3c01      	subs	r4, #1
 8005144:	e7c6      	b.n	80050d4 <quorem+0x98>
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	3b04      	subs	r3, #4
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f0      	bne.n	8005130 <quorem+0xf4>
 800514e:	3c01      	subs	r4, #1
 8005150:	e7eb      	b.n	800512a <quorem+0xee>
 8005152:	2000      	movs	r0, #0
 8005154:	e7ee      	b.n	8005134 <quorem+0xf8>
	...

08005158 <_dtoa_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	4616      	mov	r6, r2
 800515e:	461f      	mov	r7, r3
 8005160:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005162:	b099      	sub	sp, #100	; 0x64
 8005164:	4605      	mov	r5, r0
 8005166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800516a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800516e:	b974      	cbnz	r4, 800518e <_dtoa_r+0x36>
 8005170:	2010      	movs	r0, #16
 8005172:	f001 fb69 	bl	8006848 <malloc>
 8005176:	4602      	mov	r2, r0
 8005178:	6268      	str	r0, [r5, #36]	; 0x24
 800517a:	b920      	cbnz	r0, 8005186 <_dtoa_r+0x2e>
 800517c:	21ea      	movs	r1, #234	; 0xea
 800517e:	4bae      	ldr	r3, [pc, #696]	; (8005438 <_dtoa_r+0x2e0>)
 8005180:	48ae      	ldr	r0, [pc, #696]	; (800543c <_dtoa_r+0x2e4>)
 8005182:	f002 fae9 	bl	8007758 <__assert_func>
 8005186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800518a:	6004      	str	r4, [r0, #0]
 800518c:	60c4      	str	r4, [r0, #12]
 800518e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	b151      	cbz	r1, 80051aa <_dtoa_r+0x52>
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	2301      	movs	r3, #1
 8005198:	4093      	lsls	r3, r2
 800519a:	604a      	str	r2, [r1, #4]
 800519c:	608b      	str	r3, [r1, #8]
 800519e:	4628      	mov	r0, r5
 80051a0:	f001 fbc8 	bl	8006934 <_Bfree>
 80051a4:	2200      	movs	r2, #0
 80051a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	1e3b      	subs	r3, r7, #0
 80051ac:	bfaf      	iteee	ge
 80051ae:	2300      	movge	r3, #0
 80051b0:	2201      	movlt	r2, #1
 80051b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051b6:	9305      	strlt	r3, [sp, #20]
 80051b8:	bfa8      	it	ge
 80051ba:	f8c8 3000 	strge.w	r3, [r8]
 80051be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051c2:	4b9f      	ldr	r3, [pc, #636]	; (8005440 <_dtoa_r+0x2e8>)
 80051c4:	bfb8      	it	lt
 80051c6:	f8c8 2000 	strlt.w	r2, [r8]
 80051ca:	ea33 0309 	bics.w	r3, r3, r9
 80051ce:	d119      	bne.n	8005204 <_dtoa_r+0xac>
 80051d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80051d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051dc:	4333      	orrs	r3, r6
 80051de:	f000 8580 	beq.w	8005ce2 <_dtoa_r+0xb8a>
 80051e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051e4:	b953      	cbnz	r3, 80051fc <_dtoa_r+0xa4>
 80051e6:	4b97      	ldr	r3, [pc, #604]	; (8005444 <_dtoa_r+0x2ec>)
 80051e8:	e022      	b.n	8005230 <_dtoa_r+0xd8>
 80051ea:	4b97      	ldr	r3, [pc, #604]	; (8005448 <_dtoa_r+0x2f0>)
 80051ec:	9308      	str	r3, [sp, #32]
 80051ee:	3308      	adds	r3, #8
 80051f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	9808      	ldr	r0, [sp, #32]
 80051f6:	b019      	add	sp, #100	; 0x64
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	4b91      	ldr	r3, [pc, #580]	; (8005444 <_dtoa_r+0x2ec>)
 80051fe:	9308      	str	r3, [sp, #32]
 8005200:	3303      	adds	r3, #3
 8005202:	e7f5      	b.n	80051f0 <_dtoa_r+0x98>
 8005204:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005208:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800520c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	f7fb fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005218:	4680      	mov	r8, r0
 800521a:	b158      	cbz	r0, 8005234 <_dtoa_r+0xdc>
 800521c:	2301      	movs	r3, #1
 800521e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8559 	beq.w	8005cdc <_dtoa_r+0xb84>
 800522a:	4888      	ldr	r0, [pc, #544]	; (800544c <_dtoa_r+0x2f4>)
 800522c:	6018      	str	r0, [r3, #0]
 800522e:	1e43      	subs	r3, r0, #1
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	e7df      	b.n	80051f4 <_dtoa_r+0x9c>
 8005234:	ab16      	add	r3, sp, #88	; 0x58
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	ab17      	add	r3, sp, #92	; 0x5c
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4628      	mov	r0, r5
 800523e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005242:	f001 ff21 	bl	8007088 <__d2b>
 8005246:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800524a:	4682      	mov	sl, r0
 800524c:	2c00      	cmp	r4, #0
 800524e:	d07e      	beq.n	800534e <_dtoa_r+0x1f6>
 8005250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005256:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800525a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800525e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005262:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005266:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800526a:	2200      	movs	r2, #0
 800526c:	4b78      	ldr	r3, [pc, #480]	; (8005450 <_dtoa_r+0x2f8>)
 800526e:	f7fa ff7b 	bl	8000168 <__aeabi_dsub>
 8005272:	a36b      	add	r3, pc, #428	; (adr r3, 8005420 <_dtoa_r+0x2c8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f92e 	bl	80004d8 <__aeabi_dmul>
 800527c:	a36a      	add	r3, pc, #424	; (adr r3, 8005428 <_dtoa_r+0x2d0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fa ff73 	bl	800016c <__adddf3>
 8005286:	4606      	mov	r6, r0
 8005288:	4620      	mov	r0, r4
 800528a:	460f      	mov	r7, r1
 800528c:	f7fb f8ba 	bl	8000404 <__aeabi_i2d>
 8005290:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <_dtoa_r+0x2d8>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fa ff63 	bl	800016c <__adddf3>
 80052a6:	4606      	mov	r6, r0
 80052a8:	460f      	mov	r7, r1
 80052aa:	f7fb fbc5 	bl	8000a38 <__aeabi_d2iz>
 80052ae:	2200      	movs	r2, #0
 80052b0:	4681      	mov	r9, r0
 80052b2:	2300      	movs	r3, #0
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fb fb80 	bl	80009bc <__aeabi_dcmplt>
 80052bc:	b148      	cbz	r0, 80052d2 <_dtoa_r+0x17a>
 80052be:	4648      	mov	r0, r9
 80052c0:	f7fb f8a0 	bl	8000404 <__aeabi_i2d>
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	f7fb fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80052cc:	b908      	cbnz	r0, 80052d2 <_dtoa_r+0x17a>
 80052ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80052d2:	f1b9 0f16 	cmp.w	r9, #22
 80052d6:	d857      	bhi.n	8005388 <_dtoa_r+0x230>
 80052d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052dc:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <_dtoa_r+0x2fc>)
 80052de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f7fb fb69 	bl	80009bc <__aeabi_dcmplt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d04e      	beq.n	800538c <_dtoa_r+0x234>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80052f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80052f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052f8:	1b1c      	subs	r4, r3, r4
 80052fa:	1e63      	subs	r3, r4, #1
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	bf49      	itett	mi
 8005300:	f1c4 0301 	rsbmi	r3, r4, #1
 8005304:	2300      	movpl	r3, #0
 8005306:	9306      	strmi	r3, [sp, #24]
 8005308:	2300      	movmi	r3, #0
 800530a:	bf54      	ite	pl
 800530c:	9306      	strpl	r3, [sp, #24]
 800530e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005310:	f1b9 0f00 	cmp.w	r9, #0
 8005314:	db3c      	blt.n	8005390 <_dtoa_r+0x238>
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800531c:	444b      	add	r3, r9
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	2300      	movs	r3, #0
 8005322:	930a      	str	r3, [sp, #40]	; 0x28
 8005324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005326:	2b09      	cmp	r3, #9
 8005328:	d86c      	bhi.n	8005404 <_dtoa_r+0x2ac>
 800532a:	2b05      	cmp	r3, #5
 800532c:	bfc4      	itt	gt
 800532e:	3b04      	subgt	r3, #4
 8005330:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005334:	bfc8      	it	gt
 8005336:	2400      	movgt	r4, #0
 8005338:	f1a3 0302 	sub.w	r3, r3, #2
 800533c:	bfd8      	it	le
 800533e:	2401      	movle	r4, #1
 8005340:	2b03      	cmp	r3, #3
 8005342:	f200 808b 	bhi.w	800545c <_dtoa_r+0x304>
 8005346:	e8df f003 	tbb	[pc, r3]
 800534a:	4f2d      	.short	0x4f2d
 800534c:	5b4d      	.short	0x5b4d
 800534e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005352:	441c      	add	r4, r3
 8005354:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005358:	2b20      	cmp	r3, #32
 800535a:	bfc3      	ittte	gt
 800535c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005360:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005364:	fa09 f303 	lslgt.w	r3, r9, r3
 8005368:	f1c3 0320 	rsble	r3, r3, #32
 800536c:	bfc6      	itte	gt
 800536e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005372:	4318      	orrgt	r0, r3
 8005374:	fa06 f003 	lslle.w	r0, r6, r3
 8005378:	f7fb f834 	bl	80003e4 <__aeabi_ui2d>
 800537c:	2301      	movs	r3, #1
 800537e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005382:	3c01      	subs	r4, #1
 8005384:	9313      	str	r3, [sp, #76]	; 0x4c
 8005386:	e770      	b.n	800526a <_dtoa_r+0x112>
 8005388:	2301      	movs	r3, #1
 800538a:	e7b3      	b.n	80052f4 <_dtoa_r+0x19c>
 800538c:	900f      	str	r0, [sp, #60]	; 0x3c
 800538e:	e7b2      	b.n	80052f6 <_dtoa_r+0x19e>
 8005390:	9b06      	ldr	r3, [sp, #24]
 8005392:	eba3 0309 	sub.w	r3, r3, r9
 8005396:	9306      	str	r3, [sp, #24]
 8005398:	f1c9 0300 	rsb	r3, r9, #0
 800539c:	930a      	str	r3, [sp, #40]	; 0x28
 800539e:	2300      	movs	r3, #0
 80053a0:	930e      	str	r3, [sp, #56]	; 0x38
 80053a2:	e7bf      	b.n	8005324 <_dtoa_r+0x1cc>
 80053a4:	2300      	movs	r3, #0
 80053a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc59      	bgt.n	8005462 <_dtoa_r+0x30a>
 80053ae:	f04f 0b01 	mov.w	fp, #1
 80053b2:	465b      	mov	r3, fp
 80053b4:	f8cd b008 	str.w	fp, [sp, #8]
 80053b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80053bc:	2200      	movs	r2, #0
 80053be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80053c0:	6042      	str	r2, [r0, #4]
 80053c2:	2204      	movs	r2, #4
 80053c4:	f102 0614 	add.w	r6, r2, #20
 80053c8:	429e      	cmp	r6, r3
 80053ca:	6841      	ldr	r1, [r0, #4]
 80053cc:	d94f      	bls.n	800546e <_dtoa_r+0x316>
 80053ce:	4628      	mov	r0, r5
 80053d0:	f001 fa70 	bl	80068b4 <_Balloc>
 80053d4:	9008      	str	r0, [sp, #32]
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d14d      	bne.n	8005476 <_dtoa_r+0x31e>
 80053da:	4602      	mov	r2, r0
 80053dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <_dtoa_r+0x300>)
 80053e2:	e6cd      	b.n	8005180 <_dtoa_r+0x28>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e7de      	b.n	80053a6 <_dtoa_r+0x24e>
 80053e8:	2300      	movs	r3, #0
 80053ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ee:	eb09 0b03 	add.w	fp, r9, r3
 80053f2:	f10b 0301 	add.w	r3, fp, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	bfb8      	it	lt
 80053fc:	2301      	movlt	r3, #1
 80053fe:	e7dd      	b.n	80053bc <_dtoa_r+0x264>
 8005400:	2301      	movs	r3, #1
 8005402:	e7f2      	b.n	80053ea <_dtoa_r+0x292>
 8005404:	2401      	movs	r4, #1
 8005406:	2300      	movs	r3, #0
 8005408:	940b      	str	r4, [sp, #44]	; 0x2c
 800540a:	9322      	str	r3, [sp, #136]	; 0x88
 800540c:	f04f 3bff 	mov.w	fp, #4294967295
 8005410:	2200      	movs	r2, #0
 8005412:	2312      	movs	r3, #18
 8005414:	f8cd b008 	str.w	fp, [sp, #8]
 8005418:	9223      	str	r2, [sp, #140]	; 0x8c
 800541a:	e7cf      	b.n	80053bc <_dtoa_r+0x264>
 800541c:	f3af 8000 	nop.w
 8005420:	636f4361 	.word	0x636f4361
 8005424:	3fd287a7 	.word	0x3fd287a7
 8005428:	8b60c8b3 	.word	0x8b60c8b3
 800542c:	3fc68a28 	.word	0x3fc68a28
 8005430:	509f79fb 	.word	0x509f79fb
 8005434:	3fd34413 	.word	0x3fd34413
 8005438:	08007a1d 	.word	0x08007a1d
 800543c:	08007a34 	.word	0x08007a34
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	08007a19 	.word	0x08007a19
 8005448:	08007a10 	.word	0x08007a10
 800544c:	08007999 	.word	0x08007999
 8005450:	3ff80000 	.word	0x3ff80000
 8005454:	08007c10 	.word	0x08007c10
 8005458:	08007a93 	.word	0x08007a93
 800545c:	2301      	movs	r3, #1
 800545e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005460:	e7d4      	b.n	800540c <_dtoa_r+0x2b4>
 8005462:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005466:	465b      	mov	r3, fp
 8005468:	f8cd b008 	str.w	fp, [sp, #8]
 800546c:	e7a6      	b.n	80053bc <_dtoa_r+0x264>
 800546e:	3101      	adds	r1, #1
 8005470:	6041      	str	r1, [r0, #4]
 8005472:	0052      	lsls	r2, r2, #1
 8005474:	e7a6      	b.n	80053c4 <_dtoa_r+0x26c>
 8005476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005478:	9a08      	ldr	r2, [sp, #32]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	2b0e      	cmp	r3, #14
 8005480:	f200 80a8 	bhi.w	80055d4 <_dtoa_r+0x47c>
 8005484:	2c00      	cmp	r4, #0
 8005486:	f000 80a5 	beq.w	80055d4 <_dtoa_r+0x47c>
 800548a:	f1b9 0f00 	cmp.w	r9, #0
 800548e:	dd34      	ble.n	80054fa <_dtoa_r+0x3a2>
 8005490:	4a9a      	ldr	r2, [pc, #616]	; (80056fc <_dtoa_r+0x5a4>)
 8005492:	f009 030f 	and.w	r3, r9, #15
 8005496:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800549a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800549e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80054aa:	d016      	beq.n	80054da <_dtoa_r+0x382>
 80054ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054b0:	4b93      	ldr	r3, [pc, #588]	; (8005700 <_dtoa_r+0x5a8>)
 80054b2:	2703      	movs	r7, #3
 80054b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b8:	f7fb f938 	bl	800072c <__aeabi_ddiv>
 80054bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c0:	f004 040f 	and.w	r4, r4, #15
 80054c4:	4e8e      	ldr	r6, [pc, #568]	; (8005700 <_dtoa_r+0x5a8>)
 80054c6:	b954      	cbnz	r4, 80054de <_dtoa_r+0x386>
 80054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d0:	f7fb f92c 	bl	800072c <__aeabi_ddiv>
 80054d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054d8:	e029      	b.n	800552e <_dtoa_r+0x3d6>
 80054da:	2702      	movs	r7, #2
 80054dc:	e7f2      	b.n	80054c4 <_dtoa_r+0x36c>
 80054de:	07e1      	lsls	r1, r4, #31
 80054e0:	d508      	bpl.n	80054f4 <_dtoa_r+0x39c>
 80054e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ea:	f7fa fff5 	bl	80004d8 <__aeabi_dmul>
 80054ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054f2:	3701      	adds	r7, #1
 80054f4:	1064      	asrs	r4, r4, #1
 80054f6:	3608      	adds	r6, #8
 80054f8:	e7e5      	b.n	80054c6 <_dtoa_r+0x36e>
 80054fa:	f000 80a5 	beq.w	8005648 <_dtoa_r+0x4f0>
 80054fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005502:	f1c9 0400 	rsb	r4, r9, #0
 8005506:	4b7d      	ldr	r3, [pc, #500]	; (80056fc <_dtoa_r+0x5a4>)
 8005508:	f004 020f 	and.w	r2, r4, #15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa ffe0 	bl	80004d8 <__aeabi_dmul>
 8005518:	2702      	movs	r7, #2
 800551a:	2300      	movs	r3, #0
 800551c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005520:	4e77      	ldr	r6, [pc, #476]	; (8005700 <_dtoa_r+0x5a8>)
 8005522:	1124      	asrs	r4, r4, #4
 8005524:	2c00      	cmp	r4, #0
 8005526:	f040 8084 	bne.w	8005632 <_dtoa_r+0x4da>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1d2      	bne.n	80054d4 <_dtoa_r+0x37c>
 800552e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 808b 	beq.w	800564c <_dtoa_r+0x4f4>
 8005536:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800553a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800553e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005542:	2200      	movs	r2, #0
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <_dtoa_r+0x5ac>)
 8005546:	f7fb fa39 	bl	80009bc <__aeabi_dcmplt>
 800554a:	2800      	cmp	r0, #0
 800554c:	d07e      	beq.n	800564c <_dtoa_r+0x4f4>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07b      	beq.n	800564c <_dtoa_r+0x4f4>
 8005554:	f1bb 0f00 	cmp.w	fp, #0
 8005558:	dd38      	ble.n	80055cc <_dtoa_r+0x474>
 800555a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555e:	2200      	movs	r2, #0
 8005560:	4b69      	ldr	r3, [pc, #420]	; (8005708 <_dtoa_r+0x5b0>)
 8005562:	f7fa ffb9 	bl	80004d8 <__aeabi_dmul>
 8005566:	465c      	mov	r4, fp
 8005568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800556c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005570:	3701      	adds	r7, #1
 8005572:	4638      	mov	r0, r7
 8005574:	f7fa ff46 	bl	8000404 <__aeabi_i2d>
 8005578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800557c:	f7fa ffac 	bl	80004d8 <__aeabi_dmul>
 8005580:	2200      	movs	r2, #0
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <_dtoa_r+0x5b4>)
 8005584:	f7fa fdf2 	bl	800016c <__adddf3>
 8005588:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800558c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005590:	9611      	str	r6, [sp, #68]	; 0x44
 8005592:	2c00      	cmp	r4, #0
 8005594:	d15d      	bne.n	8005652 <_dtoa_r+0x4fa>
 8005596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559a:	2200      	movs	r2, #0
 800559c:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <_dtoa_r+0x5b8>)
 800559e:	f7fa fde3 	bl	8000168 <__aeabi_dsub>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055aa:	4633      	mov	r3, r6
 80055ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055ae:	f7fb fa23 	bl	80009f8 <__aeabi_dcmpgt>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 829e 	bne.w	8005af4 <_dtoa_r+0x99c>
 80055b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055c2:	f7fb f9fb 	bl	80009bc <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f040 8292 	bne.w	8005af0 <_dtoa_r+0x998>
 80055cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f2c0 8153 	blt.w	8005882 <_dtoa_r+0x72a>
 80055dc:	f1b9 0f0e 	cmp.w	r9, #14
 80055e0:	f300 814f 	bgt.w	8005882 <_dtoa_r+0x72a>
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <_dtoa_r+0x5a4>)
 80055e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80055ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f280 80db 	bge.w	80057b0 <_dtoa_r+0x658>
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f300 80d7 	bgt.w	80057b0 <_dtoa_r+0x658>
 8005602:	f040 8274 	bne.w	8005aee <_dtoa_r+0x996>
 8005606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560a:	2200      	movs	r2, #0
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <_dtoa_r+0x5b8>)
 800560e:	f7fa ff63 	bl	80004d8 <__aeabi_dmul>
 8005612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005616:	f7fb f9e5 	bl	80009e4 <__aeabi_dcmpge>
 800561a:	9c02      	ldr	r4, [sp, #8]
 800561c:	4626      	mov	r6, r4
 800561e:	2800      	cmp	r0, #0
 8005620:	f040 824a 	bne.w	8005ab8 <_dtoa_r+0x960>
 8005624:	2331      	movs	r3, #49	; 0x31
 8005626:	9f08      	ldr	r7, [sp, #32]
 8005628:	f109 0901 	add.w	r9, r9, #1
 800562c:	f807 3b01 	strb.w	r3, [r7], #1
 8005630:	e246      	b.n	8005ac0 <_dtoa_r+0x968>
 8005632:	07e2      	lsls	r2, r4, #31
 8005634:	d505      	bpl.n	8005642 <_dtoa_r+0x4ea>
 8005636:	e9d6 2300 	ldrd	r2, r3, [r6]
 800563a:	f7fa ff4d 	bl	80004d8 <__aeabi_dmul>
 800563e:	2301      	movs	r3, #1
 8005640:	3701      	adds	r7, #1
 8005642:	1064      	asrs	r4, r4, #1
 8005644:	3608      	adds	r6, #8
 8005646:	e76d      	b.n	8005524 <_dtoa_r+0x3cc>
 8005648:	2702      	movs	r7, #2
 800564a:	e770      	b.n	800552e <_dtoa_r+0x3d6>
 800564c:	46c8      	mov	r8, r9
 800564e:	9c02      	ldr	r4, [sp, #8]
 8005650:	e78f      	b.n	8005572 <_dtoa_r+0x41a>
 8005652:	9908      	ldr	r1, [sp, #32]
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <_dtoa_r+0x5a4>)
 8005656:	4421      	add	r1, r4
 8005658:	9112      	str	r1, [sp, #72]	; 0x48
 800565a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800565c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005660:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005664:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005668:	2900      	cmp	r1, #0
 800566a:	d055      	beq.n	8005718 <_dtoa_r+0x5c0>
 800566c:	2000      	movs	r0, #0
 800566e:	4929      	ldr	r1, [pc, #164]	; (8005714 <_dtoa_r+0x5bc>)
 8005670:	f7fb f85c 	bl	800072c <__aeabi_ddiv>
 8005674:	463b      	mov	r3, r7
 8005676:	4632      	mov	r2, r6
 8005678:	f7fa fd76 	bl	8000168 <__aeabi_dsub>
 800567c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005680:	9f08      	ldr	r7, [sp, #32]
 8005682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005686:	f7fb f9d7 	bl	8000a38 <__aeabi_d2iz>
 800568a:	4604      	mov	r4, r0
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	3430      	adds	r4, #48	; 0x30
 80056a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056aa:	f807 4b01 	strb.w	r4, [r7], #1
 80056ae:	f7fb f985 	bl	80009bc <__aeabi_dcmplt>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d174      	bne.n	80057a0 <_dtoa_r+0x648>
 80056b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ba:	2000      	movs	r0, #0
 80056bc:	4911      	ldr	r1, [pc, #68]	; (8005704 <_dtoa_r+0x5ac>)
 80056be:	f7fa fd53 	bl	8000168 <__aeabi_dsub>
 80056c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056c6:	f7fb f979 	bl	80009bc <__aeabi_dcmplt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f040 80b6 	bne.w	800583c <_dtoa_r+0x6e4>
 80056d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056d2:	429f      	cmp	r7, r3
 80056d4:	f43f af7a 	beq.w	80055cc <_dtoa_r+0x474>
 80056d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056dc:	2200      	movs	r2, #0
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <_dtoa_r+0x5b0>)
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	2200      	movs	r2, #0
 80056e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <_dtoa_r+0x5b0>)
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056f8:	e7c3      	b.n	8005682 <_dtoa_r+0x52a>
 80056fa:	bf00      	nop
 80056fc:	08007c10 	.word	0x08007c10
 8005700:	08007be8 	.word	0x08007be8
 8005704:	3ff00000 	.word	0x3ff00000
 8005708:	40240000 	.word	0x40240000
 800570c:	401c0000 	.word	0x401c0000
 8005710:	40140000 	.word	0x40140000
 8005714:	3fe00000 	.word	0x3fe00000
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa fedc 	bl	80004d8 <__aeabi_dmul>
 8005720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005722:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005726:	9c08      	ldr	r4, [sp, #32]
 8005728:	9314      	str	r3, [sp, #80]	; 0x50
 800572a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800572e:	f7fb f983 	bl	8000a38 <__aeabi_d2iz>
 8005732:	9015      	str	r0, [sp, #84]	; 0x54
 8005734:	f7fa fe66 	bl	8000404 <__aeabi_i2d>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005740:	f7fa fd12 	bl	8000168 <__aeabi_dsub>
 8005744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005746:	4606      	mov	r6, r0
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	f804 3b01 	strb.w	r3, [r4], #1
 800574e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005750:	460f      	mov	r7, r1
 8005752:	429c      	cmp	r4, r3
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	d124      	bne.n	80057a4 <_dtoa_r+0x64c>
 800575a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800575e:	4bb3      	ldr	r3, [pc, #716]	; (8005a2c <_dtoa_r+0x8d4>)
 8005760:	f7fa fd04 	bl	800016c <__adddf3>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	f7fb f944 	bl	80009f8 <__aeabi_dcmpgt>
 8005770:	2800      	cmp	r0, #0
 8005772:	d162      	bne.n	800583a <_dtoa_r+0x6e2>
 8005774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005778:	2000      	movs	r0, #0
 800577a:	49ac      	ldr	r1, [pc, #688]	; (8005a2c <_dtoa_r+0x8d4>)
 800577c:	f7fa fcf4 	bl	8000168 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f918 	bl	80009bc <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	f43f af1d 	beq.w	80055cc <_dtoa_r+0x474>
 8005792:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005794:	1e7b      	subs	r3, r7, #1
 8005796:	9314      	str	r3, [sp, #80]	; 0x50
 8005798:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d0f8      	beq.n	8005792 <_dtoa_r+0x63a>
 80057a0:	46c1      	mov	r9, r8
 80057a2:	e03a      	b.n	800581a <_dtoa_r+0x6c2>
 80057a4:	4ba2      	ldr	r3, [pc, #648]	; (8005a30 <_dtoa_r+0x8d8>)
 80057a6:	f7fa fe97 	bl	80004d8 <__aeabi_dmul>
 80057aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ae:	e7bc      	b.n	800572a <_dtoa_r+0x5d2>
 80057b0:	9f08      	ldr	r7, [sp, #32]
 80057b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ba:	f7fa ffb7 	bl	800072c <__aeabi_ddiv>
 80057be:	f7fb f93b 	bl	8000a38 <__aeabi_d2iz>
 80057c2:	4604      	mov	r4, r0
 80057c4:	f7fa fe1e 	bl	8000404 <__aeabi_i2d>
 80057c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057cc:	f7fa fe84 	bl	80004d8 <__aeabi_dmul>
 80057d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057d4:	460b      	mov	r3, r1
 80057d6:	4602      	mov	r2, r0
 80057d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057dc:	f7fa fcc4 	bl	8000168 <__aeabi_dsub>
 80057e0:	f807 6b01 	strb.w	r6, [r7], #1
 80057e4:	9e08      	ldr	r6, [sp, #32]
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	1bbe      	subs	r6, r7, r6
 80057ea:	42b3      	cmp	r3, r6
 80057ec:	d13a      	bne.n	8005864 <_dtoa_r+0x70c>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	f7fa fcbb 	bl	800016c <__adddf3>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005802:	f7fb f8f9 	bl	80009f8 <__aeabi_dcmpgt>
 8005806:	bb58      	cbnz	r0, 8005860 <_dtoa_r+0x708>
 8005808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800580c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005810:	f7fb f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8005814:	b108      	cbz	r0, 800581a <_dtoa_r+0x6c2>
 8005816:	07e1      	lsls	r1, r4, #31
 8005818:	d422      	bmi.n	8005860 <_dtoa_r+0x708>
 800581a:	4628      	mov	r0, r5
 800581c:	4651      	mov	r1, sl
 800581e:	f001 f889 	bl	8006934 <_Bfree>
 8005822:	2300      	movs	r3, #0
 8005824:	703b      	strb	r3, [r7, #0]
 8005826:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005828:	f109 0001 	add.w	r0, r9, #1
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005830:	2b00      	cmp	r3, #0
 8005832:	f43f acdf 	beq.w	80051f4 <_dtoa_r+0x9c>
 8005836:	601f      	str	r7, [r3, #0]
 8005838:	e4dc      	b.n	80051f4 <_dtoa_r+0x9c>
 800583a:	4627      	mov	r7, r4
 800583c:	463b      	mov	r3, r7
 800583e:	461f      	mov	r7, r3
 8005840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005844:	2a39      	cmp	r2, #57	; 0x39
 8005846:	d107      	bne.n	8005858 <_dtoa_r+0x700>
 8005848:	9a08      	ldr	r2, [sp, #32]
 800584a:	429a      	cmp	r2, r3
 800584c:	d1f7      	bne.n	800583e <_dtoa_r+0x6e6>
 800584e:	2230      	movs	r2, #48	; 0x30
 8005850:	9908      	ldr	r1, [sp, #32]
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	700a      	strb	r2, [r1, #0]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	3201      	adds	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e79f      	b.n	80057a0 <_dtoa_r+0x648>
 8005860:	46c8      	mov	r8, r9
 8005862:	e7eb      	b.n	800583c <_dtoa_r+0x6e4>
 8005864:	2200      	movs	r2, #0
 8005866:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <_dtoa_r+0x8d8>)
 8005868:	f7fa fe36 	bl	80004d8 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	f7fb f896 	bl	80009a8 <__aeabi_dcmpeq>
 800587c:	2800      	cmp	r0, #0
 800587e:	d098      	beq.n	80057b2 <_dtoa_r+0x65a>
 8005880:	e7cb      	b.n	800581a <_dtoa_r+0x6c2>
 8005882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 80cd 	beq.w	8005a24 <_dtoa_r+0x8cc>
 800588a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800588c:	2a01      	cmp	r2, #1
 800588e:	f300 80af 	bgt.w	80059f0 <_dtoa_r+0x898>
 8005892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 80a7 	beq.w	80059e8 <_dtoa_r+0x890>
 800589a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800589e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a0:	9f06      	ldr	r7, [sp, #24]
 80058a2:	9a06      	ldr	r2, [sp, #24]
 80058a4:	2101      	movs	r1, #1
 80058a6:	441a      	add	r2, r3
 80058a8:	9206      	str	r2, [sp, #24]
 80058aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ac:	4628      	mov	r0, r5
 80058ae:	441a      	add	r2, r3
 80058b0:	9209      	str	r2, [sp, #36]	; 0x24
 80058b2:	f001 f943 	bl	8006b3c <__i2b>
 80058b6:	4606      	mov	r6, r0
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	dd0c      	ble.n	80058d6 <_dtoa_r+0x77e>
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd09      	ble.n	80058d6 <_dtoa_r+0x77e>
 80058c2:	42bb      	cmp	r3, r7
 80058c4:	bfa8      	it	ge
 80058c6:	463b      	movge	r3, r7
 80058c8:	9a06      	ldr	r2, [sp, #24]
 80058ca:	1aff      	subs	r7, r7, r3
 80058cc:	1ad2      	subs	r2, r2, r3
 80058ce:	9206      	str	r2, [sp, #24]
 80058d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	b1f3      	cbz	r3, 8005918 <_dtoa_r+0x7c0>
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a9 	beq.w	8005a34 <_dtoa_r+0x8dc>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	dd10      	ble.n	8005908 <_dtoa_r+0x7b0>
 80058e6:	4631      	mov	r1, r6
 80058e8:	4622      	mov	r2, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f001 f9e0 	bl	8006cb0 <__pow5mult>
 80058f0:	4652      	mov	r2, sl
 80058f2:	4601      	mov	r1, r0
 80058f4:	4606      	mov	r6, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f001 f936 	bl	8006b68 <__multiply>
 80058fc:	4680      	mov	r8, r0
 80058fe:	4651      	mov	r1, sl
 8005900:	4628      	mov	r0, r5
 8005902:	f001 f817 	bl	8006934 <_Bfree>
 8005906:	46c2      	mov	sl, r8
 8005908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590a:	1b1a      	subs	r2, r3, r4
 800590c:	d004      	beq.n	8005918 <_dtoa_r+0x7c0>
 800590e:	4651      	mov	r1, sl
 8005910:	4628      	mov	r0, r5
 8005912:	f001 f9cd 	bl	8006cb0 <__pow5mult>
 8005916:	4682      	mov	sl, r0
 8005918:	2101      	movs	r1, #1
 800591a:	4628      	mov	r0, r5
 800591c:	f001 f90e 	bl	8006b3c <__i2b>
 8005920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005922:	4604      	mov	r4, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f340 8087 	ble.w	8005a38 <_dtoa_r+0x8e0>
 800592a:	461a      	mov	r2, r3
 800592c:	4601      	mov	r1, r0
 800592e:	4628      	mov	r0, r5
 8005930:	f001 f9be 	bl	8006cb0 <__pow5mult>
 8005934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005936:	4604      	mov	r4, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	f340 8080 	ble.w	8005a3e <_dtoa_r+0x8e6>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005948:	6918      	ldr	r0, [r3, #16]
 800594a:	f001 f8a9 	bl	8006aa0 <__hi0bits>
 800594e:	f1c0 0020 	rsb	r0, r0, #32
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	4418      	add	r0, r3
 8005956:	f010 001f 	ands.w	r0, r0, #31
 800595a:	f000 8092 	beq.w	8005a82 <_dtoa_r+0x92a>
 800595e:	f1c0 0320 	rsb	r3, r0, #32
 8005962:	2b04      	cmp	r3, #4
 8005964:	f340 808a 	ble.w	8005a7c <_dtoa_r+0x924>
 8005968:	f1c0 001c 	rsb	r0, r0, #28
 800596c:	9b06      	ldr	r3, [sp, #24]
 800596e:	4407      	add	r7, r0
 8005970:	4403      	add	r3, r0
 8005972:	9306      	str	r3, [sp, #24]
 8005974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005976:	4403      	add	r3, r0
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd05      	ble.n	800598c <_dtoa_r+0x834>
 8005980:	4651      	mov	r1, sl
 8005982:	461a      	mov	r2, r3
 8005984:	4628      	mov	r0, r5
 8005986:	f001 f9ed 	bl	8006d64 <__lshift>
 800598a:	4682      	mov	sl, r0
 800598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd05      	ble.n	800599e <_dtoa_r+0x846>
 8005992:	4621      	mov	r1, r4
 8005994:	461a      	mov	r2, r3
 8005996:	4628      	mov	r0, r5
 8005998:	f001 f9e4 	bl	8006d64 <__lshift>
 800599c:	4604      	mov	r4, r0
 800599e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d070      	beq.n	8005a86 <_dtoa_r+0x92e>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4650      	mov	r0, sl
 80059a8:	f001 fa48 	bl	8006e3c <__mcmp>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	da6a      	bge.n	8005a86 <_dtoa_r+0x92e>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4651      	mov	r1, sl
 80059b4:	220a      	movs	r2, #10
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 ffde 	bl	8006978 <__multadd>
 80059bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059be:	4682      	mov	sl, r0
 80059c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8193 	beq.w	8005cf0 <_dtoa_r+0xb98>
 80059ca:	4631      	mov	r1, r6
 80059cc:	2300      	movs	r3, #0
 80059ce:	220a      	movs	r2, #10
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 ffd1 	bl	8006978 <__multadd>
 80059d6:	f1bb 0f00 	cmp.w	fp, #0
 80059da:	4606      	mov	r6, r0
 80059dc:	f300 8093 	bgt.w	8005b06 <_dtoa_r+0x9ae>
 80059e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	dc57      	bgt.n	8005a96 <_dtoa_r+0x93e>
 80059e6:	e08e      	b.n	8005b06 <_dtoa_r+0x9ae>
 80059e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ee:	e756      	b.n	800589e <_dtoa_r+0x746>
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	1e5c      	subs	r4, r3, #1
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	bfb7      	itett	lt
 80059fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059fc:	1b1c      	subge	r4, r3, r4
 80059fe:	1ae2      	sublt	r2, r4, r3
 8005a00:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a02:	bfbe      	ittt	lt
 8005a04:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a06:	189b      	addlt	r3, r3, r2
 8005a08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a0a:	9b02      	ldr	r3, [sp, #8]
 8005a0c:	bfb8      	it	lt
 8005a0e:	2400      	movlt	r4, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfbb      	ittet	lt
 8005a14:	9b06      	ldrlt	r3, [sp, #24]
 8005a16:	9a02      	ldrlt	r2, [sp, #8]
 8005a18:	9f06      	ldrge	r7, [sp, #24]
 8005a1a:	1a9f      	sublt	r7, r3, r2
 8005a1c:	bfac      	ite	ge
 8005a1e:	9b02      	ldrge	r3, [sp, #8]
 8005a20:	2300      	movlt	r3, #0
 8005a22:	e73e      	b.n	80058a2 <_dtoa_r+0x74a>
 8005a24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a26:	9f06      	ldr	r7, [sp, #24]
 8005a28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a2a:	e745      	b.n	80058b8 <_dtoa_r+0x760>
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	40240000 	.word	0x40240000
 8005a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a36:	e76a      	b.n	800590e <_dtoa_r+0x7b6>
 8005a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	dc19      	bgt.n	8005a72 <_dtoa_r+0x91a>
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	b9bb      	cbnz	r3, 8005a72 <_dtoa_r+0x91a>
 8005a42:	9b05      	ldr	r3, [sp, #20]
 8005a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a48:	b99b      	cbnz	r3, 8005a72 <_dtoa_r+0x91a>
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	051b      	lsls	r3, r3, #20
 8005a54:	b183      	cbz	r3, 8005a78 <_dtoa_r+0x920>
 8005a56:	f04f 0801 	mov.w	r8, #1
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	9306      	str	r3, [sp, #24]
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af6a 	bne.w	8005942 <_dtoa_r+0x7ea>
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e76f      	b.n	8005952 <_dtoa_r+0x7fa>
 8005a72:	f04f 0800 	mov.w	r8, #0
 8005a76:	e7f6      	b.n	8005a66 <_dtoa_r+0x90e>
 8005a78:	4698      	mov	r8, r3
 8005a7a:	e7f4      	b.n	8005a66 <_dtoa_r+0x90e>
 8005a7c:	f43f af7d 	beq.w	800597a <_dtoa_r+0x822>
 8005a80:	4618      	mov	r0, r3
 8005a82:	301c      	adds	r0, #28
 8005a84:	e772      	b.n	800596c <_dtoa_r+0x814>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc36      	bgt.n	8005afa <_dtoa_r+0x9a2>
 8005a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	dd33      	ble.n	8005afa <_dtoa_r+0x9a2>
 8005a92:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005a96:	f1bb 0f00 	cmp.w	fp, #0
 8005a9a:	d10d      	bne.n	8005ab8 <_dtoa_r+0x960>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 ff68 	bl	8006978 <__multadd>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4650      	mov	r0, sl
 8005aae:	f001 f9c5 	bl	8006e3c <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f73f adb6 	bgt.w	8005624 <_dtoa_r+0x4cc>
 8005ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aba:	9f08      	ldr	r7, [sp, #32]
 8005abc:	ea6f 0903 	mvn.w	r9, r3
 8005ac0:	f04f 0800 	mov.w	r8, #0
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 ff34 	bl	8006934 <_Bfree>
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	f43f aea4 	beq.w	800581a <_dtoa_r+0x6c2>
 8005ad2:	f1b8 0f00 	cmp.w	r8, #0
 8005ad6:	d005      	beq.n	8005ae4 <_dtoa_r+0x98c>
 8005ad8:	45b0      	cmp	r8, r6
 8005ada:	d003      	beq.n	8005ae4 <_dtoa_r+0x98c>
 8005adc:	4641      	mov	r1, r8
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 ff28 	bl	8006934 <_Bfree>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 ff24 	bl	8006934 <_Bfree>
 8005aec:	e695      	b.n	800581a <_dtoa_r+0x6c2>
 8005aee:	2400      	movs	r4, #0
 8005af0:	4626      	mov	r6, r4
 8005af2:	e7e1      	b.n	8005ab8 <_dtoa_r+0x960>
 8005af4:	46c1      	mov	r9, r8
 8005af6:	4626      	mov	r6, r4
 8005af8:	e594      	b.n	8005624 <_dtoa_r+0x4cc>
 8005afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80fc 	beq.w	8005cfe <_dtoa_r+0xba6>
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	dd05      	ble.n	8005b16 <_dtoa_r+0x9be>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f001 f928 	bl	8006d64 <__lshift>
 8005b14:	4606      	mov	r6, r0
 8005b16:	f1b8 0f00 	cmp.w	r8, #0
 8005b1a:	d05c      	beq.n	8005bd6 <_dtoa_r+0xa7e>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	6871      	ldr	r1, [r6, #4]
 8005b20:	f000 fec8 	bl	80068b4 <_Balloc>
 8005b24:	4607      	mov	r7, r0
 8005b26:	b928      	cbnz	r0, 8005b34 <_dtoa_r+0x9dc>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b2e:	4b7e      	ldr	r3, [pc, #504]	; (8005d28 <_dtoa_r+0xbd0>)
 8005b30:	f7ff bb26 	b.w	8005180 <_dtoa_r+0x28>
 8005b34:	6932      	ldr	r2, [r6, #16]
 8005b36:	f106 010c 	add.w	r1, r6, #12
 8005b3a:	3202      	adds	r2, #2
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	300c      	adds	r0, #12
 8005b40:	f000 feaa 	bl	8006898 <memcpy>
 8005b44:	2201      	movs	r2, #1
 8005b46:	4639      	mov	r1, r7
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f001 f90b 	bl	8006d64 <__lshift>
 8005b4e:	46b0      	mov	r8, r6
 8005b50:	4606      	mov	r6, r0
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	3301      	adds	r3, #1
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	445b      	add	r3, fp
 8005b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b5e:	9b04      	ldr	r3, [sp, #16]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	9309      	str	r3, [sp, #36]	; 0x24
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b70:	f7ff fa64 	bl	800503c <quorem>
 8005b74:	4603      	mov	r3, r0
 8005b76:	4641      	mov	r1, r8
 8005b78:	3330      	adds	r3, #48	; 0x30
 8005b7a:	9004      	str	r0, [sp, #16]
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b80:	f001 f95c 	bl	8006e3c <__mcmp>
 8005b84:	4632      	mov	r2, r6
 8005b86:	9006      	str	r0, [sp, #24]
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f001 f972 	bl	8006e74 <__mdiff>
 8005b90:	68c2      	ldr	r2, [r0, #12]
 8005b92:	4607      	mov	r7, r0
 8005b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b96:	bb02      	cbnz	r2, 8005bda <_dtoa_r+0xa82>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f001 f94e 	bl	8006e3c <__mcmp>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005bac:	f000 fec2 	bl	8006934 <_Bfree>
 8005bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb4:	9f02      	ldr	r7, [sp, #8]
 8005bb6:	ea43 0102 	orr.w	r1, r3, r2
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc0:	d10d      	bne.n	8005bde <_dtoa_r+0xa86>
 8005bc2:	2b39      	cmp	r3, #57	; 0x39
 8005bc4:	d027      	beq.n	8005c16 <_dtoa_r+0xabe>
 8005bc6:	9a06      	ldr	r2, [sp, #24]
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	dd01      	ble.n	8005bd0 <_dtoa_r+0xa78>
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	3331      	adds	r3, #49	; 0x31
 8005bd0:	f88b 3000 	strb.w	r3, [fp]
 8005bd4:	e776      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	e7b9      	b.n	8005b4e <_dtoa_r+0x9f6>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	e7e2      	b.n	8005ba4 <_dtoa_r+0xa4c>
 8005bde:	9906      	ldr	r1, [sp, #24]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	db04      	blt.n	8005bee <_dtoa_r+0xa96>
 8005be4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005be6:	4301      	orrs	r1, r0
 8005be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bea:	4301      	orrs	r1, r0
 8005bec:	d120      	bne.n	8005c30 <_dtoa_r+0xad8>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	ddee      	ble.n	8005bd0 <_dtoa_r+0xa78>
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	9302      	str	r3, [sp, #8]
 8005bfa:	f001 f8b3 	bl	8006d64 <__lshift>
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4682      	mov	sl, r0
 8005c02:	f001 f91b 	bl	8006e3c <__mcmp>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	dc02      	bgt.n	8005c12 <_dtoa_r+0xaba>
 8005c0c:	d1e0      	bne.n	8005bd0 <_dtoa_r+0xa78>
 8005c0e:	07da      	lsls	r2, r3, #31
 8005c10:	d5de      	bpl.n	8005bd0 <_dtoa_r+0xa78>
 8005c12:	2b39      	cmp	r3, #57	; 0x39
 8005c14:	d1da      	bne.n	8005bcc <_dtoa_r+0xa74>
 8005c16:	2339      	movs	r3, #57	; 0x39
 8005c18:	f88b 3000 	strb.w	r3, [fp]
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	461f      	mov	r7, r3
 8005c20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	2a39      	cmp	r2, #57	; 0x39
 8005c28:	d050      	beq.n	8005ccc <_dtoa_r+0xb74>
 8005c2a:	3201      	adds	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e749      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	dd03      	ble.n	8005c3c <_dtoa_r+0xae4>
 8005c34:	2b39      	cmp	r3, #57	; 0x39
 8005c36:	d0ee      	beq.n	8005c16 <_dtoa_r+0xabe>
 8005c38:	3301      	adds	r3, #1
 8005c3a:	e7c9      	b.n	8005bd0 <_dtoa_r+0xa78>
 8005c3c:	9a02      	ldr	r2, [sp, #8]
 8005c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c44:	428a      	cmp	r2, r1
 8005c46:	d02a      	beq.n	8005c9e <_dtoa_r+0xb46>
 8005c48:	4651      	mov	r1, sl
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fe92 	bl	8006978 <__multadd>
 8005c54:	45b0      	cmp	r8, r6
 8005c56:	4682      	mov	sl, r0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	f04f 020a 	mov.w	r2, #10
 8005c60:	4641      	mov	r1, r8
 8005c62:	4628      	mov	r0, r5
 8005c64:	d107      	bne.n	8005c76 <_dtoa_r+0xb1e>
 8005c66:	f000 fe87 	bl	8006978 <__multadd>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	9b02      	ldr	r3, [sp, #8]
 8005c70:	3301      	adds	r3, #1
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	e777      	b.n	8005b66 <_dtoa_r+0xa0e>
 8005c76:	f000 fe7f 	bl	8006978 <__multadd>
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	220a      	movs	r2, #10
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fe78 	bl	8006978 <__multadd>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	e7f0      	b.n	8005c6e <_dtoa_r+0xb16>
 8005c8c:	f1bb 0f00 	cmp.w	fp, #0
 8005c90:	bfcc      	ite	gt
 8005c92:	465f      	movgt	r7, fp
 8005c94:	2701      	movle	r7, #1
 8005c96:	f04f 0800 	mov.w	r8, #0
 8005c9a:	9a08      	ldr	r2, [sp, #32]
 8005c9c:	4417      	add	r7, r2
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	f001 f85d 	bl	8006d64 <__lshift>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4682      	mov	sl, r0
 8005cae:	f001 f8c5 	bl	8006e3c <__mcmp>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	dcb2      	bgt.n	8005c1c <_dtoa_r+0xac4>
 8005cb6:	d102      	bne.n	8005cbe <_dtoa_r+0xb66>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	07db      	lsls	r3, r3, #31
 8005cbc:	d4ae      	bmi.n	8005c1c <_dtoa_r+0xac4>
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	461f      	mov	r7, r3
 8005cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc6:	2a30      	cmp	r2, #48	; 0x30
 8005cc8:	d0fa      	beq.n	8005cc0 <_dtoa_r+0xb68>
 8005cca:	e6fb      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005ccc:	9a08      	ldr	r2, [sp, #32]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d1a5      	bne.n	8005c1e <_dtoa_r+0xac6>
 8005cd2:	2331      	movs	r3, #49	; 0x31
 8005cd4:	f109 0901 	add.w	r9, r9, #1
 8005cd8:	7013      	strb	r3, [r2, #0]
 8005cda:	e6f3      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <_dtoa_r+0xbd4>)
 8005cde:	f7ff baa7 	b.w	8005230 <_dtoa_r+0xd8>
 8005ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f aa80 	bne.w	80051ea <_dtoa_r+0x92>
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <_dtoa_r+0xbd8>)
 8005cec:	f7ff baa0 	b.w	8005230 <_dtoa_r+0xd8>
 8005cf0:	f1bb 0f00 	cmp.w	fp, #0
 8005cf4:	dc03      	bgt.n	8005cfe <_dtoa_r+0xba6>
 8005cf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	f73f aecc 	bgt.w	8005a96 <_dtoa_r+0x93e>
 8005cfe:	9f08      	ldr	r7, [sp, #32]
 8005d00:	4621      	mov	r1, r4
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7ff f99a 	bl	800503c <quorem>
 8005d08:	9a08      	ldr	r2, [sp, #32]
 8005d0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d0e:	f807 3b01 	strb.w	r3, [r7], #1
 8005d12:	1aba      	subs	r2, r7, r2
 8005d14:	4593      	cmp	fp, r2
 8005d16:	ddb9      	ble.n	8005c8c <_dtoa_r+0xb34>
 8005d18:	4651      	mov	r1, sl
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fe2a 	bl	8006978 <__multadd>
 8005d24:	4682      	mov	sl, r0
 8005d26:	e7eb      	b.n	8005d00 <_dtoa_r+0xba8>
 8005d28:	08007a93 	.word	0x08007a93
 8005d2c:	08007998 	.word	0x08007998
 8005d30:	08007a10 	.word	0x08007a10

08005d34 <__sflush_r>:
 8005d34:	898a      	ldrh	r2, [r1, #12]
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	0710      	lsls	r0, r2, #28
 8005d3e:	460c      	mov	r4, r1
 8005d40:	d458      	bmi.n	8005df4 <__sflush_r+0xc0>
 8005d42:	684b      	ldr	r3, [r1, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc05      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dc02      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d0f9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d60:	682f      	ldr	r7, [r5, #0]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	d032      	beq.n	8005dcc <__sflush_r+0x98>
 8005d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	075a      	lsls	r2, r3, #29
 8005d6c:	d505      	bpl.n	8005d7a <__sflush_r+0x46>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d74:	b10b      	cbz	r3, 8005d7a <__sflush_r+0x46>
 8005d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d78:	1ac0      	subs	r0, r0, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d80:	4628      	mov	r0, r5
 8005d82:	6a21      	ldr	r1, [r4, #32]
 8005d84:	47b0      	blx	r6
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	d106      	bne.n	8005d9a <__sflush_r+0x66>
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	291d      	cmp	r1, #29
 8005d90:	d82c      	bhi.n	8005dec <__sflush_r+0xb8>
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <__sflush_r+0x108>)
 8005d94:	40ca      	lsrs	r2, r1
 8005d96:	07d6      	lsls	r6, r2, #31
 8005d98:	d528      	bpl.n	8005dec <__sflush_r+0xb8>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	04d9      	lsls	r1, r3, #19
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	d504      	bpl.n	8005db0 <__sflush_r+0x7c>
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	d101      	bne.n	8005dae <__sflush_r+0x7a>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b903      	cbnz	r3, 8005db0 <__sflush_r+0x7c>
 8005dae:	6560      	str	r0, [r4, #84]	; 0x54
 8005db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db2:	602f      	str	r7, [r5, #0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0ca      	beq.n	8005d4e <__sflush_r+0x1a>
 8005db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d002      	beq.n	8005dc6 <__sflush_r+0x92>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f001 fa3d 	bl	8007240 <_free_r>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dca:	e7c1      	b.n	8005d50 <__sflush_r+0x1c>
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	1c41      	adds	r1, r0, #1
 8005dd6:	d1c7      	bne.n	8005d68 <__sflush_r+0x34>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c4      	beq.n	8005d68 <__sflush_r+0x34>
 8005dde:	2b1d      	cmp	r3, #29
 8005de0:	d001      	beq.n	8005de6 <__sflush_r+0xb2>
 8005de2:	2b16      	cmp	r3, #22
 8005de4:	d101      	bne.n	8005dea <__sflush_r+0xb6>
 8005de6:	602f      	str	r7, [r5, #0]
 8005de8:	e7b1      	b.n	8005d4e <__sflush_r+0x1a>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	e7ad      	b.n	8005d50 <__sflush_r+0x1c>
 8005df4:	690f      	ldr	r7, [r1, #16]
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d0a9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005dfa:	0793      	lsls	r3, r2, #30
 8005dfc:	bf18      	it	ne
 8005dfe:	2300      	movne	r3, #0
 8005e00:	680e      	ldr	r6, [r1, #0]
 8005e02:	bf08      	it	eq
 8005e04:	694b      	ldreq	r3, [r1, #20]
 8005e06:	eba6 0807 	sub.w	r8, r6, r7
 8005e0a:	600f      	str	r7, [r1, #0]
 8005e0c:	608b      	str	r3, [r1, #8]
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	dd9c      	ble.n	8005d4e <__sflush_r+0x1a>
 8005e14:	4643      	mov	r3, r8
 8005e16:	463a      	mov	r2, r7
 8005e18:	4628      	mov	r0, r5
 8005e1a:	6a21      	ldr	r1, [r4, #32]
 8005e1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e1e:	47b0      	blx	r6
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dc06      	bgt.n	8005e32 <__sflush_r+0xfe>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	e78e      	b.n	8005d50 <__sflush_r+0x1c>
 8005e32:	4407      	add	r7, r0
 8005e34:	eba8 0800 	sub.w	r8, r8, r0
 8005e38:	e7e9      	b.n	8005e0e <__sflush_r+0xda>
 8005e3a:	bf00      	nop
 8005e3c:	20400001 	.word	0x20400001

08005e40 <_fflush_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	690b      	ldr	r3, [r1, #16]
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b913      	cbnz	r3, 8005e50 <_fflush_r+0x10>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	b118      	cbz	r0, 8005e5a <_fflush_r+0x1a>
 8005e52:	6983      	ldr	r3, [r0, #24]
 8005e54:	b90b      	cbnz	r3, 8005e5a <_fflush_r+0x1a>
 8005e56:	f000 f887 	bl	8005f68 <__sinit>
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <_fflush_r+0x6c>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d11b      	bne.n	8005e98 <_fflush_r+0x58>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <_fflush_r+0xa>
 8005e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e6c:	07d0      	lsls	r0, r2, #31
 8005e6e:	d404      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e70:	0599      	lsls	r1, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e76:	f000 fc80 	bl	800677a <__retarget_lock_acquire_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f7ff ff59 	bl	8005d34 <__sflush_r>
 8005e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e84:	4605      	mov	r5, r0
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d4e0      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d4dd      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f000 fc73 	bl	800677c <__retarget_lock_release_recursive>
 8005e96:	e7d9      	b.n	8005e4c <_fflush_r+0xc>
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_fflush_r+0x70>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <_fflush_r+0x62>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7df      	b.n	8005e62 <_fflush_r+0x22>
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <_fflush_r+0x74>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7da      	b.n	8005e62 <_fflush_r+0x22>
 8005eac:	08007ac4 	.word	0x08007ac4
 8005eb0:	08007ae4 	.word	0x08007ae4
 8005eb4:	08007aa4 	.word	0x08007aa4

08005eb8 <std>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec6:	6083      	str	r3, [r0, #8]
 8005ec8:	8181      	strh	r1, [r0, #12]
 8005eca:	6643      	str	r3, [r0, #100]	; 0x64
 8005ecc:	81c2      	strh	r2, [r0, #14]
 8005ece:	6183      	str	r3, [r0, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	305c      	adds	r0, #92	; 0x5c
 8005ed6:	f7fd fc93 	bl	8003800 <memset>
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x38>)
 8005edc:	6224      	str	r4, [r4, #32]
 8005ede:	6263      	str	r3, [r4, #36]	; 0x24
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <std+0x3c>)
 8005ee2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <std+0x40>)
 8005ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <std+0x44>)
 8005eea:	6323      	str	r3, [r4, #48]	; 0x30
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	08007671 	.word	0x08007671
 8005ef4:	08007693 	.word	0x08007693
 8005ef8:	080076cb 	.word	0x080076cb
 8005efc:	080076ef 	.word	0x080076ef

08005f00 <_cleanup_r>:
 8005f00:	4901      	ldr	r1, [pc, #4]	; (8005f08 <_cleanup_r+0x8>)
 8005f02:	f000 b8af 	b.w	8006064 <_fwalk_reent>
 8005f06:	bf00      	nop
 8005f08:	08005e41 	.word	0x08005e41

08005f0c <__sfmoreglue>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	2568      	movs	r5, #104	; 0x68
 8005f10:	1e4a      	subs	r2, r1, #1
 8005f12:	4355      	muls	r5, r2
 8005f14:	460e      	mov	r6, r1
 8005f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f1a:	f001 f9dd 	bl	80072d8 <_malloc_r>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b140      	cbz	r0, 8005f34 <__sfmoreglue+0x28>
 8005f22:	2100      	movs	r1, #0
 8005f24:	e9c0 1600 	strd	r1, r6, [r0]
 8005f28:	300c      	adds	r0, #12
 8005f2a:	60a0      	str	r0, [r4, #8]
 8005f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f30:	f7fd fc66 	bl	8003800 <memset>
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__sfp_lock_acquire>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_acquire+0x8>)
 8005f3a:	f000 bc1e 	b.w	800677a <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000338 	.word	0x20000338

08005f44 <__sfp_lock_release>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sfp_lock_release+0x8>)
 8005f46:	f000 bc19 	b.w	800677c <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000338 	.word	0x20000338

08005f50 <__sinit_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_acquire+0x8>)
 8005f52:	f000 bc12 	b.w	800677a <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20000333 	.word	0x20000333

08005f5c <__sinit_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sinit_lock_release+0x8>)
 8005f5e:	f000 bc0d 	b.w	800677c <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20000333 	.word	0x20000333

08005f68 <__sinit>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fff0 	bl	8005f50 <__sinit_lock_acquire>
 8005f70:	69a3      	ldr	r3, [r4, #24]
 8005f72:	b11b      	cbz	r3, 8005f7c <__sinit+0x14>
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f7ff bff0 	b.w	8005f5c <__sinit_lock_release>
 8005f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f80:	6523      	str	r3, [r4, #80]	; 0x50
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <__sinit+0x68>)
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <__sinit+0x6c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	bf08      	it	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	4620      	mov	r0, r4
 8005f92:	bf08      	it	eq
 8005f94:	61a3      	streq	r3, [r4, #24]
 8005f96:	f000 f81f 	bl	8005fd8 <__sfp>
 8005f9a:	6060      	str	r0, [r4, #4]
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f81b 	bl	8005fd8 <__sfp>
 8005fa2:	60a0      	str	r0, [r4, #8]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 f817 	bl	8005fd8 <__sfp>
 8005faa:	2200      	movs	r2, #0
 8005fac:	2104      	movs	r1, #4
 8005fae:	60e0      	str	r0, [r4, #12]
 8005fb0:	6860      	ldr	r0, [r4, #4]
 8005fb2:	f7ff ff81 	bl	8005eb8 <std>
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2109      	movs	r1, #9
 8005fba:	68a0      	ldr	r0, [r4, #8]
 8005fbc:	f7ff ff7c 	bl	8005eb8 <std>
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	68e0      	ldr	r0, [r4, #12]
 8005fc6:	f7ff ff77 	bl	8005eb8 <std>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	61a3      	str	r3, [r4, #24]
 8005fce:	e7d1      	b.n	8005f74 <__sinit+0xc>
 8005fd0:	08007984 	.word	0x08007984
 8005fd4:	08005f01 	.word	0x08005f01

08005fd8 <__sfp>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	4607      	mov	r7, r0
 8005fdc:	f7ff ffac 	bl	8005f38 <__sfp_lock_acquire>
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <__sfp+0x84>)
 8005fe2:	681e      	ldr	r6, [r3, #0]
 8005fe4:	69b3      	ldr	r3, [r6, #24]
 8005fe6:	b913      	cbnz	r3, 8005fee <__sfp+0x16>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffbd 	bl	8005f68 <__sinit>
 8005fee:	3648      	adds	r6, #72	; 0x48
 8005ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	d503      	bpl.n	8006000 <__sfp+0x28>
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	b30b      	cbz	r3, 8006040 <__sfp+0x68>
 8005ffc:	6836      	ldr	r6, [r6, #0]
 8005ffe:	e7f7      	b.n	8005ff0 <__sfp+0x18>
 8006000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006004:	b9d5      	cbnz	r5, 800603c <__sfp+0x64>
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <__sfp+0x88>)
 8006008:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800600c:	60e3      	str	r3, [r4, #12]
 800600e:	6665      	str	r5, [r4, #100]	; 0x64
 8006010:	f000 fbb2 	bl	8006778 <__retarget_lock_init_recursive>
 8006014:	f7ff ff96 	bl	8005f44 <__sfp_lock_release>
 8006018:	2208      	movs	r2, #8
 800601a:	4629      	mov	r1, r5
 800601c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006020:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	61a5      	str	r5, [r4, #24]
 8006028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800602c:	f7fd fbe8 	bl	8003800 <memset>
 8006030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006038:	4620      	mov	r0, r4
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	3468      	adds	r4, #104	; 0x68
 800603e:	e7d9      	b.n	8005ff4 <__sfp+0x1c>
 8006040:	2104      	movs	r1, #4
 8006042:	4638      	mov	r0, r7
 8006044:	f7ff ff62 	bl	8005f0c <__sfmoreglue>
 8006048:	4604      	mov	r4, r0
 800604a:	6030      	str	r0, [r6, #0]
 800604c:	2800      	cmp	r0, #0
 800604e:	d1d5      	bne.n	8005ffc <__sfp+0x24>
 8006050:	f7ff ff78 	bl	8005f44 <__sfp_lock_release>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	e7ee      	b.n	8006038 <__sfp+0x60>
 800605a:	bf00      	nop
 800605c:	08007984 	.word	0x08007984
 8006060:	ffff0001 	.word	0xffff0001

08006064 <_fwalk_reent>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	2700      	movs	r7, #0
 800606e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006076:	f1b9 0901 	subs.w	r9, r9, #1
 800607a:	d505      	bpl.n	8006088 <_fwalk_reent+0x24>
 800607c:	6824      	ldr	r4, [r4, #0]
 800607e:	2c00      	cmp	r4, #0
 8006080:	d1f7      	bne.n	8006072 <_fwalk_reent+0xe>
 8006082:	4638      	mov	r0, r7
 8006084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d907      	bls.n	800609e <_fwalk_reent+0x3a>
 800608e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006092:	3301      	adds	r3, #1
 8006094:	d003      	beq.n	800609e <_fwalk_reent+0x3a>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	47c0      	blx	r8
 800609c:	4307      	orrs	r7, r0
 800609e:	3568      	adds	r5, #104	; 0x68
 80060a0:	e7e9      	b.n	8006076 <_fwalk_reent+0x12>

080060a2 <rshift>:
 80060a2:	6903      	ldr	r3, [r0, #16]
 80060a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060ac:	f100 0414 	add.w	r4, r0, #20
 80060b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060b4:	dd46      	ble.n	8006144 <rshift+0xa2>
 80060b6:	f011 011f 	ands.w	r1, r1, #31
 80060ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060c2:	d10c      	bne.n	80060de <rshift+0x3c>
 80060c4:	4629      	mov	r1, r5
 80060c6:	f100 0710 	add.w	r7, r0, #16
 80060ca:	42b1      	cmp	r1, r6
 80060cc:	d335      	bcc.n	800613a <rshift+0x98>
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	1eea      	subs	r2, r5, #3
 80060d4:	4296      	cmp	r6, r2
 80060d6:	bf38      	it	cc
 80060d8:	2300      	movcc	r3, #0
 80060da:	4423      	add	r3, r4
 80060dc:	e015      	b.n	800610a <rshift+0x68>
 80060de:	46a1      	mov	r9, r4
 80060e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80060e4:	f1c1 0820 	rsb	r8, r1, #32
 80060e8:	40cf      	lsrs	r7, r1
 80060ea:	f105 0e04 	add.w	lr, r5, #4
 80060ee:	4576      	cmp	r6, lr
 80060f0:	46f4      	mov	ip, lr
 80060f2:	d816      	bhi.n	8006122 <rshift+0x80>
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	009a      	lsls	r2, r3, #2
 80060f8:	3a04      	subs	r2, #4
 80060fa:	3501      	adds	r5, #1
 80060fc:	42ae      	cmp	r6, r5
 80060fe:	bf38      	it	cc
 8006100:	2200      	movcc	r2, #0
 8006102:	18a3      	adds	r3, r4, r2
 8006104:	50a7      	str	r7, [r4, r2]
 8006106:	b107      	cbz	r7, 800610a <rshift+0x68>
 8006108:	3304      	adds	r3, #4
 800610a:	42a3      	cmp	r3, r4
 800610c:	eba3 0204 	sub.w	r2, r3, r4
 8006110:	bf08      	it	eq
 8006112:	2300      	moveq	r3, #0
 8006114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006118:	6102      	str	r2, [r0, #16]
 800611a:	bf08      	it	eq
 800611c:	6143      	streq	r3, [r0, #20]
 800611e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006122:	f8dc c000 	ldr.w	ip, [ip]
 8006126:	fa0c fc08 	lsl.w	ip, ip, r8
 800612a:	ea4c 0707 	orr.w	r7, ip, r7
 800612e:	f849 7b04 	str.w	r7, [r9], #4
 8006132:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006136:	40cf      	lsrs	r7, r1
 8006138:	e7d9      	b.n	80060ee <rshift+0x4c>
 800613a:	f851 cb04 	ldr.w	ip, [r1], #4
 800613e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006142:	e7c2      	b.n	80060ca <rshift+0x28>
 8006144:	4623      	mov	r3, r4
 8006146:	e7e0      	b.n	800610a <rshift+0x68>

08006148 <__hexdig_fun>:
 8006148:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800614c:	2b09      	cmp	r3, #9
 800614e:	d802      	bhi.n	8006156 <__hexdig_fun+0xe>
 8006150:	3820      	subs	r0, #32
 8006152:	b2c0      	uxtb	r0, r0
 8006154:	4770      	bx	lr
 8006156:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800615a:	2b05      	cmp	r3, #5
 800615c:	d801      	bhi.n	8006162 <__hexdig_fun+0x1a>
 800615e:	3847      	subs	r0, #71	; 0x47
 8006160:	e7f7      	b.n	8006152 <__hexdig_fun+0xa>
 8006162:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006166:	2b05      	cmp	r3, #5
 8006168:	d801      	bhi.n	800616e <__hexdig_fun+0x26>
 800616a:	3827      	subs	r0, #39	; 0x27
 800616c:	e7f1      	b.n	8006152 <__hexdig_fun+0xa>
 800616e:	2000      	movs	r0, #0
 8006170:	4770      	bx	lr
	...

08006174 <__gethex>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	b08b      	sub	sp, #44	; 0x2c
 800617a:	9306      	str	r3, [sp, #24]
 800617c:	4bb9      	ldr	r3, [pc, #740]	; (8006464 <__gethex+0x2f0>)
 800617e:	9002      	str	r0, [sp, #8]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	468b      	mov	fp, r1
 8006184:	4618      	mov	r0, r3
 8006186:	4690      	mov	r8, r2
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	f7f9 ffe1 	bl	8000150 <strlen>
 800618e:	4682      	mov	sl, r0
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	f8db 2000 	ldr.w	r2, [fp]
 8006196:	4403      	add	r3, r0
 8006198:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800619c:	9307      	str	r3, [sp, #28]
 800619e:	1c93      	adds	r3, r2, #2
 80061a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061a8:	32fe      	adds	r2, #254	; 0xfe
 80061aa:	18d1      	adds	r1, r2, r3
 80061ac:	461f      	mov	r7, r3
 80061ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061b2:	9101      	str	r1, [sp, #4]
 80061b4:	2830      	cmp	r0, #48	; 0x30
 80061b6:	d0f8      	beq.n	80061aa <__gethex+0x36>
 80061b8:	f7ff ffc6 	bl	8006148 <__hexdig_fun>
 80061bc:	4604      	mov	r4, r0
 80061be:	2800      	cmp	r0, #0
 80061c0:	d13a      	bne.n	8006238 <__gethex+0xc4>
 80061c2:	4652      	mov	r2, sl
 80061c4:	4638      	mov	r0, r7
 80061c6:	9903      	ldr	r1, [sp, #12]
 80061c8:	f001 fa95 	bl	80076f6 <strncmp>
 80061cc:	4605      	mov	r5, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d166      	bne.n	80062a0 <__gethex+0x12c>
 80061d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80061d6:	eb07 060a 	add.w	r6, r7, sl
 80061da:	f7ff ffb5 	bl	8006148 <__hexdig_fun>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d060      	beq.n	80062a4 <__gethex+0x130>
 80061e2:	4633      	mov	r3, r6
 80061e4:	7818      	ldrb	r0, [r3, #0]
 80061e6:	461f      	mov	r7, r3
 80061e8:	2830      	cmp	r0, #48	; 0x30
 80061ea:	f103 0301 	add.w	r3, r3, #1
 80061ee:	d0f9      	beq.n	80061e4 <__gethex+0x70>
 80061f0:	f7ff ffaa 	bl	8006148 <__hexdig_fun>
 80061f4:	2301      	movs	r3, #1
 80061f6:	fab0 f480 	clz	r4, r0
 80061fa:	4635      	mov	r5, r6
 80061fc:	0964      	lsrs	r4, r4, #5
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	463a      	mov	r2, r7
 8006202:	4616      	mov	r6, r2
 8006204:	7830      	ldrb	r0, [r6, #0]
 8006206:	3201      	adds	r2, #1
 8006208:	f7ff ff9e 	bl	8006148 <__hexdig_fun>
 800620c:	2800      	cmp	r0, #0
 800620e:	d1f8      	bne.n	8006202 <__gethex+0x8e>
 8006210:	4652      	mov	r2, sl
 8006212:	4630      	mov	r0, r6
 8006214:	9903      	ldr	r1, [sp, #12]
 8006216:	f001 fa6e 	bl	80076f6 <strncmp>
 800621a:	b980      	cbnz	r0, 800623e <__gethex+0xca>
 800621c:	b94d      	cbnz	r5, 8006232 <__gethex+0xbe>
 800621e:	eb06 050a 	add.w	r5, r6, sl
 8006222:	462a      	mov	r2, r5
 8006224:	4616      	mov	r6, r2
 8006226:	7830      	ldrb	r0, [r6, #0]
 8006228:	3201      	adds	r2, #1
 800622a:	f7ff ff8d 	bl	8006148 <__hexdig_fun>
 800622e:	2800      	cmp	r0, #0
 8006230:	d1f8      	bne.n	8006224 <__gethex+0xb0>
 8006232:	1bad      	subs	r5, r5, r6
 8006234:	00ad      	lsls	r5, r5, #2
 8006236:	e004      	b.n	8006242 <__gethex+0xce>
 8006238:	2400      	movs	r4, #0
 800623a:	4625      	mov	r5, r4
 800623c:	e7e0      	b.n	8006200 <__gethex+0x8c>
 800623e:	2d00      	cmp	r5, #0
 8006240:	d1f7      	bne.n	8006232 <__gethex+0xbe>
 8006242:	7833      	ldrb	r3, [r6, #0]
 8006244:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006248:	2b50      	cmp	r3, #80	; 0x50
 800624a:	d139      	bne.n	80062c0 <__gethex+0x14c>
 800624c:	7873      	ldrb	r3, [r6, #1]
 800624e:	2b2b      	cmp	r3, #43	; 0x2b
 8006250:	d02a      	beq.n	80062a8 <__gethex+0x134>
 8006252:	2b2d      	cmp	r3, #45	; 0x2d
 8006254:	d02c      	beq.n	80062b0 <__gethex+0x13c>
 8006256:	f04f 0900 	mov.w	r9, #0
 800625a:	1c71      	adds	r1, r6, #1
 800625c:	7808      	ldrb	r0, [r1, #0]
 800625e:	f7ff ff73 	bl	8006148 <__hexdig_fun>
 8006262:	1e43      	subs	r3, r0, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b18      	cmp	r3, #24
 8006268:	d82a      	bhi.n	80062c0 <__gethex+0x14c>
 800626a:	f1a0 0210 	sub.w	r2, r0, #16
 800626e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006272:	f7ff ff69 	bl	8006148 <__hexdig_fun>
 8006276:	1e43      	subs	r3, r0, #1
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b18      	cmp	r3, #24
 800627c:	d91b      	bls.n	80062b6 <__gethex+0x142>
 800627e:	f1b9 0f00 	cmp.w	r9, #0
 8006282:	d000      	beq.n	8006286 <__gethex+0x112>
 8006284:	4252      	negs	r2, r2
 8006286:	4415      	add	r5, r2
 8006288:	f8cb 1000 	str.w	r1, [fp]
 800628c:	b1d4      	cbz	r4, 80062c4 <__gethex+0x150>
 800628e:	9b01      	ldr	r3, [sp, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf14      	ite	ne
 8006294:	2700      	movne	r7, #0
 8006296:	2706      	moveq	r7, #6
 8006298:	4638      	mov	r0, r7
 800629a:	b00b      	add	sp, #44	; 0x2c
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	463e      	mov	r6, r7
 80062a2:	4625      	mov	r5, r4
 80062a4:	2401      	movs	r4, #1
 80062a6:	e7cc      	b.n	8006242 <__gethex+0xce>
 80062a8:	f04f 0900 	mov.w	r9, #0
 80062ac:	1cb1      	adds	r1, r6, #2
 80062ae:	e7d5      	b.n	800625c <__gethex+0xe8>
 80062b0:	f04f 0901 	mov.w	r9, #1
 80062b4:	e7fa      	b.n	80062ac <__gethex+0x138>
 80062b6:	230a      	movs	r3, #10
 80062b8:	fb03 0202 	mla	r2, r3, r2, r0
 80062bc:	3a10      	subs	r2, #16
 80062be:	e7d6      	b.n	800626e <__gethex+0xfa>
 80062c0:	4631      	mov	r1, r6
 80062c2:	e7e1      	b.n	8006288 <__gethex+0x114>
 80062c4:	4621      	mov	r1, r4
 80062c6:	1bf3      	subs	r3, r6, r7
 80062c8:	3b01      	subs	r3, #1
 80062ca:	2b07      	cmp	r3, #7
 80062cc:	dc0a      	bgt.n	80062e4 <__gethex+0x170>
 80062ce:	9802      	ldr	r0, [sp, #8]
 80062d0:	f000 faf0 	bl	80068b4 <_Balloc>
 80062d4:	4604      	mov	r4, r0
 80062d6:	b940      	cbnz	r0, 80062ea <__gethex+0x176>
 80062d8:	4602      	mov	r2, r0
 80062da:	21de      	movs	r1, #222	; 0xde
 80062dc:	4b62      	ldr	r3, [pc, #392]	; (8006468 <__gethex+0x2f4>)
 80062de:	4863      	ldr	r0, [pc, #396]	; (800646c <__gethex+0x2f8>)
 80062e0:	f001 fa3a 	bl	8007758 <__assert_func>
 80062e4:	3101      	adds	r1, #1
 80062e6:	105b      	asrs	r3, r3, #1
 80062e8:	e7ef      	b.n	80062ca <__gethex+0x156>
 80062ea:	f04f 0b00 	mov.w	fp, #0
 80062ee:	f100 0914 	add.w	r9, r0, #20
 80062f2:	f1ca 0301 	rsb	r3, sl, #1
 80062f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80062fa:	f8cd b004 	str.w	fp, [sp, #4]
 80062fe:	9308      	str	r3, [sp, #32]
 8006300:	42b7      	cmp	r7, r6
 8006302:	d33f      	bcc.n	8006384 <__gethex+0x210>
 8006304:	9f04      	ldr	r7, [sp, #16]
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	f847 3b04 	str.w	r3, [r7], #4
 800630c:	eba7 0709 	sub.w	r7, r7, r9
 8006310:	10bf      	asrs	r7, r7, #2
 8006312:	6127      	str	r7, [r4, #16]
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fbc3 	bl	8006aa0 <__hi0bits>
 800631a:	017f      	lsls	r7, r7, #5
 800631c:	f8d8 6000 	ldr.w	r6, [r8]
 8006320:	1a3f      	subs	r7, r7, r0
 8006322:	42b7      	cmp	r7, r6
 8006324:	dd62      	ble.n	80063ec <__gethex+0x278>
 8006326:	1bbf      	subs	r7, r7, r6
 8006328:	4639      	mov	r1, r7
 800632a:	4620      	mov	r0, r4
 800632c:	f000 ff59 	bl	80071e2 <__any_on>
 8006330:	4682      	mov	sl, r0
 8006332:	b1a8      	cbz	r0, 8006360 <__gethex+0x1ec>
 8006334:	f04f 0a01 	mov.w	sl, #1
 8006338:	1e7b      	subs	r3, r7, #1
 800633a:	1159      	asrs	r1, r3, #5
 800633c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006340:	f003 021f 	and.w	r2, r3, #31
 8006344:	fa0a f202 	lsl.w	r2, sl, r2
 8006348:	420a      	tst	r2, r1
 800634a:	d009      	beq.n	8006360 <__gethex+0x1ec>
 800634c:	4553      	cmp	r3, sl
 800634e:	dd05      	ble.n	800635c <__gethex+0x1e8>
 8006350:	4620      	mov	r0, r4
 8006352:	1eb9      	subs	r1, r7, #2
 8006354:	f000 ff45 	bl	80071e2 <__any_on>
 8006358:	2800      	cmp	r0, #0
 800635a:	d144      	bne.n	80063e6 <__gethex+0x272>
 800635c:	f04f 0a02 	mov.w	sl, #2
 8006360:	4639      	mov	r1, r7
 8006362:	4620      	mov	r0, r4
 8006364:	f7ff fe9d 	bl	80060a2 <rshift>
 8006368:	443d      	add	r5, r7
 800636a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800636e:	42ab      	cmp	r3, r5
 8006370:	da4a      	bge.n	8006408 <__gethex+0x294>
 8006372:	4621      	mov	r1, r4
 8006374:	9802      	ldr	r0, [sp, #8]
 8006376:	f000 fadd 	bl	8006934 <_Bfree>
 800637a:	2300      	movs	r3, #0
 800637c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800637e:	27a3      	movs	r7, #163	; 0xa3
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e789      	b.n	8006298 <__gethex+0x124>
 8006384:	1e73      	subs	r3, r6, #1
 8006386:	9a07      	ldr	r2, [sp, #28]
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800638e:	4293      	cmp	r3, r2
 8006390:	d019      	beq.n	80063c6 <__gethex+0x252>
 8006392:	f1bb 0f20 	cmp.w	fp, #32
 8006396:	d107      	bne.n	80063a8 <__gethex+0x234>
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	9a01      	ldr	r2, [sp, #4]
 800639c:	f843 2b04 	str.w	r2, [r3], #4
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	2300      	movs	r3, #0
 80063a4:	469b      	mov	fp, r3
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063ac:	f7ff fecc 	bl	8006148 <__hexdig_fun>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	f000 000f 	and.w	r0, r0, #15
 80063b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80063ba:	4303      	orrs	r3, r0
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	f10b 0b04 	add.w	fp, fp, #4
 80063c2:	9b05      	ldr	r3, [sp, #20]
 80063c4:	e00d      	b.n	80063e2 <__gethex+0x26e>
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	9a08      	ldr	r2, [sp, #32]
 80063ca:	4413      	add	r3, r2
 80063cc:	42bb      	cmp	r3, r7
 80063ce:	d3e0      	bcc.n	8006392 <__gethex+0x21e>
 80063d0:	4618      	mov	r0, r3
 80063d2:	4652      	mov	r2, sl
 80063d4:	9903      	ldr	r1, [sp, #12]
 80063d6:	9309      	str	r3, [sp, #36]	; 0x24
 80063d8:	f001 f98d 	bl	80076f6 <strncmp>
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	2800      	cmp	r0, #0
 80063e0:	d1d7      	bne.n	8006392 <__gethex+0x21e>
 80063e2:	461e      	mov	r6, r3
 80063e4:	e78c      	b.n	8006300 <__gethex+0x18c>
 80063e6:	f04f 0a03 	mov.w	sl, #3
 80063ea:	e7b9      	b.n	8006360 <__gethex+0x1ec>
 80063ec:	da09      	bge.n	8006402 <__gethex+0x28e>
 80063ee:	1bf7      	subs	r7, r6, r7
 80063f0:	4621      	mov	r1, r4
 80063f2:	463a      	mov	r2, r7
 80063f4:	9802      	ldr	r0, [sp, #8]
 80063f6:	f000 fcb5 	bl	8006d64 <__lshift>
 80063fa:	4604      	mov	r4, r0
 80063fc:	1bed      	subs	r5, r5, r7
 80063fe:	f100 0914 	add.w	r9, r0, #20
 8006402:	f04f 0a00 	mov.w	sl, #0
 8006406:	e7b0      	b.n	800636a <__gethex+0x1f6>
 8006408:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800640c:	42a8      	cmp	r0, r5
 800640e:	dd71      	ble.n	80064f4 <__gethex+0x380>
 8006410:	1b45      	subs	r5, r0, r5
 8006412:	42ae      	cmp	r6, r5
 8006414:	dc34      	bgt.n	8006480 <__gethex+0x30c>
 8006416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d028      	beq.n	8006470 <__gethex+0x2fc>
 800641e:	2b03      	cmp	r3, #3
 8006420:	d02a      	beq.n	8006478 <__gethex+0x304>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d115      	bne.n	8006452 <__gethex+0x2de>
 8006426:	42ae      	cmp	r6, r5
 8006428:	d113      	bne.n	8006452 <__gethex+0x2de>
 800642a:	2e01      	cmp	r6, #1
 800642c:	d10b      	bne.n	8006446 <__gethex+0x2d2>
 800642e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006432:	9a06      	ldr	r2, [sp, #24]
 8006434:	2762      	movs	r7, #98	; 0x62
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	2301      	movs	r3, #1
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	f8c9 3000 	str.w	r3, [r9]
 8006440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006442:	601c      	str	r4, [r3, #0]
 8006444:	e728      	b.n	8006298 <__gethex+0x124>
 8006446:	4620      	mov	r0, r4
 8006448:	1e71      	subs	r1, r6, #1
 800644a:	f000 feca 	bl	80071e2 <__any_on>
 800644e:	2800      	cmp	r0, #0
 8006450:	d1ed      	bne.n	800642e <__gethex+0x2ba>
 8006452:	4621      	mov	r1, r4
 8006454:	9802      	ldr	r0, [sp, #8]
 8006456:	f000 fa6d 	bl	8006934 <_Bfree>
 800645a:	2300      	movs	r3, #0
 800645c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800645e:	2750      	movs	r7, #80	; 0x50
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e719      	b.n	8006298 <__gethex+0x124>
 8006464:	08007b70 	.word	0x08007b70
 8006468:	08007a93 	.word	0x08007a93
 800646c:	08007b04 	.word	0x08007b04
 8006470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ed      	bne.n	8006452 <__gethex+0x2de>
 8006476:	e7da      	b.n	800642e <__gethex+0x2ba>
 8006478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1d7      	bne.n	800642e <__gethex+0x2ba>
 800647e:	e7e8      	b.n	8006452 <__gethex+0x2de>
 8006480:	1e6f      	subs	r7, r5, #1
 8006482:	f1ba 0f00 	cmp.w	sl, #0
 8006486:	d132      	bne.n	80064ee <__gethex+0x37a>
 8006488:	b127      	cbz	r7, 8006494 <__gethex+0x320>
 800648a:	4639      	mov	r1, r7
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fea8 	bl	80071e2 <__any_on>
 8006492:	4682      	mov	sl, r0
 8006494:	2101      	movs	r1, #1
 8006496:	117b      	asrs	r3, r7, #5
 8006498:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800649c:	f007 071f 	and.w	r7, r7, #31
 80064a0:	fa01 f707 	lsl.w	r7, r1, r7
 80064a4:	421f      	tst	r7, r3
 80064a6:	f04f 0702 	mov.w	r7, #2
 80064aa:	4629      	mov	r1, r5
 80064ac:	4620      	mov	r0, r4
 80064ae:	bf18      	it	ne
 80064b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80064b4:	1b76      	subs	r6, r6, r5
 80064b6:	f7ff fdf4 	bl	80060a2 <rshift>
 80064ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064be:	f1ba 0f00 	cmp.w	sl, #0
 80064c2:	d048      	beq.n	8006556 <__gethex+0x3e2>
 80064c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d015      	beq.n	80064f8 <__gethex+0x384>
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d017      	beq.n	8006500 <__gethex+0x38c>
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d109      	bne.n	80064e8 <__gethex+0x374>
 80064d4:	f01a 0f02 	tst.w	sl, #2
 80064d8:	d006      	beq.n	80064e8 <__gethex+0x374>
 80064da:	f8d9 0000 	ldr.w	r0, [r9]
 80064de:	ea4a 0a00 	orr.w	sl, sl, r0
 80064e2:	f01a 0f01 	tst.w	sl, #1
 80064e6:	d10e      	bne.n	8006506 <__gethex+0x392>
 80064e8:	f047 0710 	orr.w	r7, r7, #16
 80064ec:	e033      	b.n	8006556 <__gethex+0x3e2>
 80064ee:	f04f 0a01 	mov.w	sl, #1
 80064f2:	e7cf      	b.n	8006494 <__gethex+0x320>
 80064f4:	2701      	movs	r7, #1
 80064f6:	e7e2      	b.n	80064be <__gethex+0x34a>
 80064f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fa:	f1c3 0301 	rsb	r3, r3, #1
 80064fe:	9315      	str	r3, [sp, #84]	; 0x54
 8006500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <__gethex+0x374>
 8006506:	f04f 0c00 	mov.w	ip, #0
 800650a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800650e:	f104 0314 	add.w	r3, r4, #20
 8006512:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006516:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800651a:	4618      	mov	r0, r3
 800651c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006520:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006524:	d01c      	beq.n	8006560 <__gethex+0x3ec>
 8006526:	3201      	adds	r2, #1
 8006528:	6002      	str	r2, [r0, #0]
 800652a:	2f02      	cmp	r7, #2
 800652c:	f104 0314 	add.w	r3, r4, #20
 8006530:	d13d      	bne.n	80065ae <__gethex+0x43a>
 8006532:	f8d8 2000 	ldr.w	r2, [r8]
 8006536:	3a01      	subs	r2, #1
 8006538:	42b2      	cmp	r2, r6
 800653a:	d10a      	bne.n	8006552 <__gethex+0x3de>
 800653c:	2201      	movs	r2, #1
 800653e:	1171      	asrs	r1, r6, #5
 8006540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006544:	f006 061f 	and.w	r6, r6, #31
 8006548:	fa02 f606 	lsl.w	r6, r2, r6
 800654c:	421e      	tst	r6, r3
 800654e:	bf18      	it	ne
 8006550:	4617      	movne	r7, r2
 8006552:	f047 0720 	orr.w	r7, r7, #32
 8006556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006558:	601c      	str	r4, [r3, #0]
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	601d      	str	r5, [r3, #0]
 800655e:	e69b      	b.n	8006298 <__gethex+0x124>
 8006560:	4299      	cmp	r1, r3
 8006562:	f843 cc04 	str.w	ip, [r3, #-4]
 8006566:	d8d8      	bhi.n	800651a <__gethex+0x3a6>
 8006568:	68a3      	ldr	r3, [r4, #8]
 800656a:	459b      	cmp	fp, r3
 800656c:	db17      	blt.n	800659e <__gethex+0x42a>
 800656e:	6861      	ldr	r1, [r4, #4]
 8006570:	9802      	ldr	r0, [sp, #8]
 8006572:	3101      	adds	r1, #1
 8006574:	f000 f99e 	bl	80068b4 <_Balloc>
 8006578:	4681      	mov	r9, r0
 800657a:	b918      	cbnz	r0, 8006584 <__gethex+0x410>
 800657c:	4602      	mov	r2, r0
 800657e:	2184      	movs	r1, #132	; 0x84
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <__gethex+0x474>)
 8006582:	e6ac      	b.n	80062de <__gethex+0x16a>
 8006584:	6922      	ldr	r2, [r4, #16]
 8006586:	f104 010c 	add.w	r1, r4, #12
 800658a:	3202      	adds	r2, #2
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	300c      	adds	r0, #12
 8006590:	f000 f982 	bl	8006898 <memcpy>
 8006594:	4621      	mov	r1, r4
 8006596:	9802      	ldr	r0, [sp, #8]
 8006598:	f000 f9cc 	bl	8006934 <_Bfree>
 800659c:	464c      	mov	r4, r9
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	6122      	str	r2, [r4, #16]
 80065a4:	2201      	movs	r2, #1
 80065a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065aa:	615a      	str	r2, [r3, #20]
 80065ac:	e7bd      	b.n	800652a <__gethex+0x3b6>
 80065ae:	6922      	ldr	r2, [r4, #16]
 80065b0:	455a      	cmp	r2, fp
 80065b2:	dd0b      	ble.n	80065cc <__gethex+0x458>
 80065b4:	2101      	movs	r1, #1
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fd73 	bl	80060a2 <rshift>
 80065bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065c0:	3501      	adds	r5, #1
 80065c2:	42ab      	cmp	r3, r5
 80065c4:	f6ff aed5 	blt.w	8006372 <__gethex+0x1fe>
 80065c8:	2701      	movs	r7, #1
 80065ca:	e7c2      	b.n	8006552 <__gethex+0x3de>
 80065cc:	f016 061f 	ands.w	r6, r6, #31
 80065d0:	d0fa      	beq.n	80065c8 <__gethex+0x454>
 80065d2:	449a      	add	sl, r3
 80065d4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80065d8:	f000 fa62 	bl	8006aa0 <__hi0bits>
 80065dc:	f1c6 0620 	rsb	r6, r6, #32
 80065e0:	42b0      	cmp	r0, r6
 80065e2:	dbe7      	blt.n	80065b4 <__gethex+0x440>
 80065e4:	e7f0      	b.n	80065c8 <__gethex+0x454>
 80065e6:	bf00      	nop
 80065e8:	08007a93 	.word	0x08007a93

080065ec <L_shift>:
 80065ec:	f1c2 0208 	rsb	r2, r2, #8
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	f1c2 0620 	rsb	r6, r2, #32
 80065f8:	6843      	ldr	r3, [r0, #4]
 80065fa:	6804      	ldr	r4, [r0, #0]
 80065fc:	fa03 f506 	lsl.w	r5, r3, r6
 8006600:	432c      	orrs	r4, r5
 8006602:	40d3      	lsrs	r3, r2
 8006604:	6004      	str	r4, [r0, #0]
 8006606:	f840 3f04 	str.w	r3, [r0, #4]!
 800660a:	4288      	cmp	r0, r1
 800660c:	d3f4      	bcc.n	80065f8 <L_shift+0xc>
 800660e:	bd70      	pop	{r4, r5, r6, pc}

08006610 <__match>:
 8006610:	b530      	push	{r4, r5, lr}
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661a:	b914      	cbnz	r4, 8006622 <__match+0x12>
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	2001      	movs	r0, #1
 8006620:	bd30      	pop	{r4, r5, pc}
 8006622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006626:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800662a:	2d19      	cmp	r5, #25
 800662c:	bf98      	it	ls
 800662e:	3220      	addls	r2, #32
 8006630:	42a2      	cmp	r2, r4
 8006632:	d0f0      	beq.n	8006616 <__match+0x6>
 8006634:	2000      	movs	r0, #0
 8006636:	e7f3      	b.n	8006620 <__match+0x10>

08006638 <__hexnan>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	2500      	movs	r5, #0
 800663e:	680b      	ldr	r3, [r1, #0]
 8006640:	4682      	mov	sl, r0
 8006642:	115e      	asrs	r6, r3, #5
 8006644:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006648:	f013 031f 	ands.w	r3, r3, #31
 800664c:	bf18      	it	ne
 800664e:	3604      	addne	r6, #4
 8006650:	1f37      	subs	r7, r6, #4
 8006652:	4690      	mov	r8, r2
 8006654:	46b9      	mov	r9, r7
 8006656:	463c      	mov	r4, r7
 8006658:	46ab      	mov	fp, r5
 800665a:	b087      	sub	sp, #28
 800665c:	6801      	ldr	r1, [r0, #0]
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	f846 5c04 	str.w	r5, [r6, #-4]
 8006664:	9502      	str	r5, [sp, #8]
 8006666:	784a      	ldrb	r2, [r1, #1]
 8006668:	1c4b      	adds	r3, r1, #1
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	b342      	cbz	r2, 80066c0 <__hexnan+0x88>
 800666e:	4610      	mov	r0, r2
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	9204      	str	r2, [sp, #16]
 8006674:	f7ff fd68 	bl	8006148 <__hexdig_fun>
 8006678:	2800      	cmp	r0, #0
 800667a:	d14f      	bne.n	800671c <__hexnan+0xe4>
 800667c:	9a04      	ldr	r2, [sp, #16]
 800667e:	9905      	ldr	r1, [sp, #20]
 8006680:	2a20      	cmp	r2, #32
 8006682:	d818      	bhi.n	80066b6 <__hexnan+0x7e>
 8006684:	9b02      	ldr	r3, [sp, #8]
 8006686:	459b      	cmp	fp, r3
 8006688:	dd13      	ble.n	80066b2 <__hexnan+0x7a>
 800668a:	454c      	cmp	r4, r9
 800668c:	d206      	bcs.n	800669c <__hexnan+0x64>
 800668e:	2d07      	cmp	r5, #7
 8006690:	dc04      	bgt.n	800669c <__hexnan+0x64>
 8006692:	462a      	mov	r2, r5
 8006694:	4649      	mov	r1, r9
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ffa8 	bl	80065ec <L_shift>
 800669c:	4544      	cmp	r4, r8
 800669e:	d950      	bls.n	8006742 <__hexnan+0x10a>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f1a4 0904 	sub.w	r9, r4, #4
 80066a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066aa:	461d      	mov	r5, r3
 80066ac:	464c      	mov	r4, r9
 80066ae:	f8cd b008 	str.w	fp, [sp, #8]
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	e7d7      	b.n	8006666 <__hexnan+0x2e>
 80066b6:	2a29      	cmp	r2, #41	; 0x29
 80066b8:	d156      	bne.n	8006768 <__hexnan+0x130>
 80066ba:	3102      	adds	r1, #2
 80066bc:	f8ca 1000 	str.w	r1, [sl]
 80066c0:	f1bb 0f00 	cmp.w	fp, #0
 80066c4:	d050      	beq.n	8006768 <__hexnan+0x130>
 80066c6:	454c      	cmp	r4, r9
 80066c8:	d206      	bcs.n	80066d8 <__hexnan+0xa0>
 80066ca:	2d07      	cmp	r5, #7
 80066cc:	dc04      	bgt.n	80066d8 <__hexnan+0xa0>
 80066ce:	462a      	mov	r2, r5
 80066d0:	4649      	mov	r1, r9
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff ff8a 	bl	80065ec <L_shift>
 80066d8:	4544      	cmp	r4, r8
 80066da:	d934      	bls.n	8006746 <__hexnan+0x10e>
 80066dc:	4623      	mov	r3, r4
 80066de:	f1a8 0204 	sub.w	r2, r8, #4
 80066e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80066e6:	429f      	cmp	r7, r3
 80066e8:	f842 1f04 	str.w	r1, [r2, #4]!
 80066ec:	d2f9      	bcs.n	80066e2 <__hexnan+0xaa>
 80066ee:	1b3b      	subs	r3, r7, r4
 80066f0:	f023 0303 	bic.w	r3, r3, #3
 80066f4:	3304      	adds	r3, #4
 80066f6:	3401      	adds	r4, #1
 80066f8:	3e03      	subs	r6, #3
 80066fa:	42b4      	cmp	r4, r6
 80066fc:	bf88      	it	hi
 80066fe:	2304      	movhi	r3, #4
 8006700:	2200      	movs	r2, #0
 8006702:	4443      	add	r3, r8
 8006704:	f843 2b04 	str.w	r2, [r3], #4
 8006708:	429f      	cmp	r7, r3
 800670a:	d2fb      	bcs.n	8006704 <__hexnan+0xcc>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	b91b      	cbnz	r3, 8006718 <__hexnan+0xe0>
 8006710:	4547      	cmp	r7, r8
 8006712:	d127      	bne.n	8006764 <__hexnan+0x12c>
 8006714:	2301      	movs	r3, #1
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	2005      	movs	r0, #5
 800671a:	e026      	b.n	800676a <__hexnan+0x132>
 800671c:	3501      	adds	r5, #1
 800671e:	2d08      	cmp	r5, #8
 8006720:	f10b 0b01 	add.w	fp, fp, #1
 8006724:	dd06      	ble.n	8006734 <__hexnan+0xfc>
 8006726:	4544      	cmp	r4, r8
 8006728:	d9c3      	bls.n	80066b2 <__hexnan+0x7a>
 800672a:	2300      	movs	r3, #0
 800672c:	2501      	movs	r5, #1
 800672e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006732:	3c04      	subs	r4, #4
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	f000 000f 	and.w	r0, r0, #15
 800673a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800673e:	6022      	str	r2, [r4, #0]
 8006740:	e7b7      	b.n	80066b2 <__hexnan+0x7a>
 8006742:	2508      	movs	r5, #8
 8006744:	e7b5      	b.n	80066b2 <__hexnan+0x7a>
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0df      	beq.n	800670c <__hexnan+0xd4>
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	f1c3 0320 	rsb	r3, r3, #32
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
 8006758:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800675c:	401a      	ands	r2, r3
 800675e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006762:	e7d3      	b.n	800670c <__hexnan+0xd4>
 8006764:	3f04      	subs	r7, #4
 8006766:	e7d1      	b.n	800670c <__hexnan+0xd4>
 8006768:	2004      	movs	r0, #4
 800676a:	b007      	add	sp, #28
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006770 <_localeconv_r>:
 8006770:	4800      	ldr	r0, [pc, #0]	; (8006774 <_localeconv_r+0x4>)
 8006772:	4770      	bx	lr
 8006774:	20000168 	.word	0x20000168

08006778 <__retarget_lock_init_recursive>:
 8006778:	4770      	bx	lr

0800677a <__retarget_lock_acquire_recursive>:
 800677a:	4770      	bx	lr

0800677c <__retarget_lock_release_recursive>:
 800677c:	4770      	bx	lr

0800677e <__swhatbuf_r>:
 800677e:	b570      	push	{r4, r5, r6, lr}
 8006780:	460e      	mov	r6, r1
 8006782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006786:	4614      	mov	r4, r2
 8006788:	2900      	cmp	r1, #0
 800678a:	461d      	mov	r5, r3
 800678c:	b096      	sub	sp, #88	; 0x58
 800678e:	da07      	bge.n	80067a0 <__swhatbuf_r+0x22>
 8006790:	2300      	movs	r3, #0
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	89b3      	ldrh	r3, [r6, #12]
 8006796:	061a      	lsls	r2, r3, #24
 8006798:	d410      	bmi.n	80067bc <__swhatbuf_r+0x3e>
 800679a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800679e:	e00e      	b.n	80067be <__swhatbuf_r+0x40>
 80067a0:	466a      	mov	r2, sp
 80067a2:	f001 f819 	bl	80077d8 <_fstat_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	dbf2      	blt.n	8006790 <__swhatbuf_r+0x12>
 80067aa:	9a01      	ldr	r2, [sp, #4]
 80067ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067b4:	425a      	negs	r2, r3
 80067b6:	415a      	adcs	r2, r3
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	e7ee      	b.n	800679a <__swhatbuf_r+0x1c>
 80067bc:	2340      	movs	r3, #64	; 0x40
 80067be:	2000      	movs	r0, #0
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	b016      	add	sp, #88	; 0x58
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080067c8 <__smakebuf_r>:
 80067c8:	898b      	ldrh	r3, [r1, #12]
 80067ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067cc:	079d      	lsls	r5, r3, #30
 80067ce:	4606      	mov	r6, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	d507      	bpl.n	80067e4 <__smakebuf_r+0x1c>
 80067d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	2301      	movs	r3, #1
 80067de:	6163      	str	r3, [r4, #20]
 80067e0:	b002      	add	sp, #8
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	466a      	mov	r2, sp
 80067e6:	ab01      	add	r3, sp, #4
 80067e8:	f7ff ffc9 	bl	800677e <__swhatbuf_r>
 80067ec:	9900      	ldr	r1, [sp, #0]
 80067ee:	4605      	mov	r5, r0
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 fd71 	bl	80072d8 <_malloc_r>
 80067f6:	b948      	cbnz	r0, 800680c <__smakebuf_r+0x44>
 80067f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fc:	059a      	lsls	r2, r3, #22
 80067fe:	d4ef      	bmi.n	80067e0 <__smakebuf_r+0x18>
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	f043 0302 	orr.w	r3, r3, #2
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	e7e3      	b.n	80067d4 <__smakebuf_r+0xc>
 800680c:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <__smakebuf_r+0x7c>)
 800680e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	6120      	str	r0, [r4, #16]
 800681e:	6163      	str	r3, [r4, #20]
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	b15b      	cbz	r3, 800683c <__smakebuf_r+0x74>
 8006824:	4630      	mov	r0, r6
 8006826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682a:	f000 ffe7 	bl	80077fc <_isatty_r>
 800682e:	b128      	cbz	r0, 800683c <__smakebuf_r+0x74>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	89a0      	ldrh	r0, [r4, #12]
 800683e:	4305      	orrs	r5, r0
 8006840:	81a5      	strh	r5, [r4, #12]
 8006842:	e7cd      	b.n	80067e0 <__smakebuf_r+0x18>
 8006844:	08005f01 	.word	0x08005f01

08006848 <malloc>:
 8006848:	4b02      	ldr	r3, [pc, #8]	; (8006854 <malloc+0xc>)
 800684a:	4601      	mov	r1, r0
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	f000 bd43 	b.w	80072d8 <_malloc_r>
 8006852:	bf00      	nop
 8006854:	20000010 	.word	0x20000010

08006858 <__ascii_mbtowc>:
 8006858:	b082      	sub	sp, #8
 800685a:	b901      	cbnz	r1, 800685e <__ascii_mbtowc+0x6>
 800685c:	a901      	add	r1, sp, #4
 800685e:	b142      	cbz	r2, 8006872 <__ascii_mbtowc+0x1a>
 8006860:	b14b      	cbz	r3, 8006876 <__ascii_mbtowc+0x1e>
 8006862:	7813      	ldrb	r3, [r2, #0]
 8006864:	600b      	str	r3, [r1, #0]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	1e10      	subs	r0, r2, #0
 800686a:	bf18      	it	ne
 800686c:	2001      	movne	r0, #1
 800686e:	b002      	add	sp, #8
 8006870:	4770      	bx	lr
 8006872:	4610      	mov	r0, r2
 8006874:	e7fb      	b.n	800686e <__ascii_mbtowc+0x16>
 8006876:	f06f 0001 	mvn.w	r0, #1
 800687a:	e7f8      	b.n	800686e <__ascii_mbtowc+0x16>

0800687c <memchr>:
 800687c:	4603      	mov	r3, r0
 800687e:	b510      	push	{r4, lr}
 8006880:	b2c9      	uxtb	r1, r1
 8006882:	4402      	add	r2, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	4618      	mov	r0, r3
 8006888:	d101      	bne.n	800688e <memchr+0x12>
 800688a:	2000      	movs	r0, #0
 800688c:	e003      	b.n	8006896 <memchr+0x1a>
 800688e:	7804      	ldrb	r4, [r0, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	428c      	cmp	r4, r1
 8006894:	d1f6      	bne.n	8006884 <memchr+0x8>
 8006896:	bd10      	pop	{r4, pc}

08006898 <memcpy>:
 8006898:	440a      	add	r2, r1
 800689a:	4291      	cmp	r1, r2
 800689c:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a0:	d100      	bne.n	80068a4 <memcpy+0xc>
 80068a2:	4770      	bx	lr
 80068a4:	b510      	push	{r4, lr}
 80068a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068aa:	4291      	cmp	r1, r2
 80068ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068b0:	d1f9      	bne.n	80068a6 <memcpy+0xe>
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <_Balloc>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068b8:	4604      	mov	r4, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	b976      	cbnz	r6, 80068dc <_Balloc+0x28>
 80068be:	2010      	movs	r0, #16
 80068c0:	f7ff ffc2 	bl	8006848 <malloc>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6260      	str	r0, [r4, #36]	; 0x24
 80068c8:	b920      	cbnz	r0, 80068d4 <_Balloc+0x20>
 80068ca:	2166      	movs	r1, #102	; 0x66
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <_Balloc+0x78>)
 80068ce:	4818      	ldr	r0, [pc, #96]	; (8006930 <_Balloc+0x7c>)
 80068d0:	f000 ff42 	bl	8007758 <__assert_func>
 80068d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068d8:	6006      	str	r6, [r0, #0]
 80068da:	60c6      	str	r6, [r0, #12]
 80068dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068de:	68f3      	ldr	r3, [r6, #12]
 80068e0:	b183      	cbz	r3, 8006904 <_Balloc+0x50>
 80068e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ea:	b9b8      	cbnz	r0, 800691c <_Balloc+0x68>
 80068ec:	2101      	movs	r1, #1
 80068ee:	fa01 f605 	lsl.w	r6, r1, r5
 80068f2:	1d72      	adds	r2, r6, #5
 80068f4:	4620      	mov	r0, r4
 80068f6:	0092      	lsls	r2, r2, #2
 80068f8:	f000 fc94 	bl	8007224 <_calloc_r>
 80068fc:	b160      	cbz	r0, 8006918 <_Balloc+0x64>
 80068fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006902:	e00e      	b.n	8006922 <_Balloc+0x6e>
 8006904:	2221      	movs	r2, #33	; 0x21
 8006906:	2104      	movs	r1, #4
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fc8b 	bl	8007224 <_calloc_r>
 800690e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006910:	60f0      	str	r0, [r6, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e4      	bne.n	80068e2 <_Balloc+0x2e>
 8006918:	2000      	movs	r0, #0
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	6802      	ldr	r2, [r0, #0]
 800691e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006922:	2300      	movs	r3, #0
 8006924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006928:	e7f7      	b.n	800691a <_Balloc+0x66>
 800692a:	bf00      	nop
 800692c:	08007a1d 	.word	0x08007a1d
 8006930:	08007b84 	.word	0x08007b84

08006934 <_Bfree>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006938:	4605      	mov	r5, r0
 800693a:	460c      	mov	r4, r1
 800693c:	b976      	cbnz	r6, 800695c <_Bfree+0x28>
 800693e:	2010      	movs	r0, #16
 8006940:	f7ff ff82 	bl	8006848 <malloc>
 8006944:	4602      	mov	r2, r0
 8006946:	6268      	str	r0, [r5, #36]	; 0x24
 8006948:	b920      	cbnz	r0, 8006954 <_Bfree+0x20>
 800694a:	218a      	movs	r1, #138	; 0x8a
 800694c:	4b08      	ldr	r3, [pc, #32]	; (8006970 <_Bfree+0x3c>)
 800694e:	4809      	ldr	r0, [pc, #36]	; (8006974 <_Bfree+0x40>)
 8006950:	f000 ff02 	bl	8007758 <__assert_func>
 8006954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006958:	6006      	str	r6, [r0, #0]
 800695a:	60c6      	str	r6, [r0, #12]
 800695c:	b13c      	cbz	r4, 800696e <_Bfree+0x3a>
 800695e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006968:	6021      	str	r1, [r4, #0]
 800696a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	08007a1d 	.word	0x08007a1d
 8006974:	08007b84 	.word	0x08007b84

08006978 <__multadd>:
 8006978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697c:	4698      	mov	r8, r3
 800697e:	460c      	mov	r4, r1
 8006980:	2300      	movs	r3, #0
 8006982:	690e      	ldr	r6, [r1, #16]
 8006984:	4607      	mov	r7, r0
 8006986:	f101 0014 	add.w	r0, r1, #20
 800698a:	6805      	ldr	r5, [r0, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	b2a9      	uxth	r1, r5
 8006990:	fb02 8101 	mla	r1, r2, r1, r8
 8006994:	0c2d      	lsrs	r5, r5, #16
 8006996:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800699a:	fb02 c505 	mla	r5, r2, r5, ip
 800699e:	b289      	uxth	r1, r1
 80069a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069a4:	429e      	cmp	r6, r3
 80069a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069aa:	f840 1b04 	str.w	r1, [r0], #4
 80069ae:	dcec      	bgt.n	800698a <__multadd+0x12>
 80069b0:	f1b8 0f00 	cmp.w	r8, #0
 80069b4:	d022      	beq.n	80069fc <__multadd+0x84>
 80069b6:	68a3      	ldr	r3, [r4, #8]
 80069b8:	42b3      	cmp	r3, r6
 80069ba:	dc19      	bgt.n	80069f0 <__multadd+0x78>
 80069bc:	6861      	ldr	r1, [r4, #4]
 80069be:	4638      	mov	r0, r7
 80069c0:	3101      	adds	r1, #1
 80069c2:	f7ff ff77 	bl	80068b4 <_Balloc>
 80069c6:	4605      	mov	r5, r0
 80069c8:	b928      	cbnz	r0, 80069d6 <__multadd+0x5e>
 80069ca:	4602      	mov	r2, r0
 80069cc:	21b5      	movs	r1, #181	; 0xb5
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <__multadd+0x8c>)
 80069d0:	480d      	ldr	r0, [pc, #52]	; (8006a08 <__multadd+0x90>)
 80069d2:	f000 fec1 	bl	8007758 <__assert_func>
 80069d6:	6922      	ldr	r2, [r4, #16]
 80069d8:	f104 010c 	add.w	r1, r4, #12
 80069dc:	3202      	adds	r2, #2
 80069de:	0092      	lsls	r2, r2, #2
 80069e0:	300c      	adds	r0, #12
 80069e2:	f7ff ff59 	bl	8006898 <memcpy>
 80069e6:	4621      	mov	r1, r4
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ffa3 	bl	8006934 <_Bfree>
 80069ee:	462c      	mov	r4, r5
 80069f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069f4:	3601      	adds	r6, #1
 80069f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80069fa:	6126      	str	r6, [r4, #16]
 80069fc:	4620      	mov	r0, r4
 80069fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a02:	bf00      	nop
 8006a04:	08007a93 	.word	0x08007a93
 8006a08:	08007b84 	.word	0x08007b84

08006a0c <__s2b>:
 8006a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	4615      	mov	r5, r2
 8006a12:	2209      	movs	r2, #9
 8006a14:	461f      	mov	r7, r3
 8006a16:	3308      	adds	r3, #8
 8006a18:	460c      	mov	r4, r1
 8006a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a1e:	4606      	mov	r6, r0
 8006a20:	2201      	movs	r2, #1
 8006a22:	2100      	movs	r1, #0
 8006a24:	429a      	cmp	r2, r3
 8006a26:	db09      	blt.n	8006a3c <__s2b+0x30>
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff ff43 	bl	80068b4 <_Balloc>
 8006a2e:	b940      	cbnz	r0, 8006a42 <__s2b+0x36>
 8006a30:	4602      	mov	r2, r0
 8006a32:	21ce      	movs	r1, #206	; 0xce
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <__s2b+0x8c>)
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <__s2b+0x90>)
 8006a38:	f000 fe8e 	bl	8007758 <__assert_func>
 8006a3c:	0052      	lsls	r2, r2, #1
 8006a3e:	3101      	adds	r1, #1
 8006a40:	e7f0      	b.n	8006a24 <__s2b+0x18>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	2d09      	cmp	r5, #9
 8006a46:	6143      	str	r3, [r0, #20]
 8006a48:	f04f 0301 	mov.w	r3, #1
 8006a4c:	6103      	str	r3, [r0, #16]
 8006a4e:	dd16      	ble.n	8006a7e <__s2b+0x72>
 8006a50:	f104 0909 	add.w	r9, r4, #9
 8006a54:	46c8      	mov	r8, r9
 8006a56:	442c      	add	r4, r5
 8006a58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	220a      	movs	r2, #10
 8006a60:	4630      	mov	r0, r6
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	f7ff ff88 	bl	8006978 <__multadd>
 8006a68:	45a0      	cmp	r8, r4
 8006a6a:	d1f5      	bne.n	8006a58 <__s2b+0x4c>
 8006a6c:	f1a5 0408 	sub.w	r4, r5, #8
 8006a70:	444c      	add	r4, r9
 8006a72:	1b2d      	subs	r5, r5, r4
 8006a74:	1963      	adds	r3, r4, r5
 8006a76:	42bb      	cmp	r3, r7
 8006a78:	db04      	blt.n	8006a84 <__s2b+0x78>
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	2509      	movs	r5, #9
 8006a80:	340a      	adds	r4, #10
 8006a82:	e7f6      	b.n	8006a72 <__s2b+0x66>
 8006a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a88:	4601      	mov	r1, r0
 8006a8a:	220a      	movs	r2, #10
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	3b30      	subs	r3, #48	; 0x30
 8006a90:	f7ff ff72 	bl	8006978 <__multadd>
 8006a94:	e7ee      	b.n	8006a74 <__s2b+0x68>
 8006a96:	bf00      	nop
 8006a98:	08007a93 	.word	0x08007a93
 8006a9c:	08007b84 	.word	0x08007b84

08006aa0 <__hi0bits>:
 8006aa0:	0c02      	lsrs	r2, r0, #16
 8006aa2:	0412      	lsls	r2, r2, #16
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	b9ca      	cbnz	r2, 8006adc <__hi0bits+0x3c>
 8006aa8:	0403      	lsls	r3, r0, #16
 8006aaa:	2010      	movs	r0, #16
 8006aac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ab0:	bf04      	itt	eq
 8006ab2:	021b      	lsleq	r3, r3, #8
 8006ab4:	3008      	addeq	r0, #8
 8006ab6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006aba:	bf04      	itt	eq
 8006abc:	011b      	lsleq	r3, r3, #4
 8006abe:	3004      	addeq	r0, #4
 8006ac0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ac4:	bf04      	itt	eq
 8006ac6:	009b      	lsleq	r3, r3, #2
 8006ac8:	3002      	addeq	r0, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	db05      	blt.n	8006ada <__hi0bits+0x3a>
 8006ace:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ad2:	f100 0001 	add.w	r0, r0, #1
 8006ad6:	bf08      	it	eq
 8006ad8:	2020      	moveq	r0, #32
 8006ada:	4770      	bx	lr
 8006adc:	2000      	movs	r0, #0
 8006ade:	e7e5      	b.n	8006aac <__hi0bits+0xc>

08006ae0 <__lo0bits>:
 8006ae0:	6803      	ldr	r3, [r0, #0]
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	f013 0007 	ands.w	r0, r3, #7
 8006ae8:	d00b      	beq.n	8006b02 <__lo0bits+0x22>
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	d422      	bmi.n	8006b34 <__lo0bits+0x54>
 8006aee:	0798      	lsls	r0, r3, #30
 8006af0:	bf49      	itett	mi
 8006af2:	085b      	lsrmi	r3, r3, #1
 8006af4:	089b      	lsrpl	r3, r3, #2
 8006af6:	2001      	movmi	r0, #1
 8006af8:	6013      	strmi	r3, [r2, #0]
 8006afa:	bf5c      	itt	pl
 8006afc:	2002      	movpl	r0, #2
 8006afe:	6013      	strpl	r3, [r2, #0]
 8006b00:	4770      	bx	lr
 8006b02:	b299      	uxth	r1, r3
 8006b04:	b909      	cbnz	r1, 8006b0a <__lo0bits+0x2a>
 8006b06:	2010      	movs	r0, #16
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b0e:	bf04      	itt	eq
 8006b10:	0a1b      	lsreq	r3, r3, #8
 8006b12:	3008      	addeq	r0, #8
 8006b14:	0719      	lsls	r1, r3, #28
 8006b16:	bf04      	itt	eq
 8006b18:	091b      	lsreq	r3, r3, #4
 8006b1a:	3004      	addeq	r0, #4
 8006b1c:	0799      	lsls	r1, r3, #30
 8006b1e:	bf04      	itt	eq
 8006b20:	089b      	lsreq	r3, r3, #2
 8006b22:	3002      	addeq	r0, #2
 8006b24:	07d9      	lsls	r1, r3, #31
 8006b26:	d403      	bmi.n	8006b30 <__lo0bits+0x50>
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	f100 0001 	add.w	r0, r0, #1
 8006b2e:	d003      	beq.n	8006b38 <__lo0bits+0x58>
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4770      	bx	lr
 8006b34:	2000      	movs	r0, #0
 8006b36:	4770      	bx	lr
 8006b38:	2020      	movs	r0, #32
 8006b3a:	4770      	bx	lr

08006b3c <__i2b>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	460c      	mov	r4, r1
 8006b40:	2101      	movs	r1, #1
 8006b42:	f7ff feb7 	bl	80068b4 <_Balloc>
 8006b46:	4602      	mov	r2, r0
 8006b48:	b928      	cbnz	r0, 8006b56 <__i2b+0x1a>
 8006b4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b4e:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <__i2b+0x24>)
 8006b50:	4804      	ldr	r0, [pc, #16]	; (8006b64 <__i2b+0x28>)
 8006b52:	f000 fe01 	bl	8007758 <__assert_func>
 8006b56:	2301      	movs	r3, #1
 8006b58:	6144      	str	r4, [r0, #20]
 8006b5a:	6103      	str	r3, [r0, #16]
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	bf00      	nop
 8006b60:	08007a93 	.word	0x08007a93
 8006b64:	08007b84 	.word	0x08007b84

08006b68 <__multiply>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	690a      	ldr	r2, [r1, #16]
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	460d      	mov	r5, r1
 8006b74:	429a      	cmp	r2, r3
 8006b76:	bfbe      	ittt	lt
 8006b78:	460b      	movlt	r3, r1
 8006b7a:	4625      	movlt	r5, r4
 8006b7c:	461c      	movlt	r4, r3
 8006b7e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b82:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b86:	68ab      	ldr	r3, [r5, #8]
 8006b88:	6869      	ldr	r1, [r5, #4]
 8006b8a:	eb0a 0709 	add.w	r7, sl, r9
 8006b8e:	42bb      	cmp	r3, r7
 8006b90:	b085      	sub	sp, #20
 8006b92:	bfb8      	it	lt
 8006b94:	3101      	addlt	r1, #1
 8006b96:	f7ff fe8d 	bl	80068b4 <_Balloc>
 8006b9a:	b930      	cbnz	r0, 8006baa <__multiply+0x42>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	f240 115d 	movw	r1, #349	; 0x15d
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <__multiply+0x140>)
 8006ba4:	4841      	ldr	r0, [pc, #260]	; (8006cac <__multiply+0x144>)
 8006ba6:	f000 fdd7 	bl	8007758 <__assert_func>
 8006baa:	f100 0614 	add.w	r6, r0, #20
 8006bae:	4633      	mov	r3, r6
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006bb6:	4543      	cmp	r3, r8
 8006bb8:	d31e      	bcc.n	8006bf8 <__multiply+0x90>
 8006bba:	f105 0c14 	add.w	ip, r5, #20
 8006bbe:	f104 0314 	add.w	r3, r4, #20
 8006bc2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006bc6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	ebac 0205 	sub.w	r2, ip, r5
 8006bd0:	3a15      	subs	r2, #21
 8006bd2:	f022 0203 	bic.w	r2, r2, #3
 8006bd6:	3204      	adds	r2, #4
 8006bd8:	f105 0115 	add.w	r1, r5, #21
 8006bdc:	458c      	cmp	ip, r1
 8006bde:	bf38      	it	cc
 8006be0:	2204      	movcc	r2, #4
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	9a02      	ldr	r2, [sp, #8]
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d808      	bhi.n	8006bfe <__multiply+0x96>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	dc55      	bgt.n	8006c9c <__multiply+0x134>
 8006bf0:	6107      	str	r7, [r0, #16]
 8006bf2:	b005      	add	sp, #20
 8006bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf8:	f843 2b04 	str.w	r2, [r3], #4
 8006bfc:	e7db      	b.n	8006bb6 <__multiply+0x4e>
 8006bfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c02:	f1ba 0f00 	cmp.w	sl, #0
 8006c06:	d020      	beq.n	8006c4a <__multiply+0xe2>
 8006c08:	46b1      	mov	r9, r6
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f105 0e14 	add.w	lr, r5, #20
 8006c10:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c14:	f8d9 b000 	ldr.w	fp, [r9]
 8006c18:	b2a1      	uxth	r1, r4
 8006c1a:	fa1f fb8b 	uxth.w	fp, fp
 8006c1e:	fb0a b101 	mla	r1, sl, r1, fp
 8006c22:	4411      	add	r1, r2
 8006c24:	f8d9 2000 	ldr.w	r2, [r9]
 8006c28:	0c24      	lsrs	r4, r4, #16
 8006c2a:	0c12      	lsrs	r2, r2, #16
 8006c2c:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c30:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c34:	b289      	uxth	r1, r1
 8006c36:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c3a:	45f4      	cmp	ip, lr
 8006c3c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c40:	f849 1b04 	str.w	r1, [r9], #4
 8006c44:	d8e4      	bhi.n	8006c10 <__multiply+0xa8>
 8006c46:	9901      	ldr	r1, [sp, #4]
 8006c48:	5072      	str	r2, [r6, r1]
 8006c4a:	9a03      	ldr	r2, [sp, #12]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c52:	f1b9 0f00 	cmp.w	r9, #0
 8006c56:	d01f      	beq.n	8006c98 <__multiply+0x130>
 8006c58:	46b6      	mov	lr, r6
 8006c5a:	f04f 0a00 	mov.w	sl, #0
 8006c5e:	6834      	ldr	r4, [r6, #0]
 8006c60:	f105 0114 	add.w	r1, r5, #20
 8006c64:	880a      	ldrh	r2, [r1, #0]
 8006c66:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c6a:	b2a4      	uxth	r4, r4
 8006c6c:	fb09 b202 	mla	r2, r9, r2, fp
 8006c70:	4492      	add	sl, r2
 8006c72:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c76:	f84e 4b04 	str.w	r4, [lr], #4
 8006c7a:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c7e:	f8be 2000 	ldrh.w	r2, [lr]
 8006c82:	0c24      	lsrs	r4, r4, #16
 8006c84:	fb09 2404 	mla	r4, r9, r4, r2
 8006c88:	458c      	cmp	ip, r1
 8006c8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c92:	d8e7      	bhi.n	8006c64 <__multiply+0xfc>
 8006c94:	9a01      	ldr	r2, [sp, #4]
 8006c96:	50b4      	str	r4, [r6, r2]
 8006c98:	3604      	adds	r6, #4
 8006c9a:	e7a3      	b.n	8006be4 <__multiply+0x7c>
 8006c9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1a5      	bne.n	8006bf0 <__multiply+0x88>
 8006ca4:	3f01      	subs	r7, #1
 8006ca6:	e7a1      	b.n	8006bec <__multiply+0x84>
 8006ca8:	08007a93 	.word	0x08007a93
 8006cac:	08007b84 	.word	0x08007b84

08006cb0 <__pow5mult>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4615      	mov	r5, r2
 8006cb6:	f012 0203 	ands.w	r2, r2, #3
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	d007      	beq.n	8006cd0 <__pow5mult+0x20>
 8006cc0:	4c25      	ldr	r4, [pc, #148]	; (8006d58 <__pow5mult+0xa8>)
 8006cc2:	3a01      	subs	r2, #1
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cca:	f7ff fe55 	bl	8006978 <__multadd>
 8006cce:	4607      	mov	r7, r0
 8006cd0:	10ad      	asrs	r5, r5, #2
 8006cd2:	d03d      	beq.n	8006d50 <__pow5mult+0xa0>
 8006cd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cd6:	b97c      	cbnz	r4, 8006cf8 <__pow5mult+0x48>
 8006cd8:	2010      	movs	r0, #16
 8006cda:	f7ff fdb5 	bl	8006848 <malloc>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ce2:	b928      	cbnz	r0, 8006cf0 <__pow5mult+0x40>
 8006ce4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ce8:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <__pow5mult+0xac>)
 8006cea:	481d      	ldr	r0, [pc, #116]	; (8006d60 <__pow5mult+0xb0>)
 8006cec:	f000 fd34 	bl	8007758 <__assert_func>
 8006cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf4:	6004      	str	r4, [r0, #0]
 8006cf6:	60c4      	str	r4, [r0, #12]
 8006cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d00:	b94c      	cbnz	r4, 8006d16 <__pow5mult+0x66>
 8006d02:	f240 2171 	movw	r1, #625	; 0x271
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ff18 	bl	8006b3c <__i2b>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	f04f 0900 	mov.w	r9, #0
 8006d1a:	07eb      	lsls	r3, r5, #31
 8006d1c:	d50a      	bpl.n	8006d34 <__pow5mult+0x84>
 8006d1e:	4639      	mov	r1, r7
 8006d20:	4622      	mov	r2, r4
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff20 	bl	8006b68 <__multiply>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff fe01 	bl	8006934 <_Bfree>
 8006d32:	4647      	mov	r7, r8
 8006d34:	106d      	asrs	r5, r5, #1
 8006d36:	d00b      	beq.n	8006d50 <__pow5mult+0xa0>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	b938      	cbnz	r0, 8006d4c <__pow5mult+0x9c>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ff11 	bl	8006b68 <__multiply>
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f8c0 9000 	str.w	r9, [r0]
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e7e4      	b.n	8006d1a <__pow5mult+0x6a>
 8006d50:	4638      	mov	r0, r7
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	bf00      	nop
 8006d58:	08007cd8 	.word	0x08007cd8
 8006d5c:	08007a1d 	.word	0x08007a1d
 8006d60:	08007b84 	.word	0x08007b84

08006d64 <__lshift>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	460c      	mov	r4, r1
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	4691      	mov	r9, r2
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	6849      	ldr	r1, [r1, #4]
 8006d72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d7c:	f108 0601 	add.w	r6, r8, #1
 8006d80:	42b3      	cmp	r3, r6
 8006d82:	db0b      	blt.n	8006d9c <__lshift+0x38>
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff fd95 	bl	80068b4 <_Balloc>
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	b948      	cbnz	r0, 8006da2 <__lshift+0x3e>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <__lshift+0xd0>)
 8006d96:	4828      	ldr	r0, [pc, #160]	; (8006e38 <__lshift+0xd4>)
 8006d98:	f000 fcde 	bl	8007758 <__assert_func>
 8006d9c:	3101      	adds	r1, #1
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	e7ee      	b.n	8006d80 <__lshift+0x1c>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f100 0114 	add.w	r1, r0, #20
 8006da8:	f100 0210 	add.w	r2, r0, #16
 8006dac:	4618      	mov	r0, r3
 8006dae:	4553      	cmp	r3, sl
 8006db0:	db33      	blt.n	8006e1a <__lshift+0xb6>
 8006db2:	6920      	ldr	r0, [r4, #16]
 8006db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006db8:	f104 0314 	add.w	r3, r4, #20
 8006dbc:	f019 091f 	ands.w	r9, r9, #31
 8006dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dc8:	d02b      	beq.n	8006e22 <__lshift+0xbe>
 8006dca:	468a      	mov	sl, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f1c9 0e20 	rsb	lr, r9, #32
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006dd8:	4302      	orrs	r2, r0
 8006dda:	f84a 2b04 	str.w	r2, [sl], #4
 8006dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de2:	459c      	cmp	ip, r3
 8006de4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006de8:	d8f3      	bhi.n	8006dd2 <__lshift+0x6e>
 8006dea:	ebac 0304 	sub.w	r3, ip, r4
 8006dee:	3b15      	subs	r3, #21
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	3304      	adds	r3, #4
 8006df6:	f104 0015 	add.w	r0, r4, #21
 8006dfa:	4584      	cmp	ip, r0
 8006dfc:	bf38      	it	cc
 8006dfe:	2304      	movcc	r3, #4
 8006e00:	50ca      	str	r2, [r1, r3]
 8006e02:	b10a      	cbz	r2, 8006e08 <__lshift+0xa4>
 8006e04:	f108 0602 	add.w	r6, r8, #2
 8006e08:	3e01      	subs	r6, #1
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	612e      	str	r6, [r5, #16]
 8006e10:	f7ff fd90 	bl	8006934 <_Bfree>
 8006e14:	4628      	mov	r0, r5
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e1e:	3301      	adds	r3, #1
 8006e20:	e7c5      	b.n	8006dae <__lshift+0x4a>
 8006e22:	3904      	subs	r1, #4
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	459c      	cmp	ip, r3
 8006e2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e2e:	d8f9      	bhi.n	8006e24 <__lshift+0xc0>
 8006e30:	e7ea      	b.n	8006e08 <__lshift+0xa4>
 8006e32:	bf00      	nop
 8006e34:	08007a93 	.word	0x08007a93
 8006e38:	08007b84 	.word	0x08007b84

08006e3c <__mcmp>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	690a      	ldr	r2, [r1, #16]
 8006e40:	6900      	ldr	r0, [r0, #16]
 8006e42:	b530      	push	{r4, r5, lr}
 8006e44:	1a80      	subs	r0, r0, r2
 8006e46:	d10d      	bne.n	8006e64 <__mcmp+0x28>
 8006e48:	3314      	adds	r3, #20
 8006e4a:	3114      	adds	r1, #20
 8006e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e5c:	4295      	cmp	r5, r2
 8006e5e:	d002      	beq.n	8006e66 <__mcmp+0x2a>
 8006e60:	d304      	bcc.n	8006e6c <__mcmp+0x30>
 8006e62:	2001      	movs	r0, #1
 8006e64:	bd30      	pop	{r4, r5, pc}
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	d3f4      	bcc.n	8006e54 <__mcmp+0x18>
 8006e6a:	e7fb      	b.n	8006e64 <__mcmp+0x28>
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e7f8      	b.n	8006e64 <__mcmp+0x28>
	...

08006e74 <__mdiff>:
 8006e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	460c      	mov	r4, r1
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4620      	mov	r0, r4
 8006e80:	4692      	mov	sl, r2
 8006e82:	f7ff ffdb 	bl	8006e3c <__mcmp>
 8006e86:	1e05      	subs	r5, r0, #0
 8006e88:	d111      	bne.n	8006eae <__mdiff+0x3a>
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff fd11 	bl	80068b4 <_Balloc>
 8006e92:	4602      	mov	r2, r0
 8006e94:	b928      	cbnz	r0, 8006ea2 <__mdiff+0x2e>
 8006e96:	f240 2132 	movw	r1, #562	; 0x232
 8006e9a:	4b3c      	ldr	r3, [pc, #240]	; (8006f8c <__mdiff+0x118>)
 8006e9c:	483c      	ldr	r0, [pc, #240]	; (8006f90 <__mdiff+0x11c>)
 8006e9e:	f000 fc5b 	bl	8007758 <__assert_func>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eae:	bfa4      	itt	ge
 8006eb0:	4653      	movge	r3, sl
 8006eb2:	46a2      	movge	sl, r4
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006eba:	bfa6      	itte	ge
 8006ebc:	461c      	movge	r4, r3
 8006ebe:	2500      	movge	r5, #0
 8006ec0:	2501      	movlt	r5, #1
 8006ec2:	f7ff fcf7 	bl	80068b4 <_Balloc>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	b918      	cbnz	r0, 8006ed2 <__mdiff+0x5e>
 8006eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <__mdiff+0x118>)
 8006ed0:	e7e4      	b.n	8006e9c <__mdiff+0x28>
 8006ed2:	f100 0814 	add.w	r8, r0, #20
 8006ed6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006eda:	60c5      	str	r5, [r0, #12]
 8006edc:	f04f 0c00 	mov.w	ip, #0
 8006ee0:	f10a 0514 	add.w	r5, sl, #20
 8006ee4:	f10a 0010 	add.w	r0, sl, #16
 8006ee8:	46c2      	mov	sl, r8
 8006eea:	6926      	ldr	r6, [r4, #16]
 8006eec:	f104 0914 	add.w	r9, r4, #20
 8006ef0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006ef4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ef8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f00:	fa1f f18b 	uxth.w	r1, fp
 8006f04:	4461      	add	r1, ip
 8006f06:	fa1f fc83 	uxth.w	ip, r3
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	eba1 010c 	sub.w	r1, r1, ip
 8006f10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f14:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f18:	b289      	uxth	r1, r1
 8006f1a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f1e:	454e      	cmp	r6, r9
 8006f20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f24:	f84a 3b04 	str.w	r3, [sl], #4
 8006f28:	d8e6      	bhi.n	8006ef8 <__mdiff+0x84>
 8006f2a:	1b33      	subs	r3, r6, r4
 8006f2c:	3b15      	subs	r3, #21
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	3415      	adds	r4, #21
 8006f34:	3304      	adds	r3, #4
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	bf38      	it	cc
 8006f3a:	2304      	movcc	r3, #4
 8006f3c:	441d      	add	r5, r3
 8006f3e:	4443      	add	r3, r8
 8006f40:	461e      	mov	r6, r3
 8006f42:	462c      	mov	r4, r5
 8006f44:	4574      	cmp	r4, lr
 8006f46:	d30e      	bcc.n	8006f66 <__mdiff+0xf2>
 8006f48:	f10e 0103 	add.w	r1, lr, #3
 8006f4c:	1b49      	subs	r1, r1, r5
 8006f4e:	f021 0103 	bic.w	r1, r1, #3
 8006f52:	3d03      	subs	r5, #3
 8006f54:	45ae      	cmp	lr, r5
 8006f56:	bf38      	it	cc
 8006f58:	2100      	movcc	r1, #0
 8006f5a:	4419      	add	r1, r3
 8006f5c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f60:	b18b      	cbz	r3, 8006f86 <__mdiff+0x112>
 8006f62:	6117      	str	r7, [r2, #16]
 8006f64:	e7a0      	b.n	8006ea8 <__mdiff+0x34>
 8006f66:	f854 8b04 	ldr.w	r8, [r4], #4
 8006f6a:	fa1f f188 	uxth.w	r1, r8
 8006f6e:	4461      	add	r1, ip
 8006f70:	1408      	asrs	r0, r1, #16
 8006f72:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006f76:	b289      	uxth	r1, r1
 8006f78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f80:	f846 1b04 	str.w	r1, [r6], #4
 8006f84:	e7de      	b.n	8006f44 <__mdiff+0xd0>
 8006f86:	3f01      	subs	r7, #1
 8006f88:	e7e8      	b.n	8006f5c <__mdiff+0xe8>
 8006f8a:	bf00      	nop
 8006f8c:	08007a93 	.word	0x08007a93
 8006f90:	08007b84 	.word	0x08007b84

08006f94 <__ulp>:
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <__ulp+0x48>)
 8006f96:	400b      	ands	r3, r1
 8006f98:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dd02      	ble.n	8006fa6 <__ulp+0x12>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4770      	bx	lr
 8006fa6:	425b      	negs	r3, r3
 8006fa8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006fac:	f04f 0000 	mov.w	r0, #0
 8006fb0:	f04f 0100 	mov.w	r1, #0
 8006fb4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006fb8:	da04      	bge.n	8006fc4 <__ulp+0x30>
 8006fba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fbe:	fa43 f102 	asr.w	r1, r3, r2
 8006fc2:	4770      	bx	lr
 8006fc4:	f1a2 0314 	sub.w	r3, r2, #20
 8006fc8:	2b1e      	cmp	r3, #30
 8006fca:	bfd6      	itet	le
 8006fcc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006fd0:	2301      	movgt	r3, #1
 8006fd2:	fa22 f303 	lsrle.w	r3, r2, r3
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	7ff00000 	.word	0x7ff00000

08006fe0 <__b2d>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	6907      	ldr	r7, [r0, #16]
 8006fe6:	f100 0914 	add.w	r9, r0, #20
 8006fea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006fee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006ff2:	f1a7 0804 	sub.w	r8, r7, #4
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff fd52 	bl	8006aa0 <__hi0bits>
 8006ffc:	f1c0 0320 	rsb	r3, r0, #32
 8007000:	280a      	cmp	r0, #10
 8007002:	600b      	str	r3, [r1, #0]
 8007004:	491f      	ldr	r1, [pc, #124]	; (8007084 <__b2d+0xa4>)
 8007006:	dc17      	bgt.n	8007038 <__b2d+0x58>
 8007008:	45c1      	cmp	r9, r8
 800700a:	bf28      	it	cs
 800700c:	2200      	movcs	r2, #0
 800700e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007012:	fa26 f30c 	lsr.w	r3, r6, ip
 8007016:	bf38      	it	cc
 8007018:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800701c:	ea43 0501 	orr.w	r5, r3, r1
 8007020:	f100 0315 	add.w	r3, r0, #21
 8007024:	fa06 f303 	lsl.w	r3, r6, r3
 8007028:	fa22 f20c 	lsr.w	r2, r2, ip
 800702c:	ea43 0402 	orr.w	r4, r3, r2
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007038:	45c1      	cmp	r9, r8
 800703a:	bf2e      	itee	cs
 800703c:	2200      	movcs	r2, #0
 800703e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007042:	f1a7 0808 	subcc.w	r8, r7, #8
 8007046:	f1b0 030b 	subs.w	r3, r0, #11
 800704a:	d016      	beq.n	800707a <__b2d+0x9a>
 800704c:	f1c3 0720 	rsb	r7, r3, #32
 8007050:	fa22 f107 	lsr.w	r1, r2, r7
 8007054:	45c8      	cmp	r8, r9
 8007056:	fa06 f603 	lsl.w	r6, r6, r3
 800705a:	ea46 0601 	orr.w	r6, r6, r1
 800705e:	bf94      	ite	ls
 8007060:	2100      	movls	r1, #0
 8007062:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007066:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800706a:	fa02 f003 	lsl.w	r0, r2, r3
 800706e:	40f9      	lsrs	r1, r7
 8007070:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007074:	ea40 0401 	orr.w	r4, r0, r1
 8007078:	e7da      	b.n	8007030 <__b2d+0x50>
 800707a:	4614      	mov	r4, r2
 800707c:	ea46 0501 	orr.w	r5, r6, r1
 8007080:	e7d6      	b.n	8007030 <__b2d+0x50>
 8007082:	bf00      	nop
 8007084:	3ff00000 	.word	0x3ff00000

08007088 <__d2b>:
 8007088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800708c:	2101      	movs	r1, #1
 800708e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007092:	4690      	mov	r8, r2
 8007094:	461d      	mov	r5, r3
 8007096:	f7ff fc0d 	bl	80068b4 <_Balloc>
 800709a:	4604      	mov	r4, r0
 800709c:	b930      	cbnz	r0, 80070ac <__d2b+0x24>
 800709e:	4602      	mov	r2, r0
 80070a0:	f240 310a 	movw	r1, #778	; 0x30a
 80070a4:	4b24      	ldr	r3, [pc, #144]	; (8007138 <__d2b+0xb0>)
 80070a6:	4825      	ldr	r0, [pc, #148]	; (800713c <__d2b+0xb4>)
 80070a8:	f000 fb56 	bl	8007758 <__assert_func>
 80070ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80070b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80070b4:	bb2d      	cbnz	r5, 8007102 <__d2b+0x7a>
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	f1b8 0300 	subs.w	r3, r8, #0
 80070bc:	d026      	beq.n	800710c <__d2b+0x84>
 80070be:	4668      	mov	r0, sp
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	f7ff fd0d 	bl	8006ae0 <__lo0bits>
 80070c6:	9900      	ldr	r1, [sp, #0]
 80070c8:	b1f0      	cbz	r0, 8007108 <__d2b+0x80>
 80070ca:	9a01      	ldr	r2, [sp, #4]
 80070cc:	f1c0 0320 	rsb	r3, r0, #32
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	430b      	orrs	r3, r1
 80070d6:	40c2      	lsrs	r2, r0
 80070d8:	6163      	str	r3, [r4, #20]
 80070da:	9201      	str	r2, [sp, #4]
 80070dc:	9b01      	ldr	r3, [sp, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf14      	ite	ne
 80070e2:	2102      	movne	r1, #2
 80070e4:	2101      	moveq	r1, #1
 80070e6:	61a3      	str	r3, [r4, #24]
 80070e8:	6121      	str	r1, [r4, #16]
 80070ea:	b1c5      	cbz	r5, 800711e <__d2b+0x96>
 80070ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070f0:	4405      	add	r5, r0
 80070f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070f6:	603d      	str	r5, [r7, #0]
 80070f8:	6030      	str	r0, [r6, #0]
 80070fa:	4620      	mov	r0, r4
 80070fc:	b002      	add	sp, #8
 80070fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007106:	e7d6      	b.n	80070b6 <__d2b+0x2e>
 8007108:	6161      	str	r1, [r4, #20]
 800710a:	e7e7      	b.n	80070dc <__d2b+0x54>
 800710c:	a801      	add	r0, sp, #4
 800710e:	f7ff fce7 	bl	8006ae0 <__lo0bits>
 8007112:	2101      	movs	r1, #1
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	6121      	str	r1, [r4, #16]
 8007118:	6163      	str	r3, [r4, #20]
 800711a:	3020      	adds	r0, #32
 800711c:	e7e5      	b.n	80070ea <__d2b+0x62>
 800711e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007126:	6038      	str	r0, [r7, #0]
 8007128:	6918      	ldr	r0, [r3, #16]
 800712a:	f7ff fcb9 	bl	8006aa0 <__hi0bits>
 800712e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007132:	6031      	str	r1, [r6, #0]
 8007134:	e7e1      	b.n	80070fa <__d2b+0x72>
 8007136:	bf00      	nop
 8007138:	08007a93 	.word	0x08007a93
 800713c:	08007b84 	.word	0x08007b84

08007140 <__ratio>:
 8007140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	4688      	mov	r8, r1
 8007146:	4669      	mov	r1, sp
 8007148:	4681      	mov	r9, r0
 800714a:	f7ff ff49 	bl	8006fe0 <__b2d>
 800714e:	460f      	mov	r7, r1
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	4640      	mov	r0, r8
 8007156:	a901      	add	r1, sp, #4
 8007158:	f7ff ff42 	bl	8006fe0 <__b2d>
 800715c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007160:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007164:	468b      	mov	fp, r1
 8007166:	eba3 0c02 	sub.w	ip, r3, r2
 800716a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007174:	2b00      	cmp	r3, #0
 8007176:	bfd5      	itete	le
 8007178:	460a      	movle	r2, r1
 800717a:	462a      	movgt	r2, r5
 800717c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007180:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007184:	bfd8      	it	le
 8007186:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800718a:	465b      	mov	r3, fp
 800718c:	4602      	mov	r2, r0
 800718e:	4639      	mov	r1, r7
 8007190:	4620      	mov	r0, r4
 8007192:	f7f9 facb 	bl	800072c <__aeabi_ddiv>
 8007196:	b003      	add	sp, #12
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800719c <__copybits>:
 800719c:	3901      	subs	r1, #1
 800719e:	b570      	push	{r4, r5, r6, lr}
 80071a0:	1149      	asrs	r1, r1, #5
 80071a2:	6914      	ldr	r4, [r2, #16]
 80071a4:	3101      	adds	r1, #1
 80071a6:	f102 0314 	add.w	r3, r2, #20
 80071aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071b2:	1f05      	subs	r5, r0, #4
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d30c      	bcc.n	80071d2 <__copybits+0x36>
 80071b8:	1aa3      	subs	r3, r4, r2
 80071ba:	3b11      	subs	r3, #17
 80071bc:	f023 0303 	bic.w	r3, r3, #3
 80071c0:	3211      	adds	r2, #17
 80071c2:	42a2      	cmp	r2, r4
 80071c4:	bf88      	it	hi
 80071c6:	2300      	movhi	r3, #0
 80071c8:	4418      	add	r0, r3
 80071ca:	2300      	movs	r3, #0
 80071cc:	4288      	cmp	r0, r1
 80071ce:	d305      	bcc.n	80071dc <__copybits+0x40>
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
 80071d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80071d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80071da:	e7eb      	b.n	80071b4 <__copybits+0x18>
 80071dc:	f840 3b04 	str.w	r3, [r0], #4
 80071e0:	e7f4      	b.n	80071cc <__copybits+0x30>

080071e2 <__any_on>:
 80071e2:	f100 0214 	add.w	r2, r0, #20
 80071e6:	6900      	ldr	r0, [r0, #16]
 80071e8:	114b      	asrs	r3, r1, #5
 80071ea:	4298      	cmp	r0, r3
 80071ec:	b510      	push	{r4, lr}
 80071ee:	db11      	blt.n	8007214 <__any_on+0x32>
 80071f0:	dd0a      	ble.n	8007208 <__any_on+0x26>
 80071f2:	f011 011f 	ands.w	r1, r1, #31
 80071f6:	d007      	beq.n	8007208 <__any_on+0x26>
 80071f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071fc:	fa24 f001 	lsr.w	r0, r4, r1
 8007200:	fa00 f101 	lsl.w	r1, r0, r1
 8007204:	428c      	cmp	r4, r1
 8007206:	d10b      	bne.n	8007220 <__any_on+0x3e>
 8007208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800720c:	4293      	cmp	r3, r2
 800720e:	d803      	bhi.n	8007218 <__any_on+0x36>
 8007210:	2000      	movs	r0, #0
 8007212:	bd10      	pop	{r4, pc}
 8007214:	4603      	mov	r3, r0
 8007216:	e7f7      	b.n	8007208 <__any_on+0x26>
 8007218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800721c:	2900      	cmp	r1, #0
 800721e:	d0f5      	beq.n	800720c <__any_on+0x2a>
 8007220:	2001      	movs	r0, #1
 8007222:	e7f6      	b.n	8007212 <__any_on+0x30>

08007224 <_calloc_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	fb02 f501 	mul.w	r5, r2, r1
 800722a:	4629      	mov	r1, r5
 800722c:	f000 f854 	bl	80072d8 <_malloc_r>
 8007230:	4604      	mov	r4, r0
 8007232:	b118      	cbz	r0, 800723c <_calloc_r+0x18>
 8007234:	462a      	mov	r2, r5
 8007236:	2100      	movs	r1, #0
 8007238:	f7fc fae2 	bl	8003800 <memset>
 800723c:	4620      	mov	r0, r4
 800723e:	bd38      	pop	{r3, r4, r5, pc}

08007240 <_free_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4605      	mov	r5, r0
 8007244:	2900      	cmp	r1, #0
 8007246:	d043      	beq.n	80072d0 <_free_r+0x90>
 8007248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724c:	1f0c      	subs	r4, r1, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfb8      	it	lt
 8007252:	18e4      	addlt	r4, r4, r3
 8007254:	f000 faf4 	bl	8007840 <__malloc_lock>
 8007258:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <_free_r+0x94>)
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	4610      	mov	r0, r2
 800725e:	b933      	cbnz	r3, 800726e <_free_r+0x2e>
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	6014      	str	r4, [r2, #0]
 8007264:	4628      	mov	r0, r5
 8007266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726a:	f000 baef 	b.w	800784c <__malloc_unlock>
 800726e:	42a3      	cmp	r3, r4
 8007270:	d90a      	bls.n	8007288 <_free_r+0x48>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	1862      	adds	r2, r4, r1
 8007276:	4293      	cmp	r3, r2
 8007278:	bf01      	itttt	eq
 800727a:	681a      	ldreq	r2, [r3, #0]
 800727c:	685b      	ldreq	r3, [r3, #4]
 800727e:	1852      	addeq	r2, r2, r1
 8007280:	6022      	streq	r2, [r4, #0]
 8007282:	6063      	str	r3, [r4, #4]
 8007284:	6004      	str	r4, [r0, #0]
 8007286:	e7ed      	b.n	8007264 <_free_r+0x24>
 8007288:	461a      	mov	r2, r3
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b10b      	cbz	r3, 8007292 <_free_r+0x52>
 800728e:	42a3      	cmp	r3, r4
 8007290:	d9fa      	bls.n	8007288 <_free_r+0x48>
 8007292:	6811      	ldr	r1, [r2, #0]
 8007294:	1850      	adds	r0, r2, r1
 8007296:	42a0      	cmp	r0, r4
 8007298:	d10b      	bne.n	80072b2 <_free_r+0x72>
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	4401      	add	r1, r0
 800729e:	1850      	adds	r0, r2, r1
 80072a0:	4283      	cmp	r3, r0
 80072a2:	6011      	str	r1, [r2, #0]
 80072a4:	d1de      	bne.n	8007264 <_free_r+0x24>
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4401      	add	r1, r0
 80072ac:	6011      	str	r1, [r2, #0]
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	e7d8      	b.n	8007264 <_free_r+0x24>
 80072b2:	d902      	bls.n	80072ba <_free_r+0x7a>
 80072b4:	230c      	movs	r3, #12
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	e7d4      	b.n	8007264 <_free_r+0x24>
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1821      	adds	r1, r4, r0
 80072be:	428b      	cmp	r3, r1
 80072c0:	bf01      	itttt	eq
 80072c2:	6819      	ldreq	r1, [r3, #0]
 80072c4:	685b      	ldreq	r3, [r3, #4]
 80072c6:	1809      	addeq	r1, r1, r0
 80072c8:	6021      	streq	r1, [r4, #0]
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	6054      	str	r4, [r2, #4]
 80072ce:	e7c9      	b.n	8007264 <_free_r+0x24>
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	20000210 	.word	0x20000210

080072d8 <_malloc_r>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	1ccd      	adds	r5, r1, #3
 80072dc:	f025 0503 	bic.w	r5, r5, #3
 80072e0:	3508      	adds	r5, #8
 80072e2:	2d0c      	cmp	r5, #12
 80072e4:	bf38      	it	cc
 80072e6:	250c      	movcc	r5, #12
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	4606      	mov	r6, r0
 80072ec:	db01      	blt.n	80072f2 <_malloc_r+0x1a>
 80072ee:	42a9      	cmp	r1, r5
 80072f0:	d903      	bls.n	80072fa <_malloc_r+0x22>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	2000      	movs	r0, #0
 80072f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fa:	f000 faa1 	bl	8007840 <__malloc_lock>
 80072fe:	4921      	ldr	r1, [pc, #132]	; (8007384 <_malloc_r+0xac>)
 8007300:	680a      	ldr	r2, [r1, #0]
 8007302:	4614      	mov	r4, r2
 8007304:	b99c      	cbnz	r4, 800732e <_malloc_r+0x56>
 8007306:	4f20      	ldr	r7, [pc, #128]	; (8007388 <_malloc_r+0xb0>)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	b923      	cbnz	r3, 8007316 <_malloc_r+0x3e>
 800730c:	4621      	mov	r1, r4
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f99a 	bl	8007648 <_sbrk_r>
 8007314:	6038      	str	r0, [r7, #0]
 8007316:	4629      	mov	r1, r5
 8007318:	4630      	mov	r0, r6
 800731a:	f000 f995 	bl	8007648 <_sbrk_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d123      	bne.n	800736a <_malloc_r+0x92>
 8007322:	230c      	movs	r3, #12
 8007324:	4630      	mov	r0, r6
 8007326:	6033      	str	r3, [r6, #0]
 8007328:	f000 fa90 	bl	800784c <__malloc_unlock>
 800732c:	e7e3      	b.n	80072f6 <_malloc_r+0x1e>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	1b5b      	subs	r3, r3, r5
 8007332:	d417      	bmi.n	8007364 <_malloc_r+0x8c>
 8007334:	2b0b      	cmp	r3, #11
 8007336:	d903      	bls.n	8007340 <_malloc_r+0x68>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	441c      	add	r4, r3
 800733c:	6025      	str	r5, [r4, #0]
 800733e:	e004      	b.n	800734a <_malloc_r+0x72>
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	42a2      	cmp	r2, r4
 8007344:	bf0c      	ite	eq
 8007346:	600b      	streq	r3, [r1, #0]
 8007348:	6053      	strne	r3, [r2, #4]
 800734a:	4630      	mov	r0, r6
 800734c:	f000 fa7e 	bl	800784c <__malloc_unlock>
 8007350:	f104 000b 	add.w	r0, r4, #11
 8007354:	1d23      	adds	r3, r4, #4
 8007356:	f020 0007 	bic.w	r0, r0, #7
 800735a:	1ac2      	subs	r2, r0, r3
 800735c:	d0cc      	beq.n	80072f8 <_malloc_r+0x20>
 800735e:	1a1b      	subs	r3, r3, r0
 8007360:	50a3      	str	r3, [r4, r2]
 8007362:	e7c9      	b.n	80072f8 <_malloc_r+0x20>
 8007364:	4622      	mov	r2, r4
 8007366:	6864      	ldr	r4, [r4, #4]
 8007368:	e7cc      	b.n	8007304 <_malloc_r+0x2c>
 800736a:	1cc4      	adds	r4, r0, #3
 800736c:	f024 0403 	bic.w	r4, r4, #3
 8007370:	42a0      	cmp	r0, r4
 8007372:	d0e3      	beq.n	800733c <_malloc_r+0x64>
 8007374:	1a21      	subs	r1, r4, r0
 8007376:	4630      	mov	r0, r6
 8007378:	f000 f966 	bl	8007648 <_sbrk_r>
 800737c:	3001      	adds	r0, #1
 800737e:	d1dd      	bne.n	800733c <_malloc_r+0x64>
 8007380:	e7cf      	b.n	8007322 <_malloc_r+0x4a>
 8007382:	bf00      	nop
 8007384:	20000210 	.word	0x20000210
 8007388:	20000214 	.word	0x20000214

0800738c <__sfputc_r>:
 800738c:	6893      	ldr	r3, [r2, #8]
 800738e:	b410      	push	{r4}
 8007390:	3b01      	subs	r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	da07      	bge.n	80073a8 <__sfputc_r+0x1c>
 8007398:	6994      	ldr	r4, [r2, #24]
 800739a:	42a3      	cmp	r3, r4
 800739c:	db01      	blt.n	80073a2 <__sfputc_r+0x16>
 800739e:	290a      	cmp	r1, #10
 80073a0:	d102      	bne.n	80073a8 <__sfputc_r+0x1c>
 80073a2:	bc10      	pop	{r4}
 80073a4:	f7fd bd8a 	b.w	8004ebc <__swbuf_r>
 80073a8:	6813      	ldr	r3, [r2, #0]
 80073aa:	1c58      	adds	r0, r3, #1
 80073ac:	6010      	str	r0, [r2, #0]
 80073ae:	7019      	strb	r1, [r3, #0]
 80073b0:	4608      	mov	r0, r1
 80073b2:	bc10      	pop	{r4}
 80073b4:	4770      	bx	lr

080073b6 <__sfputs_r>:
 80073b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b8:	4606      	mov	r6, r0
 80073ba:	460f      	mov	r7, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	18d5      	adds	r5, r2, r3
 80073c0:	42ac      	cmp	r4, r5
 80073c2:	d101      	bne.n	80073c8 <__sfputs_r+0x12>
 80073c4:	2000      	movs	r0, #0
 80073c6:	e007      	b.n	80073d8 <__sfputs_r+0x22>
 80073c8:	463a      	mov	r2, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	f7ff ffdc 	bl	800738c <__sfputc_r>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d1f3      	bne.n	80073c0 <__sfputs_r+0xa>
 80073d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073dc <_vfiprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	460d      	mov	r5, r1
 80073e2:	4614      	mov	r4, r2
 80073e4:	4698      	mov	r8, r3
 80073e6:	4606      	mov	r6, r0
 80073e8:	b09d      	sub	sp, #116	; 0x74
 80073ea:	b118      	cbz	r0, 80073f4 <_vfiprintf_r+0x18>
 80073ec:	6983      	ldr	r3, [r0, #24]
 80073ee:	b90b      	cbnz	r3, 80073f4 <_vfiprintf_r+0x18>
 80073f0:	f7fe fdba 	bl	8005f68 <__sinit>
 80073f4:	4b89      	ldr	r3, [pc, #548]	; (800761c <_vfiprintf_r+0x240>)
 80073f6:	429d      	cmp	r5, r3
 80073f8:	d11b      	bne.n	8007432 <_vfiprintf_r+0x56>
 80073fa:	6875      	ldr	r5, [r6, #4]
 80073fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073fe:	07d9      	lsls	r1, r3, #31
 8007400:	d405      	bmi.n	800740e <_vfiprintf_r+0x32>
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	059a      	lsls	r2, r3, #22
 8007406:	d402      	bmi.n	800740e <_vfiprintf_r+0x32>
 8007408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800740a:	f7ff f9b6 	bl	800677a <__retarget_lock_acquire_recursive>
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	071b      	lsls	r3, r3, #28
 8007412:	d501      	bpl.n	8007418 <_vfiprintf_r+0x3c>
 8007414:	692b      	ldr	r3, [r5, #16]
 8007416:	b9eb      	cbnz	r3, 8007454 <_vfiprintf_r+0x78>
 8007418:	4629      	mov	r1, r5
 800741a:	4630      	mov	r0, r6
 800741c:	f7fd fda0 	bl	8004f60 <__swsetup_r>
 8007420:	b1c0      	cbz	r0, 8007454 <_vfiprintf_r+0x78>
 8007422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007424:	07dc      	lsls	r4, r3, #31
 8007426:	d50e      	bpl.n	8007446 <_vfiprintf_r+0x6a>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	b01d      	add	sp, #116	; 0x74
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	4b7b      	ldr	r3, [pc, #492]	; (8007620 <_vfiprintf_r+0x244>)
 8007434:	429d      	cmp	r5, r3
 8007436:	d101      	bne.n	800743c <_vfiprintf_r+0x60>
 8007438:	68b5      	ldr	r5, [r6, #8]
 800743a:	e7df      	b.n	80073fc <_vfiprintf_r+0x20>
 800743c:	4b79      	ldr	r3, [pc, #484]	; (8007624 <_vfiprintf_r+0x248>)
 800743e:	429d      	cmp	r5, r3
 8007440:	bf08      	it	eq
 8007442:	68f5      	ldreq	r5, [r6, #12]
 8007444:	e7da      	b.n	80073fc <_vfiprintf_r+0x20>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	0598      	lsls	r0, r3, #22
 800744a:	d4ed      	bmi.n	8007428 <_vfiprintf_r+0x4c>
 800744c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744e:	f7ff f995 	bl	800677c <__retarget_lock_release_recursive>
 8007452:	e7e9      	b.n	8007428 <_vfiprintf_r+0x4c>
 8007454:	2300      	movs	r3, #0
 8007456:	9309      	str	r3, [sp, #36]	; 0x24
 8007458:	2320      	movs	r3, #32
 800745a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800745e:	2330      	movs	r3, #48	; 0x30
 8007460:	f04f 0901 	mov.w	r9, #1
 8007464:	f8cd 800c 	str.w	r8, [sp, #12]
 8007468:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007628 <_vfiprintf_r+0x24c>
 800746c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007470:	4623      	mov	r3, r4
 8007472:	469a      	mov	sl, r3
 8007474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007478:	b10a      	cbz	r2, 800747e <_vfiprintf_r+0xa2>
 800747a:	2a25      	cmp	r2, #37	; 0x25
 800747c:	d1f9      	bne.n	8007472 <_vfiprintf_r+0x96>
 800747e:	ebba 0b04 	subs.w	fp, sl, r4
 8007482:	d00b      	beq.n	800749c <_vfiprintf_r+0xc0>
 8007484:	465b      	mov	r3, fp
 8007486:	4622      	mov	r2, r4
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ff93 	bl	80073b6 <__sfputs_r>
 8007490:	3001      	adds	r0, #1
 8007492:	f000 80aa 	beq.w	80075ea <_vfiprintf_r+0x20e>
 8007496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007498:	445a      	add	r2, fp
 800749a:	9209      	str	r2, [sp, #36]	; 0x24
 800749c:	f89a 3000 	ldrb.w	r3, [sl]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80a2 	beq.w	80075ea <_vfiprintf_r+0x20e>
 80074a6:	2300      	movs	r3, #0
 80074a8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b0:	f10a 0a01 	add.w	sl, sl, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074bc:	931a      	str	r3, [sp, #104]	; 0x68
 80074be:	4654      	mov	r4, sl
 80074c0:	2205      	movs	r2, #5
 80074c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c6:	4858      	ldr	r0, [pc, #352]	; (8007628 <_vfiprintf_r+0x24c>)
 80074c8:	f7ff f9d8 	bl	800687c <memchr>
 80074cc:	9a04      	ldr	r2, [sp, #16]
 80074ce:	b9d8      	cbnz	r0, 8007508 <_vfiprintf_r+0x12c>
 80074d0:	06d1      	lsls	r1, r2, #27
 80074d2:	bf44      	itt	mi
 80074d4:	2320      	movmi	r3, #32
 80074d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074da:	0713      	lsls	r3, r2, #28
 80074dc:	bf44      	itt	mi
 80074de:	232b      	movmi	r3, #43	; 0x2b
 80074e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074e4:	f89a 3000 	ldrb.w	r3, [sl]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d015      	beq.n	8007518 <_vfiprintf_r+0x13c>
 80074ec:	4654      	mov	r4, sl
 80074ee:	2000      	movs	r0, #0
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	4621      	mov	r1, r4
 80074f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fc:	3b30      	subs	r3, #48	; 0x30
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d94e      	bls.n	80075a0 <_vfiprintf_r+0x1c4>
 8007502:	b1b0      	cbz	r0, 8007532 <_vfiprintf_r+0x156>
 8007504:	9207      	str	r2, [sp, #28]
 8007506:	e014      	b.n	8007532 <_vfiprintf_r+0x156>
 8007508:	eba0 0308 	sub.w	r3, r0, r8
 800750c:	fa09 f303 	lsl.w	r3, r9, r3
 8007510:	4313      	orrs	r3, r2
 8007512:	46a2      	mov	sl, r4
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	e7d2      	b.n	80074be <_vfiprintf_r+0xe2>
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	1d19      	adds	r1, r3, #4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	9103      	str	r1, [sp, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	bfbb      	ittet	lt
 8007524:	425b      	neglt	r3, r3
 8007526:	f042 0202 	orrlt.w	r2, r2, #2
 800752a:	9307      	strge	r3, [sp, #28]
 800752c:	9307      	strlt	r3, [sp, #28]
 800752e:	bfb8      	it	lt
 8007530:	9204      	strlt	r2, [sp, #16]
 8007532:	7823      	ldrb	r3, [r4, #0]
 8007534:	2b2e      	cmp	r3, #46	; 0x2e
 8007536:	d10c      	bne.n	8007552 <_vfiprintf_r+0x176>
 8007538:	7863      	ldrb	r3, [r4, #1]
 800753a:	2b2a      	cmp	r3, #42	; 0x2a
 800753c:	d135      	bne.n	80075aa <_vfiprintf_r+0x1ce>
 800753e:	9b03      	ldr	r3, [sp, #12]
 8007540:	3402      	adds	r4, #2
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	9203      	str	r2, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfb8      	it	lt
 800754c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007638 <_vfiprintf_r+0x25c>
 8007556:	2203      	movs	r2, #3
 8007558:	4650      	mov	r0, sl
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	f7ff f98e 	bl	800687c <memchr>
 8007560:	b140      	cbz	r0, 8007574 <_vfiprintf_r+0x198>
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	eba0 000a 	sub.w	r0, r0, sl
 8007568:	fa03 f000 	lsl.w	r0, r3, r0
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	3401      	adds	r4, #1
 8007570:	4303      	orrs	r3, r0
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007578:	2206      	movs	r2, #6
 800757a:	482c      	ldr	r0, [pc, #176]	; (800762c <_vfiprintf_r+0x250>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007580:	f7ff f97c 	bl	800687c <memchr>
 8007584:	2800      	cmp	r0, #0
 8007586:	d03f      	beq.n	8007608 <_vfiprintf_r+0x22c>
 8007588:	4b29      	ldr	r3, [pc, #164]	; (8007630 <_vfiprintf_r+0x254>)
 800758a:	bb1b      	cbnz	r3, 80075d4 <_vfiprintf_r+0x1f8>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	3307      	adds	r3, #7
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	3308      	adds	r3, #8
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759a:	443b      	add	r3, r7
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	e767      	b.n	8007470 <_vfiprintf_r+0x94>
 80075a0:	460c      	mov	r4, r1
 80075a2:	2001      	movs	r0, #1
 80075a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a8:	e7a5      	b.n	80074f6 <_vfiprintf_r+0x11a>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f04f 0c0a 	mov.w	ip, #10
 80075b0:	4619      	mov	r1, r3
 80075b2:	3401      	adds	r4, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075bc:	3a30      	subs	r2, #48	; 0x30
 80075be:	2a09      	cmp	r2, #9
 80075c0:	d903      	bls.n	80075ca <_vfiprintf_r+0x1ee>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0c5      	beq.n	8007552 <_vfiprintf_r+0x176>
 80075c6:	9105      	str	r1, [sp, #20]
 80075c8:	e7c3      	b.n	8007552 <_vfiprintf_r+0x176>
 80075ca:	4604      	mov	r4, r0
 80075cc:	2301      	movs	r3, #1
 80075ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d2:	e7f0      	b.n	80075b6 <_vfiprintf_r+0x1da>
 80075d4:	ab03      	add	r3, sp, #12
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	462a      	mov	r2, r5
 80075da:	4630      	mov	r0, r6
 80075dc:	4b15      	ldr	r3, [pc, #84]	; (8007634 <_vfiprintf_r+0x258>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	f7fc f9b4 	bl	800394c <_printf_float>
 80075e4:	4607      	mov	r7, r0
 80075e6:	1c78      	adds	r0, r7, #1
 80075e8:	d1d6      	bne.n	8007598 <_vfiprintf_r+0x1bc>
 80075ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ec:	07d9      	lsls	r1, r3, #31
 80075ee:	d405      	bmi.n	80075fc <_vfiprintf_r+0x220>
 80075f0:	89ab      	ldrh	r3, [r5, #12]
 80075f2:	059a      	lsls	r2, r3, #22
 80075f4:	d402      	bmi.n	80075fc <_vfiprintf_r+0x220>
 80075f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075f8:	f7ff f8c0 	bl	800677c <__retarget_lock_release_recursive>
 80075fc:	89ab      	ldrh	r3, [r5, #12]
 80075fe:	065b      	lsls	r3, r3, #25
 8007600:	f53f af12 	bmi.w	8007428 <_vfiprintf_r+0x4c>
 8007604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007606:	e711      	b.n	800742c <_vfiprintf_r+0x50>
 8007608:	ab03      	add	r3, sp, #12
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	462a      	mov	r2, r5
 800760e:	4630      	mov	r0, r6
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <_vfiprintf_r+0x258>)
 8007612:	a904      	add	r1, sp, #16
 8007614:	f7fc fc36 	bl	8003e84 <_printf_i>
 8007618:	e7e4      	b.n	80075e4 <_vfiprintf_r+0x208>
 800761a:	bf00      	nop
 800761c:	08007ac4 	.word	0x08007ac4
 8007620:	08007ae4 	.word	0x08007ae4
 8007624:	08007aa4 	.word	0x08007aa4
 8007628:	08007ce4 	.word	0x08007ce4
 800762c:	08007cee 	.word	0x08007cee
 8007630:	0800394d 	.word	0x0800394d
 8007634:	080073b7 	.word	0x080073b7
 8007638:	08007cea 	.word	0x08007cea

0800763c <nan>:
 800763c:	2000      	movs	r0, #0
 800763e:	4901      	ldr	r1, [pc, #4]	; (8007644 <nan+0x8>)
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	7ff80000 	.word	0x7ff80000

08007648 <_sbrk_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	2300      	movs	r3, #0
 800764c:	4d05      	ldr	r5, [pc, #20]	; (8007664 <_sbrk_r+0x1c>)
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7fa fabe 	bl	8001bd4 <_sbrk>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_sbrk_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_sbrk_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	2000033c 	.word	0x2000033c

08007668 <nanf>:
 8007668:	4800      	ldr	r0, [pc, #0]	; (800766c <nanf+0x4>)
 800766a:	4770      	bx	lr
 800766c:	7fc00000 	.word	0x7fc00000

08007670 <__sread>:
 8007670:	b510      	push	{r4, lr}
 8007672:	460c      	mov	r4, r1
 8007674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007678:	f000 f8ee 	bl	8007858 <_read_r>
 800767c:	2800      	cmp	r0, #0
 800767e:	bfab      	itete	ge
 8007680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007682:	89a3      	ldrhlt	r3, [r4, #12]
 8007684:	181b      	addge	r3, r3, r0
 8007686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800768a:	bfac      	ite	ge
 800768c:	6563      	strge	r3, [r4, #84]	; 0x54
 800768e:	81a3      	strhlt	r3, [r4, #12]
 8007690:	bd10      	pop	{r4, pc}

08007692 <__swrite>:
 8007692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007696:	461f      	mov	r7, r3
 8007698:	898b      	ldrh	r3, [r1, #12]
 800769a:	4605      	mov	r5, r0
 800769c:	05db      	lsls	r3, r3, #23
 800769e:	460c      	mov	r4, r1
 80076a0:	4616      	mov	r6, r2
 80076a2:	d505      	bpl.n	80076b0 <__swrite+0x1e>
 80076a4:	2302      	movs	r3, #2
 80076a6:	2200      	movs	r2, #0
 80076a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ac:	f000 f8b6 	bl	800781c <_lseek_r>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	4632      	mov	r2, r6
 80076b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	4628      	mov	r0, r5
 80076bc:	463b      	mov	r3, r7
 80076be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c6:	f000 b835 	b.w	8007734 <_write_r>

080076ca <__sseek>:
 80076ca:	b510      	push	{r4, lr}
 80076cc:	460c      	mov	r4, r1
 80076ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d2:	f000 f8a3 	bl	800781c <_lseek_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	bf15      	itete	ne
 80076dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076e6:	81a3      	strheq	r3, [r4, #12]
 80076e8:	bf18      	it	ne
 80076ea:	81a3      	strhne	r3, [r4, #12]
 80076ec:	bd10      	pop	{r4, pc}

080076ee <__sclose>:
 80076ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f2:	f000 b84f 	b.w	8007794 <_close_r>

080076f6 <strncmp>:
 80076f6:	b510      	push	{r4, lr}
 80076f8:	b16a      	cbz	r2, 8007716 <strncmp+0x20>
 80076fa:	3901      	subs	r1, #1
 80076fc:	1884      	adds	r4, r0, r2
 80076fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007702:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007706:	4293      	cmp	r3, r2
 8007708:	d103      	bne.n	8007712 <strncmp+0x1c>
 800770a:	42a0      	cmp	r0, r4
 800770c:	d001      	beq.n	8007712 <strncmp+0x1c>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f5      	bne.n	80076fe <strncmp+0x8>
 8007712:	1a98      	subs	r0, r3, r2
 8007714:	bd10      	pop	{r4, pc}
 8007716:	4610      	mov	r0, r2
 8007718:	e7fc      	b.n	8007714 <strncmp+0x1e>

0800771a <__ascii_wctomb>:
 800771a:	4603      	mov	r3, r0
 800771c:	4608      	mov	r0, r1
 800771e:	b141      	cbz	r1, 8007732 <__ascii_wctomb+0x18>
 8007720:	2aff      	cmp	r2, #255	; 0xff
 8007722:	d904      	bls.n	800772e <__ascii_wctomb+0x14>
 8007724:	228a      	movs	r2, #138	; 0x8a
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	4770      	bx	lr
 800772e:	2001      	movs	r0, #1
 8007730:	700a      	strb	r2, [r1, #0]
 8007732:	4770      	bx	lr

08007734 <_write_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	2200      	movs	r2, #0
 800773e:	4d05      	ldr	r5, [pc, #20]	; (8007754 <_write_r+0x20>)
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fa f9fa 	bl	8001b3c <_write>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_write_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_write_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	2000033c 	.word	0x2000033c

08007758 <__assert_func>:
 8007758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800775a:	4614      	mov	r4, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <__assert_func+0x2c>)
 8007760:	4605      	mov	r5, r0
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68d8      	ldr	r0, [r3, #12]
 8007766:	b14c      	cbz	r4, 800777c <__assert_func+0x24>
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <__assert_func+0x30>)
 800776a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800776e:	9100      	str	r1, [sp, #0]
 8007770:	462b      	mov	r3, r5
 8007772:	4906      	ldr	r1, [pc, #24]	; (800778c <__assert_func+0x34>)
 8007774:	f000 f81e 	bl	80077b4 <fiprintf>
 8007778:	f000 f880 	bl	800787c <abort>
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <__assert_func+0x38>)
 800777e:	461c      	mov	r4, r3
 8007780:	e7f3      	b.n	800776a <__assert_func+0x12>
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010
 8007788:	08007cf5 	.word	0x08007cf5
 800778c:	08007d02 	.word	0x08007d02
 8007790:	08007d30 	.word	0x08007d30

08007794 <_close_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	2300      	movs	r3, #0
 8007798:	4d05      	ldr	r5, [pc, #20]	; (80077b0 <_close_r+0x1c>)
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	f7fa f9e8 	bl	8001b74 <_close>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_close_r+0x1a>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_close_r+0x1a>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	2000033c 	.word	0x2000033c

080077b4 <fiprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	b503      	push	{r0, r1, lr}
 80077b8:	4601      	mov	r1, r0
 80077ba:	ab03      	add	r3, sp, #12
 80077bc:	4805      	ldr	r0, [pc, #20]	; (80077d4 <fiprintf+0x20>)
 80077be:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	f7ff fe09 	bl	80073dc <_vfiprintf_r>
 80077ca:	b002      	add	sp, #8
 80077cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d0:	b003      	add	sp, #12
 80077d2:	4770      	bx	lr
 80077d4:	20000010 	.word	0x20000010

080077d8 <_fstat_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	2300      	movs	r3, #0
 80077dc:	4d06      	ldr	r5, [pc, #24]	; (80077f8 <_fstat_r+0x20>)
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	f7fa f9d0 	bl	8001b8a <_fstat>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d102      	bne.n	80077f4 <_fstat_r+0x1c>
 80077ee:	682b      	ldr	r3, [r5, #0]
 80077f0:	b103      	cbz	r3, 80077f4 <_fstat_r+0x1c>
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	2000033c 	.word	0x2000033c

080077fc <_isatty_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	2300      	movs	r3, #0
 8007800:	4d05      	ldr	r5, [pc, #20]	; (8007818 <_isatty_r+0x1c>)
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fa f9ce 	bl	8001ba8 <_isatty>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_isatty_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_isatty_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	2000033c 	.word	0x2000033c

0800781c <_lseek_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	2200      	movs	r2, #0
 8007826:	4d05      	ldr	r5, [pc, #20]	; (800783c <_lseek_r+0x20>)
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa f9c6 	bl	8001bbc <_lseek>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_lseek_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_lseek_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	2000033c 	.word	0x2000033c

08007840 <__malloc_lock>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__malloc_lock+0x8>)
 8007842:	f7fe bf9a 	b.w	800677a <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	20000334 	.word	0x20000334

0800784c <__malloc_unlock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_unlock+0x8>)
 800784e:	f7fe bf95 	b.w	800677c <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	20000334 	.word	0x20000334

08007858 <_read_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	2200      	movs	r2, #0
 8007862:	4d05      	ldr	r5, [pc, #20]	; (8007878 <_read_r+0x20>)
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7fa f94b 	bl	8001b02 <_read>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_read_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_read_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	2000033c 	.word	0x2000033c

0800787c <abort>:
 800787c:	2006      	movs	r0, #6
 800787e:	b508      	push	{r3, lr}
 8007880:	f000 f82c 	bl	80078dc <raise>
 8007884:	2001      	movs	r0, #1
 8007886:	f7fa f932 	bl	8001aee <_exit>

0800788a <_raise_r>:
 800788a:	291f      	cmp	r1, #31
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	d904      	bls.n	800789e <_raise_r+0x14>
 8007894:	2316      	movs	r3, #22
 8007896:	6003      	str	r3, [r0, #0]
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	bd38      	pop	{r3, r4, r5, pc}
 800789e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078a0:	b112      	cbz	r2, 80078a8 <_raise_r+0x1e>
 80078a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078a6:	b94b      	cbnz	r3, 80078bc <_raise_r+0x32>
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 f831 	bl	8007910 <_getpid_r>
 80078ae:	462a      	mov	r2, r5
 80078b0:	4601      	mov	r1, r0
 80078b2:	4620      	mov	r0, r4
 80078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b8:	f000 b818 	b.w	80078ec <_kill_r>
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d00a      	beq.n	80078d6 <_raise_r+0x4c>
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	d103      	bne.n	80078cc <_raise_r+0x42>
 80078c4:	2316      	movs	r3, #22
 80078c6:	6003      	str	r3, [r0, #0]
 80078c8:	2001      	movs	r0, #1
 80078ca:	e7e7      	b.n	800789c <_raise_r+0x12>
 80078cc:	2400      	movs	r4, #0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d4:	4798      	blx	r3
 80078d6:	2000      	movs	r0, #0
 80078d8:	e7e0      	b.n	800789c <_raise_r+0x12>
	...

080078dc <raise>:
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <raise+0xc>)
 80078de:	4601      	mov	r1, r0
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	f7ff bfd2 	b.w	800788a <_raise_r>
 80078e6:	bf00      	nop
 80078e8:	20000010 	.word	0x20000010

080078ec <_kill_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	2300      	movs	r3, #0
 80078f0:	4d06      	ldr	r5, [pc, #24]	; (800790c <_kill_r+0x20>)
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	4611      	mov	r1, r2
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f7fa f8e8 	bl	8001ace <_kill>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d102      	bne.n	8007908 <_kill_r+0x1c>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	b103      	cbz	r3, 8007908 <_kill_r+0x1c>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	bd38      	pop	{r3, r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	2000033c 	.word	0x2000033c

08007910 <_getpid_r>:
 8007910:	f7fa b8d6 	b.w	8001ac0 <_getpid>

08007914 <_init>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr

08007920 <_fini>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr
