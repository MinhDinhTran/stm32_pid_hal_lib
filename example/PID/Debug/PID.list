
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007498  08007498  00017498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ac  080079ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080079ac  080079ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079ac  080079ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080079b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e0  08007b94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007b94  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009780  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec0  00000000  00000000  00029989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b3  00000000  00000000  0002c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092c3  00000000  00000000  00044c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845b1  00000000  00000000  0004defe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d24af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000d2504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800747c 	.word	0x0800747c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800747c 	.word	0x0800747c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	460c      	mov	r4, r1
 8001140:	4605      	mov	r5, r0
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	2200      	movs	r2, #0
 8001148:	2300      	movs	r3, #0
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_GPIO_Init+0x58>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_GPIO_Init+0x58>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_GPIO_Init+0x58>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0x58>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <MX_GPIO_Init+0x58>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_GPIO_Init+0x58>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_GPIO_Init+0x58>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <MX_GPIO_Init+0x58>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MX_GPIO_Init+0x58>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000

08001208 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800120c:	f000 fb88 	bl	8001920 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001210:	f000 f82e 	bl	8001270 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	PID_Init(&pid1, 0.736, 0.135, 0.064);
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <main+0x40>)
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <main+0x44>)
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <main+0x48>)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x4c>)
 800121c:	f000 f8ee 	bl	80013fc <PID_Init>
	PID_Init(&pid2, 0.4, 0.2, 0.2);
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <main+0x50>)
 8001222:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <main+0x50>)
 8001224:	490d      	ldr	r1, [pc, #52]	; (800125c <main+0x54>)
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <main+0x58>)
 8001228:	f000 f8e8 	bl	80013fc <PID_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800122c:	f7ff ffbe 	bl	80011ac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001230:	f000 fac0 	bl	80017b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, RecvBuff, sizeof(RecvBuff));
 8001234:	2205      	movs	r2, #5
 8001236:	490b      	ldr	r1, [pc, #44]	; (8001264 <main+0x5c>)
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <main+0x60>)
 800123a:	f001 fc0e 	bl	8002a5a <HAL_UART_Receive_IT>

	printf("System start up!\n");
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <main+0x64>)
 8001240:	f002 fd80 	bl	8003d44 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001244:	e7fe      	b.n	8001244 <main+0x3c>
 8001246:	bf00      	nop
 8001248:	3d83126f 	.word	0x3d83126f
 800124c:	3e0a3d71 	.word	0x3e0a3d71
 8001250:	3f3c6a7f 	.word	0x3f3c6a7f
 8001254:	20000244 	.word	0x20000244
 8001258:	3e4ccccd 	.word	0x3e4ccccd
 800125c:	3ecccccd 	.word	0x3ecccccd
 8001260:	20000214 	.word	0x20000214
 8001264:	200001fc 	.word	0x200001fc
 8001268:	20000274 	.word	0x20000274
 800126c:	08007498 	.word	0x08007498

08001270 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2228      	movs	r2, #40	; 0x28
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f002 f872 	bl	8003368 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fed5 	bl	8002068 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x58>
		Error_Handler();
 80012c4:	f000 f880 	bl	80013c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 f940 	bl	8002568 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x82>
		Error_Handler();
 80012ee:	f000 f86b 	bl	80013c8 <Error_Handler>
	}
}
 80012f2:	bf00      	nop
 80012f4:	3740      	adds	r7, #64	; 0x40
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_UART_RxCpltCallback+0xac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d148      	bne.n	80013a0 <HAL_UART_RxCpltCallback+0xa4>

		PID_Target = (float) atoff((const char*) RecvBuff);
 800130e:	4827      	ldr	r0, [pc, #156]	; (80013ac <HAL_UART_RxCpltCallback+0xb0>)
 8001310:	f001 fffc 	bl	800330c <atoff>
 8001314:	4603      	mov	r3, r0
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_UART_RxCpltCallback+0xb4>)
 8001318:	6013      	str	r3, [r2, #0]

		printf("Beginning value: %f\n", pid1.ActualValue);
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_UART_RxCpltCallback+0xb8>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f882 	bl	8000428 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <HAL_UART_RxCpltCallback+0xbc>)
 800132a:	f002 fc85 	bl	8003c38 <iprintf>
		int i = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
		float output = 0.0;
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
		while (i < 200) {
 8001338:	e025      	b.n	8001386 <HAL_UART_RxCpltCallback+0x8a>
			i++;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
			output = PID_Model_Positional(&pid1, PID_Target);
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_RxCpltCallback+0xb4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	481b      	ldr	r0, [pc, #108]	; (80013b4 <HAL_UART_RxCpltCallback+0xb8>)
 8001348:	f000 f892 	bl	8001470 <PID_Model_Positional>
 800134c:	60b8      	str	r0, [r7, #8]
			printf("%f\n", output);
 800134e:	68b8      	ldr	r0, [r7, #8]
 8001350:	f7ff f86a 	bl	8000428 <__aeabi_f2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <HAL_UART_RxCpltCallback+0xc0>)
 800135a:	f002 fc6d 	bl	8003c38 <iprintf>
			if (pid1.Accuracy > PID_GetOffsetModul(PID_Target - output))
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_RxCpltCallback+0xb8>)
 8001360:	685c      	ldr	r4, [r3, #4]
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_UART_RxCpltCallback+0xb4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fc01 	bl	8000b70 <__aeabi_fsub>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f82e 	bl	80013d2 <PID_GetOffsetModul>
 8001376:	4603      	mov	r3, r0
 8001378:	4619      	mov	r1, r3
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff febe 	bl	80010fc <__aeabi_fcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d103      	bne.n	800138e <HAL_UART_RxCpltCallback+0x92>
		while (i < 200) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2bc7      	cmp	r3, #199	; 0xc7
 800138a:	ddd6      	ble.n	800133a <HAL_UART_RxCpltCallback+0x3e>
 800138c:	e000      	b.n	8001390 <HAL_UART_RxCpltCallback+0x94>
				break;
 800138e:	bf00      	nop

		}
		printf("PID Finished!\n");
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <HAL_UART_RxCpltCallback+0xc4>)
 8001392:	f002 fcd7 	bl	8003d44 <puts>

		//printf("%f\n",PID_Model_Incremental(&pid1, PID_Target));
		//printf("PID Finished!\n");

		HAL_UART_Receive_IT(&huart1, RecvBuff, sizeof(RecvBuff));
 8001396:	2205      	movs	r2, #5
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <HAL_UART_RxCpltCallback+0xb0>)
 800139a:	480a      	ldr	r0, [pc, #40]	; (80013c4 <HAL_UART_RxCpltCallback+0xc8>)
 800139c:	f001 fb5d 	bl	8002a5a <HAL_UART_Receive_IT>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	40013800 	.word	0x40013800
 80013ac:	200001fc 	.word	0x200001fc
 80013b0:	20000204 	.word	0x20000204
 80013b4:	20000244 	.word	0x20000244
 80013b8:	080074ac 	.word	0x080074ac
 80013bc:	080074c4 	.word	0x080074c4
 80013c0:	080074c8 	.word	0x080074c8
 80013c4:	20000274 	.word	0x20000274

080013c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>

080013d2 <PID_GetOffsetModul>:
 * @brief:  get modulus of a double
 *          the same function as fabs() in "math.h"
 *          but I don't need all functions in it
 * @return: modulus of the param
 * */
float PID_GetOffsetModul(float num) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]

#ifndef _MATH_H_
	if (num >= 0.0)
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe82 	bl	80010e8 <__aeabi_fcmpge>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <PID_GetOffsetModul+0x1c>
		return num;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	e002      	b.n	80013f4 <PID_GetOffsetModul+0x22>
	else
		return -num;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
#endif

#ifdef _MATH_H_
	return fabs(num);
#endif
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <PID_Init>:
 * @brief: Init all params in pid
 *         Always call the function before use pid
 *         Some of the params with be set to default
 * @call:  Before all pid related functions
 * */
void PID_Init(PID_HandleTypeDef *pid, float kp, float ki, float kd) {
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]

	pid->Status = pid_enable;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
	pid->Accuracy = PID_DEFAULT_ACCURACY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <PID_Init+0x70>)
 8001414:	605a      	str	r2, [r3, #4]
	pid->SetValue = 0.0;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
	pid->ActualValue = 0.0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
	pid->Offset = 0.0;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
	pid->OffsetNext = 0.0;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
	pid->OffsetLast = 0.0;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
	pid->Integral = 0.0;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
	pid->Kp = kp;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	61da      	str	r2, [r3, #28]
	pid->Ki = ki;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	621a      	str	r2, [r3, #32]
	pid->Kd = kd;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Uk = 0.0;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	3a03126f 	.word	0x3a03126f

08001470 <PID_Model_Positional>:
/**
 * @brief: positional pid
 * @param pid:     pid
 * @param target:  target value
 * */
float PID_Model_Positional(PID_HandleTypeDef *pid, float target) {
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]

	if (pid->Status == pid_enable) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d156      	bne.n	8001530 <PID_Model_Positional+0xc0>

		pid->SetValue = target;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	609a      	str	r2, [r3, #8]
		pid->Offset = (pid->SetValue) - (pid->ActualValue);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fb6c 	bl	8000b70 <__aeabi_fsub>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	611a      	str	r2, [r3, #16]
		pid->Integral += pid->Offset;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff fb62 	bl	8000b74 <__addsf3>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
		pid->Uk = (pid->Kp * pid->Offset) + (pid->Ki * pid->Integral)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fc5e 	bl	8000d84 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461c      	mov	r4, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fc54 	bl	8000d84 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fb47 	bl	8000b74 <__addsf3>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461d      	mov	r5, r3
				+ pid->Kd * (pid->Offset - pid->OffsetLast);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff fb39 	bl	8000b70 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fc3e 	bl	8000d84 <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4628      	mov	r0, r5
 800150e:	f7ff fb31 	bl	8000b74 <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
		pid->Uk = (pid->Kp * pid->Offset) + (pid->Ki * pid->Integral)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
		pid->OffsetLast = pid->Offset;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
		pid->ActualValue = pid->Uk * 1.0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60da      	str	r2, [r3, #12]

		return pid->ActualValue;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	e005      	b.n	800153c <PID_Model_Positional+0xcc>
	}

	else {
		return (float) pid->Status;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbcd 	bl	8000cd4 <__aeabi_ui2f>
 800153a:	4603      	mov	r3, r0
	}
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_MspInit+0x6c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_MspInit+0x6c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_MspInit+0x6c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_MspInit+0x6c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_MspInit+0x6c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_MspInit+0x6c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2005      	movs	r0, #5
 8001580:	f000 fb07 	bl	8001b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001584:	2005      	movs	r0, #5
 8001586:	f000 fb20 	bl	8001bca <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_MspInit+0x70>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_MspInit+0x70>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f9d5 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}

08001606 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
	...

08001614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART1_IRQHandler+0x10>)
 800161a:	f001 fa4f 	bl	8002abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000274 	.word	0x20000274

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001640:	f001 fe68 	bl	8003314 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001668:	e7fe      	b.n	8001668 <_exit+0x12>

0800166a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e00a      	b.n	8001692 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167c:	f3af 8000 	nop.w
 8001680:	4601      	mov	r1, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf0      	blt.n	800167c <_read+0x12>
	}

return len;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e009      	b.n	80016ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f8f6 	bl	80018b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf1      	blt.n	80016b6 <_write+0x12>
	}
	return len;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_close>:

int _close(int file)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001702:	605a      	str	r2, [r3, #4]
	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <_isatty>:

int _isatty(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f001 fdd2 	bl	8003314 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000208 	.word	0x20000208
 80017a4:	20000338 	.word	0x20000338

080017a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_USART1_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART1_UART_Init+0x4c>)
 80017ec:	f001 f856 	bl	800289c <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f7ff fde7 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000274 	.word	0x20000274
 8001804:	40013800 	.word	0x40013800

08001808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_UART_MspInit+0x9c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d139      	bne.n	800189c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 800182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_UART_MspInit+0xa0>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4619      	mov	r1, r3
 800186c:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_UART_MspInit+0xa4>)
 800186e:	f000 fa77 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_UART_MspInit+0xa4>)
 8001888:	f000 fa6a 	bl	8001d60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2025      	movs	r0, #37	; 0x25
 8001892:	f000 f97e 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001896:	2025      	movs	r0, #37	; 0x25
 8001898:	f000 f997 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800

080018b0 <__io_putchar>:

FILE __stdout;
#endif

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 2, HAL_MAX_DELAY);
 80018b8:	1d39      	adds	r1, r7, #4
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	2202      	movs	r2, #2
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <__io_putchar+0x20>)
 80018c2:	f001 f838 	bl	8002936 <HAL_UART_Transmit>
	return ch;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000274 	.word	0x20000274

080018d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018fa:	f7ff ff55 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f001 fd0f 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001902:	f7ff fc81 	bl	8001208 <main>
  bx lr
 8001906:	4770      	bx	lr
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001910:	080079b4 	.word	0x080079b4
  ldr r2, =_sbss
 8001914:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001918:	20000334 	.word	0x20000334

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f923 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fe02 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f93b 	bl	8001be6 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f903 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000320 	.word	0x20000320

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000320 	.word	0x20000320

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <__NVIC_EnableIRQ+0x34>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff2d 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff42 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff35 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e020      	b.n	8001c68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 020e 	bic.w	r2, r2, #14
 8001c34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d005      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e051      	b.n	8001d3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020e 	bic.w	r2, r2, #14
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <HAL_DMA_Abort_IT+0xd0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d029      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xa0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_DMA_Abort_IT+0xd4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x9c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_DMA_Abort_IT+0xd8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d01a      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x96>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_DMA_Abort_IT+0xdc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_Abort_IT+0x90>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_DMA_Abort_IT+0xe0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00a      	beq.n	8001cfe <HAL_DMA_Abort_IT+0x8a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_DMA_Abort_IT+0xe4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d102      	bne.n	8001cf8 <HAL_DMA_Abort_IT+0x84>
 8001cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cf6:	e00e      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cfc:	e00b      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d02:	e008      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	e005      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0e:	e002      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001d10:	2310      	movs	r3, #16
 8001d12:	e000      	b.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001d14:	2301      	movs	r3, #1
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_DMA_Abort_IT+0xe8>)
 8001d18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
    } 
  }
  return status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40020008 	.word	0x40020008
 8001d48:	4002001c 	.word	0x4002001c
 8001d4c:	40020030 	.word	0x40020030
 8001d50:	40020044 	.word	0x40020044
 8001d54:	40020058 	.word	0x40020058
 8001d58:	4002006c 	.word	0x4002006c
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e169      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d74:	2201      	movs	r2, #1
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8158 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a9a      	ldr	r2, [pc, #616]	; (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d05e      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a98      	ldr	r2, [pc, #608]	; (8002000 <HAL_GPIO_Init+0x2a0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d875      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001da2:	4a98      	ldr	r2, [pc, #608]	; (8002004 <HAL_GPIO_Init+0x2a4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d058      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001da8:	4a96      	ldr	r2, [pc, #600]	; (8002004 <HAL_GPIO_Init+0x2a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d86f      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dae:	4a96      	ldr	r2, [pc, #600]	; (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d052      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001db4:	4a94      	ldr	r2, [pc, #592]	; (8002008 <HAL_GPIO_Init+0x2a8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d869      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dba:	4a94      	ldr	r2, [pc, #592]	; (800200c <HAL_GPIO_Init+0x2ac>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04c      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dc0:	4a92      	ldr	r2, [pc, #584]	; (800200c <HAL_GPIO_Init+0x2ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d863      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dc6:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d046      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a90      	ldr	r2, [pc, #576]	; (8002010 <HAL_GPIO_Init+0x2b0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d85d      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d82a      	bhi.n	8001e2c <HAL_GPIO_Init+0xcc>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d859      	bhi.n	8001e8e <HAL_GPIO_Init+0x12e>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_GPIO_Init+0x80>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e47 	.word	0x08001e47
 8001dec:	08001e89 	.word	0x08001e89
 8001df0:	08001e8f 	.word	0x08001e8f
 8001df4:	08001e8f 	.word	0x08001e8f
 8001df8:	08001e8f 	.word	0x08001e8f
 8001dfc:	08001e8f 	.word	0x08001e8f
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001e8f 	.word	0x08001e8f
 8001e08:	08001e8f 	.word	0x08001e8f
 8001e0c:	08001e8f 	.word	0x08001e8f
 8001e10:	08001e8f 	.word	0x08001e8f
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e8f 	.word	0x08001e8f
 8001e1c:	08001e8f 	.word	0x08001e8f
 8001e20:	08001e8f 	.word	0x08001e8f
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e51 	.word	0x08001e51
 8001e2c:	4a79      	ldr	r2, [pc, #484]	; (8002014 <HAL_GPIO_Init+0x2b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e32:	e02c      	b.n	8001e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e029      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	3304      	adds	r3, #4
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e024      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e01f      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	330c      	adds	r3, #12
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e01a      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e62:	2304      	movs	r3, #4
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e013      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	611a      	str	r2, [r3, #16]
          break;
 8001e7a:	e009      	b.n	8001e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	615a      	str	r2, [r3, #20]
          break;
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x130>
          break;
 8001e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2bff      	cmp	r3, #255	; 0xff
 8001e94:	d801      	bhi.n	8001e9a <HAL_GPIO_Init+0x13a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_Init+0x13e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d802      	bhi.n	8001eac <HAL_GPIO_Init+0x14c>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x152>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	210f      	movs	r1, #15
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b1 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x2b8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef8:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_GPIO_Init+0x2bc>)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a40      	ldr	r2, [pc, #256]	; (8002020 <HAL_GPIO_Init+0x2c0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_GPIO_Init+0x1ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3f      	ldr	r2, [pc, #252]	; (8002024 <HAL_GPIO_Init+0x2c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1e8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <HAL_GPIO_Init+0x2c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <HAL_GPIO_Init+0x2cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1e0>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1ee>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <HAL_GPIO_Init+0x2bc>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	492c      	ldr	r1, [pc, #176]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4928      	ldr	r1, [pc, #160]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	491e      	ldr	r1, [pc, #120]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4918      	ldr	r1, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4914      	ldr	r1, [pc, #80]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d021      	beq.n	8002034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e021      	b.n	8002042 <HAL_GPIO_Init+0x2e2>
 8001ffe:	bf00      	nop
 8002000:	10320000 	.word	0x10320000
 8002004:	10310000 	.word	0x10310000
 8002008:	10220000 	.word	0x10220000
 800200c:	10210000 	.word	0x10210000
 8002010:	10120000 	.word	0x10120000
 8002014:	10110000 	.word	0x10110000
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40011400 	.word	0x40011400
 8002030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_GPIO_Init+0x304>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	43db      	mvns	r3, r3
 800203c:	4909      	ldr	r1, [pc, #36]	; (8002064 <HAL_GPIO_Init+0x304>)
 800203e:	4013      	ands	r3, r2
 8002040:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f ae8e 	bne.w	8001d74 <HAL_GPIO_Init+0x14>
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	372c      	adds	r7, #44	; 0x2c
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e26c      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00c      	beq.n	80020ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d112      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
 80020a0:	4b8c      	ldr	r3, [pc, #560]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06c      	beq.n	8002194 <HAL_RCC_OscConfig+0x12c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d168      	bne.n	8002194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e246      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x76>
 80020d0:	4b80      	ldr	r3, [pc, #512]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7f      	ldr	r2, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e02e      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xbc>
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a71      	ldr	r2, [pc, #452]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002124:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fc44 	bl	80019d0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fc40 	bl	80019d0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1fa      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xe4>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fc30 	bl	80019d0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fc2c 	bl	80019d0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1e6      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x10c>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1ba      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4939      	ldr	r1, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff fbe5 	bl	80019d0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fbe1 	bl	80019d0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e19b      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fbc4 	bl	80019d0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff fbc0 	bl	80019d0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e17a      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fba4 	bl	80019d0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff fba0 	bl	80019d0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e15a      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f000 fad8 	bl	8002860 <RCC_Delay>
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff fb8a 	bl	80019d0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff fb86 	bl	80019d0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e140      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	42420000 	.word	0x42420000
 80022dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	4b9e      	ldr	r3, [pc, #632]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e9      	bne.n	80022c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a6 	beq.w	8002446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b97      	ldr	r3, [pc, #604]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b94      	ldr	r3, [pc, #592]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a93      	ldr	r2, [pc, #588]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b91      	ldr	r3, [pc, #580]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_RCC_OscConfig+0x4f8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_RCC_OscConfig+0x4f8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a8a      	ldr	r2, [pc, #552]	; (8002560 <HAL_RCC_OscConfig+0x4f8>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7ff fb47 	bl	80019d0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7ff fb43 	bl	80019d0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0fd      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x4f8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x312>
 800236c:	4b7b      	ldr	r3, [pc, #492]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a7a      	ldr	r2, [pc, #488]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x334>
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a75      	ldr	r2, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b73      	ldr	r3, [pc, #460]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a72      	ldr	r2, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x356>
 80023a4:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a6c      	ldr	r2, [pc, #432]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a69      	ldr	r2, [pc, #420]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a66      	ldr	r2, [pc, #408]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a63      	ldr	r2, [pc, #396]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff faf7 	bl	80019d0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff faf3 	bl	80019d0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0ab      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b57      	ldr	r3, [pc, #348]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x37e>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fae1 	bl	80019d0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fadd 	bl	80019d0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e095      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a47      	ldr	r2, [pc, #284]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8081 	beq.w	8002552 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d061      	beq.n	8002520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d146      	bne.n	80024f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_OscConfig+0x4fc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff fab1 	bl	80019d0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff faad 	bl	80019d0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e067      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	492d      	ldr	r1, [pc, #180]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a19      	ldr	r1, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	430b      	orrs	r3, r1
 80024be:	4927      	ldr	r1, [pc, #156]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x4fc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fa81 	bl	80019d0 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff fa7d 	bl	80019d0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e037      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46a>
 80024f0:	e02f      	b.n	8002552 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_RCC_OscConfig+0x4fc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fa6a 	bl	80019d0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff fa66 	bl	80019d0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e020      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x498>
 800251e:	e018      	b.n	8002552 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e013      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x4f4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	40007000 	.word	0x40007000
 8002564:	42420060 	.word	0x42420060

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d0      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4965      	ldr	r1, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d040      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7ff f9ba 	bl	80019d0 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7ff f9b6 	bl	80019d0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e053      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d210      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4922      	ldr	r1, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f918 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	080074e8 	.word	0x080074e8
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b490      	push	{r4, r7}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002744:	1d3c      	adds	r4, r7, #4
 8002746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800274c:	f240 2301 	movw	r3, #513	; 0x201
 8002750:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x40>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x46>
 800277a:	e02d      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	e02d      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800278e:	4413      	add	r3, r2
 8002790:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002794:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0c5b      	lsrs	r3, r3, #17
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ae:	4413      	add	r3, r2
 80027b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ba:	fb02 f203 	mul.w	r2, r2, r3
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	623b      	str	r3, [r7, #32]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	6a3b      	ldr	r3, [r7, #32]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc90      	pop	{r4, r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	080074d8 	.word	0x080074d8
 80027f0:	40021000 	.word	0x40021000
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	003d0900 	.word	0x003d0900

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_RCC_GetHCLKFreq+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000000 	.word	0x20000000

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	080074f8 	.word	0x080074f8

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffde 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	080074f8 	.word	0x080074f8

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e03f      	b.n	800292e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe ffa0 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fc85 	bl	80031f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b08a      	sub	sp, #40	; 0x28
 800293a:	af02      	add	r7, sp, #8
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b20      	cmp	r3, #32
 8002954:	d17c      	bne.n	8002a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_UART_Transmit+0x2c>
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e075      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_UART_Transmit+0x3e>
 8002970:	2302      	movs	r3, #2
 8002972:	e06e      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2221      	movs	r2, #33	; 0x21
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800298a:	f7ff f821 	bl	80019d0 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a4:	d108      	bne.n	80029b8 <HAL_UART_Transmit+0x82>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e003      	b.n	80029c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029c8:	e02a      	b.n	8002a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fa38 	bl	8002e4a <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e036      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3302      	adds	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e007      	b.n	8002a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1cf      	bne.n	80029ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa08 	bl	8002e4a <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e006      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d11d      	bne.n	8002ab0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_UART_Receive_IT+0x26>
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e016      	b.n	8002ab2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Receive_IT+0x38>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e00f      	b.n	8002ab2 <HAL_UART_Receive_IT+0x58>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa19 	bl	8002ede <UART_Start_Receive_IT>
 8002aac:	4603      	mov	r3, r0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_UART_IRQHandler+0x52>
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fac9 	bl	800309e <UART_Receive_IT>
      return;
 8002b0c:	e17b      	b.n	8002e06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80b1 	beq.w	8002c78 <HAL_UART_IRQHandler+0x1bc>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_UART_IRQHandler+0x70>
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a6 	beq.w	8002c78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_UART_IRQHandler+0x90>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_UART_IRQHandler+0xb0>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0202 	orr.w	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_UART_IRQHandler+0xd0>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00f      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xfa>
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <HAL_UART_IRQHandler+0xee>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f043 0208 	orr.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 811e 	beq.w	8002dfc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_UART_IRQHandler+0x11e>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa62 	bl	800309e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_UART_IRQHandler+0x146>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d031      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9a4 	bl	8002f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d023      	beq.n	8002c5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d013      	beq.n	8002c56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_UART_IRQHandler+0x350>)
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f81a 	bl	8001c74 <HAL_DMA_Abort_IT>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	e00e      	b.n	8002c74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8e3 	bl	8002e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00a      	b.n	8002c74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8df 	bl	8002e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e006      	b.n	8002c74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8db 	bl	8002e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c72:	e0c3      	b.n	8002dfc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	bf00      	nop
    return;
 8002c76:	e0c1      	b.n	8002dfc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 80a1 	bne.w	8002dc4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 809b 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8095 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04e      	beq.n	8002d5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8098 	beq.w	8002e00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cd4:	8a3a      	ldrh	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	f080 8092 	bcs.w	8002e00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8a3a      	ldrh	r2, [r7, #16]
 8002ce0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d02b      	beq.n	8002d44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0210 	bic.w	r2, r2, #16
 8002d38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff5d 	bl	8001bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f86d 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d5a:	e051      	b.n	8002e00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d047      	beq.n	8002e04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d74:	8a7b      	ldrh	r3, [r7, #18]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d044      	beq.n	8002e04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0210 	bic.w	r2, r2, #16
 8002db6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002db8:	8a7b      	ldrh	r3, [r7, #18]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f839 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dc2:	e01f      	b.n	8002e04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_UART_IRQHandler+0x324>
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8f9 	bl	8002fd0 <UART_Transmit_IT>
    return;
 8002dde:	e012      	b.n	8002e06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <HAL_UART_IRQHandler+0x34a>
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f93a 	bl	800306e <UART_EndTransmit_IT>
    return;
 8002dfa:	e004      	b.n	8002e06 <HAL_UART_IRQHandler+0x34a>
    return;
 8002dfc:	bf00      	nop
 8002dfe:	e002      	b.n	8002e06 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e04:	bf00      	nop
  }
}
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	08002fa9 	.word	0x08002fa9

08002e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5a:	e02c      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d028      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6a:	f7fe fdb1 	bl	80019d0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d21d      	bcs.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0c3      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2222      	movs	r2, #34	; 0x22
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f22:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0220 	orr.w	r2, r2, #32
 8002f42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0210 	bic.w	r2, r2, #16
 8002f8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff2d 	bl	8002e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b21      	cmp	r3, #33	; 0x21
 8002fe2:	d13e      	bne.n	8003062 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d114      	bne.n	8003018 <UART_Transmit_IT+0x48>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d110      	bne.n	8003018 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]
 8003016:	e008      	b.n	800302a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6211      	str	r1, [r2, #32]
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29b      	uxth	r3, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4619      	mov	r1, r3
 8003038:	84d1      	strh	r1, [r2, #38]	; 0x26
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003084:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff febe 	bl	8002e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b22      	cmp	r3, #34	; 0x22
 80030b0:	f040 8099 	bne.w	80031e6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d117      	bne.n	80030ee <UART_Receive_IT+0x50>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030dc:	b29a      	uxth	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
 80030ec:	e026      	b.n	800313c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d007      	beq.n	8003112 <UART_Receive_IT+0x74>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <UART_Receive_IT+0x82>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e008      	b.n	8003132 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312c:	b2da      	uxtb	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29b      	uxth	r3, r3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4619      	mov	r1, r3
 800314a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800314c:	2b00      	cmp	r3, #0
 800314e:	d148      	bne.n	80031e2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0220 	bic.w	r2, r2, #32
 800315e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	2b01      	cmp	r3, #1
 800318e:	d123      	bne.n	80031d8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d10a      	bne.n	80031ca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fe2f 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
 80031d6:	e002      	b.n	80031de <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fe f88f 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e002      	b.n	80031e8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800322a:	f023 030c 	bic.w	r3, r3, #12
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	430b      	orrs	r3, r1
 8003236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <UART_SetConfig+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d103      	bne.n	8003260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7ff faee 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	e002      	b.n	8003266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7ff fad6 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 8003264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	0119      	lsls	r1, r3, #4
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a15      	ldr	r2, [pc, #84]	; (8003308 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	4419      	add	r1, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <UART_SetConfig+0x118>)
 80032d6:	fba3 0302 	umull	r0, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2064      	movs	r0, #100	; 0x64
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <UART_SetConfig+0x118>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	440a      	add	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013800 	.word	0x40013800
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <atoff>:
 800330c:	2100      	movs	r1, #0
 800330e:	f001 bb37 	b.w	8004980 <strtof>
	...

08003314 <__errno>:
 8003314:	4b01      	ldr	r3, [pc, #4]	; (800331c <__errno+0x8>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000000c 	.word	0x2000000c

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	2600      	movs	r6, #0
 8003324:	4d0c      	ldr	r5, [pc, #48]	; (8003358 <__libc_init_array+0x38>)
 8003326:	4c0d      	ldr	r4, [pc, #52]	; (800335c <__libc_init_array+0x3c>)
 8003328:	1b64      	subs	r4, r4, r5
 800332a:	10a4      	asrs	r4, r4, #2
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	f004 f8a4 	bl	800747c <_init>
 8003334:	2600      	movs	r6, #0
 8003336:	4d0a      	ldr	r5, [pc, #40]	; (8003360 <__libc_init_array+0x40>)
 8003338:	4c0a      	ldr	r4, [pc, #40]	; (8003364 <__libc_init_array+0x44>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	080079ac 	.word	0x080079ac
 800335c:	080079ac 	.word	0x080079ac
 8003360:	080079ac 	.word	0x080079ac
 8003364:	080079b0 	.word	0x080079b0

08003368 <memset>:
 8003368:	4603      	mov	r3, r0
 800336a:	4402      	add	r2, r0
 800336c:	4293      	cmp	r3, r2
 800336e:	d100      	bne.n	8003372 <memset+0xa>
 8003370:	4770      	bx	lr
 8003372:	f803 1b01 	strb.w	r1, [r3], #1
 8003376:	e7f9      	b.n	800336c <memset+0x4>

08003378 <__cvt>:
 8003378:	2b00      	cmp	r3, #0
 800337a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800337e:	461f      	mov	r7, r3
 8003380:	bfbb      	ittet	lt
 8003382:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003386:	461f      	movlt	r7, r3
 8003388:	2300      	movge	r3, #0
 800338a:	232d      	movlt	r3, #45	; 0x2d
 800338c:	b088      	sub	sp, #32
 800338e:	4614      	mov	r4, r2
 8003390:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003392:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003394:	7013      	strb	r3, [r2, #0]
 8003396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003398:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800339c:	f023 0820 	bic.w	r8, r3, #32
 80033a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033a4:	d005      	beq.n	80033b2 <__cvt+0x3a>
 80033a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80033aa:	d100      	bne.n	80033ae <__cvt+0x36>
 80033ac:	3501      	adds	r5, #1
 80033ae:	2302      	movs	r3, #2
 80033b0:	e000      	b.n	80033b4 <__cvt+0x3c>
 80033b2:	2303      	movs	r3, #3
 80033b4:	aa07      	add	r2, sp, #28
 80033b6:	9204      	str	r2, [sp, #16]
 80033b8:	aa06      	add	r2, sp, #24
 80033ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033be:	e9cd 3500 	strd	r3, r5, [sp]
 80033c2:	4622      	mov	r2, r4
 80033c4:	463b      	mov	r3, r7
 80033c6:	f001 fc7b 	bl	8004cc0 <_dtoa_r>
 80033ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033ce:	4606      	mov	r6, r0
 80033d0:	d102      	bne.n	80033d8 <__cvt+0x60>
 80033d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033d4:	07db      	lsls	r3, r3, #31
 80033d6:	d522      	bpl.n	800341e <__cvt+0xa6>
 80033d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033dc:	eb06 0905 	add.w	r9, r6, r5
 80033e0:	d110      	bne.n	8003404 <__cvt+0x8c>
 80033e2:	7833      	ldrb	r3, [r6, #0]
 80033e4:	2b30      	cmp	r3, #48	; 0x30
 80033e6:	d10a      	bne.n	80033fe <__cvt+0x86>
 80033e8:	2200      	movs	r2, #0
 80033ea:	2300      	movs	r3, #0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4639      	mov	r1, r7
 80033f0:	f7fd fada 	bl	80009a8 <__aeabi_dcmpeq>
 80033f4:	b918      	cbnz	r0, 80033fe <__cvt+0x86>
 80033f6:	f1c5 0501 	rsb	r5, r5, #1
 80033fa:	f8ca 5000 	str.w	r5, [sl]
 80033fe:	f8da 3000 	ldr.w	r3, [sl]
 8003402:	4499      	add	r9, r3
 8003404:	2200      	movs	r2, #0
 8003406:	2300      	movs	r3, #0
 8003408:	4620      	mov	r0, r4
 800340a:	4639      	mov	r1, r7
 800340c:	f7fd facc 	bl	80009a8 <__aeabi_dcmpeq>
 8003410:	b108      	cbz	r0, 8003416 <__cvt+0x9e>
 8003412:	f8cd 901c 	str.w	r9, [sp, #28]
 8003416:	2230      	movs	r2, #48	; 0x30
 8003418:	9b07      	ldr	r3, [sp, #28]
 800341a:	454b      	cmp	r3, r9
 800341c:	d307      	bcc.n	800342e <__cvt+0xb6>
 800341e:	4630      	mov	r0, r6
 8003420:	9b07      	ldr	r3, [sp, #28]
 8003422:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003424:	1b9b      	subs	r3, r3, r6
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	b008      	add	sp, #32
 800342a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	9107      	str	r1, [sp, #28]
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e7f0      	b.n	8003418 <__cvt+0xa0>

08003436 <__exponent>:
 8003436:	4603      	mov	r3, r0
 8003438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	f803 2b02 	strb.w	r2, [r3], #2
 8003440:	bfb6      	itet	lt
 8003442:	222d      	movlt	r2, #45	; 0x2d
 8003444:	222b      	movge	r2, #43	; 0x2b
 8003446:	4249      	neglt	r1, r1
 8003448:	2909      	cmp	r1, #9
 800344a:	7042      	strb	r2, [r0, #1]
 800344c:	dd2b      	ble.n	80034a6 <__exponent+0x70>
 800344e:	f10d 0407 	add.w	r4, sp, #7
 8003452:	46a4      	mov	ip, r4
 8003454:	270a      	movs	r7, #10
 8003456:	fb91 f6f7 	sdiv	r6, r1, r7
 800345a:	460a      	mov	r2, r1
 800345c:	46a6      	mov	lr, r4
 800345e:	fb07 1516 	mls	r5, r7, r6, r1
 8003462:	2a63      	cmp	r2, #99	; 0x63
 8003464:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003468:	4631      	mov	r1, r6
 800346a:	f104 34ff 	add.w	r4, r4, #4294967295
 800346e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003472:	dcf0      	bgt.n	8003456 <__exponent+0x20>
 8003474:	3130      	adds	r1, #48	; 0x30
 8003476:	f1ae 0502 	sub.w	r5, lr, #2
 800347a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800347e:	4629      	mov	r1, r5
 8003480:	1c44      	adds	r4, r0, #1
 8003482:	4561      	cmp	r1, ip
 8003484:	d30a      	bcc.n	800349c <__exponent+0x66>
 8003486:	f10d 0209 	add.w	r2, sp, #9
 800348a:	eba2 020e 	sub.w	r2, r2, lr
 800348e:	4565      	cmp	r5, ip
 8003490:	bf88      	it	hi
 8003492:	2200      	movhi	r2, #0
 8003494:	4413      	add	r3, r2
 8003496:	1a18      	subs	r0, r3, r0
 8003498:	b003      	add	sp, #12
 800349a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034a0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80034a4:	e7ed      	b.n	8003482 <__exponent+0x4c>
 80034a6:	2330      	movs	r3, #48	; 0x30
 80034a8:	3130      	adds	r1, #48	; 0x30
 80034aa:	7083      	strb	r3, [r0, #2]
 80034ac:	70c1      	strb	r1, [r0, #3]
 80034ae:	1d03      	adds	r3, r0, #4
 80034b0:	e7f1      	b.n	8003496 <__exponent+0x60>
	...

080034b4 <_printf_float>:
 80034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b8:	b091      	sub	sp, #68	; 0x44
 80034ba:	460c      	mov	r4, r1
 80034bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80034c0:	4616      	mov	r6, r2
 80034c2:	461f      	mov	r7, r3
 80034c4:	4605      	mov	r5, r0
 80034c6:	f002 ff07 	bl	80062d8 <_localeconv_r>
 80034ca:	6803      	ldr	r3, [r0, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	9309      	str	r3, [sp, #36]	; 0x24
 80034d0:	f7fc fe3e 	bl	8000150 <strlen>
 80034d4:	2300      	movs	r3, #0
 80034d6:	930e      	str	r3, [sp, #56]	; 0x38
 80034d8:	f8d8 3000 	ldr.w	r3, [r8]
 80034dc:	900a      	str	r0, [sp, #40]	; 0x28
 80034de:	3307      	adds	r3, #7
 80034e0:	f023 0307 	bic.w	r3, r3, #7
 80034e4:	f103 0208 	add.w	r2, r3, #8
 80034e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034ec:	f8d4 b000 	ldr.w	fp, [r4]
 80034f0:	f8c8 2000 	str.w	r2, [r8]
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034fc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003500:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003504:	930b      	str	r3, [sp, #44]	; 0x2c
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	4640      	mov	r0, r8
 800350c:	4b9c      	ldr	r3, [pc, #624]	; (8003780 <_printf_float+0x2cc>)
 800350e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003510:	f7fd fa7c 	bl	8000a0c <__aeabi_dcmpun>
 8003514:	bb70      	cbnz	r0, 8003574 <_printf_float+0xc0>
 8003516:	f04f 32ff 	mov.w	r2, #4294967295
 800351a:	4640      	mov	r0, r8
 800351c:	4b98      	ldr	r3, [pc, #608]	; (8003780 <_printf_float+0x2cc>)
 800351e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003520:	f7fd fa56 	bl	80009d0 <__aeabi_dcmple>
 8003524:	bb30      	cbnz	r0, 8003574 <_printf_float+0xc0>
 8003526:	2200      	movs	r2, #0
 8003528:	2300      	movs	r3, #0
 800352a:	4640      	mov	r0, r8
 800352c:	4651      	mov	r1, sl
 800352e:	f7fd fa45 	bl	80009bc <__aeabi_dcmplt>
 8003532:	b110      	cbz	r0, 800353a <_printf_float+0x86>
 8003534:	232d      	movs	r3, #45	; 0x2d
 8003536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353a:	4b92      	ldr	r3, [pc, #584]	; (8003784 <_printf_float+0x2d0>)
 800353c:	4892      	ldr	r0, [pc, #584]	; (8003788 <_printf_float+0x2d4>)
 800353e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003542:	bf94      	ite	ls
 8003544:	4698      	movls	r8, r3
 8003546:	4680      	movhi	r8, r0
 8003548:	2303      	movs	r3, #3
 800354a:	f04f 0a00 	mov.w	sl, #0
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	f02b 0304 	bic.w	r3, fp, #4
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	4633      	mov	r3, r6
 8003558:	4621      	mov	r1, r4
 800355a:	4628      	mov	r0, r5
 800355c:	9700      	str	r7, [sp, #0]
 800355e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003560:	f000 f9d4 	bl	800390c <_printf_common>
 8003564:	3001      	adds	r0, #1
 8003566:	f040 8090 	bne.w	800368a <_printf_float+0x1d6>
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	b011      	add	sp, #68	; 0x44
 8003570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003574:	4642      	mov	r2, r8
 8003576:	4653      	mov	r3, sl
 8003578:	4640      	mov	r0, r8
 800357a:	4651      	mov	r1, sl
 800357c:	f7fd fa46 	bl	8000a0c <__aeabi_dcmpun>
 8003580:	b148      	cbz	r0, 8003596 <_printf_float+0xe2>
 8003582:	f1ba 0f00 	cmp.w	sl, #0
 8003586:	bfb8      	it	lt
 8003588:	232d      	movlt	r3, #45	; 0x2d
 800358a:	4880      	ldr	r0, [pc, #512]	; (800378c <_printf_float+0x2d8>)
 800358c:	bfb8      	it	lt
 800358e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <_printf_float+0x2dc>)
 8003594:	e7d3      	b.n	800353e <_printf_float+0x8a>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	d142      	bne.n	8003626 <_printf_float+0x172>
 80035a0:	2306      	movs	r3, #6
 80035a2:	6063      	str	r3, [r4, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	9206      	str	r2, [sp, #24]
 80035a8:	aa0e      	add	r2, sp, #56	; 0x38
 80035aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80035ae:	aa0d      	add	r2, sp, #52	; 0x34
 80035b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80035b4:	9203      	str	r2, [sp, #12]
 80035b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80035ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	4642      	mov	r2, r8
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4628      	mov	r0, r5
 80035c8:	4653      	mov	r3, sl
 80035ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80035cc:	f7ff fed4 	bl	8003378 <__cvt>
 80035d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035d2:	4680      	mov	r8, r0
 80035d4:	2947      	cmp	r1, #71	; 0x47
 80035d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035d8:	d108      	bne.n	80035ec <_printf_float+0x138>
 80035da:	1cc8      	adds	r0, r1, #3
 80035dc:	db02      	blt.n	80035e4 <_printf_float+0x130>
 80035de:	6863      	ldr	r3, [r4, #4]
 80035e0:	4299      	cmp	r1, r3
 80035e2:	dd40      	ble.n	8003666 <_printf_float+0x1b2>
 80035e4:	f1a9 0902 	sub.w	r9, r9, #2
 80035e8:	fa5f f989 	uxtb.w	r9, r9
 80035ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035f0:	d81f      	bhi.n	8003632 <_printf_float+0x17e>
 80035f2:	464a      	mov	r2, r9
 80035f4:	3901      	subs	r1, #1
 80035f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035fa:	910d      	str	r1, [sp, #52]	; 0x34
 80035fc:	f7ff ff1b 	bl	8003436 <__exponent>
 8003600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003602:	4682      	mov	sl, r0
 8003604:	1813      	adds	r3, r2, r0
 8003606:	2a01      	cmp	r2, #1
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	dc02      	bgt.n	8003612 <_printf_float+0x15e>
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	07d2      	lsls	r2, r2, #31
 8003610:	d501      	bpl.n	8003616 <_printf_float+0x162>
 8003612:	3301      	adds	r3, #1
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800361a:	2b00      	cmp	r3, #0
 800361c:	d09b      	beq.n	8003556 <_printf_float+0xa2>
 800361e:	232d      	movs	r3, #45	; 0x2d
 8003620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003624:	e797      	b.n	8003556 <_printf_float+0xa2>
 8003626:	2947      	cmp	r1, #71	; 0x47
 8003628:	d1bc      	bne.n	80035a4 <_printf_float+0xf0>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ba      	bne.n	80035a4 <_printf_float+0xf0>
 800362e:	2301      	movs	r3, #1
 8003630:	e7b7      	b.n	80035a2 <_printf_float+0xee>
 8003632:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003636:	d118      	bne.n	800366a <_printf_float+0x1b6>
 8003638:	2900      	cmp	r1, #0
 800363a:	6863      	ldr	r3, [r4, #4]
 800363c:	dd0b      	ble.n	8003656 <_printf_float+0x1a2>
 800363e:	6121      	str	r1, [r4, #16]
 8003640:	b913      	cbnz	r3, 8003648 <_printf_float+0x194>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	07d0      	lsls	r0, r2, #31
 8003646:	d502      	bpl.n	800364e <_printf_float+0x19a>
 8003648:	3301      	adds	r3, #1
 800364a:	440b      	add	r3, r1
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	f04f 0a00 	mov.w	sl, #0
 8003652:	65a1      	str	r1, [r4, #88]	; 0x58
 8003654:	e7df      	b.n	8003616 <_printf_float+0x162>
 8003656:	b913      	cbnz	r3, 800365e <_printf_float+0x1aa>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	07d2      	lsls	r2, r2, #31
 800365c:	d501      	bpl.n	8003662 <_printf_float+0x1ae>
 800365e:	3302      	adds	r3, #2
 8003660:	e7f4      	b.n	800364c <_printf_float+0x198>
 8003662:	2301      	movs	r3, #1
 8003664:	e7f2      	b.n	800364c <_printf_float+0x198>
 8003666:	f04f 0967 	mov.w	r9, #103	; 0x67
 800366a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800366c:	4299      	cmp	r1, r3
 800366e:	db05      	blt.n	800367c <_printf_float+0x1c8>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	6121      	str	r1, [r4, #16]
 8003674:	07d8      	lsls	r0, r3, #31
 8003676:	d5ea      	bpl.n	800364e <_printf_float+0x19a>
 8003678:	1c4b      	adds	r3, r1, #1
 800367a:	e7e7      	b.n	800364c <_printf_float+0x198>
 800367c:	2900      	cmp	r1, #0
 800367e:	bfcc      	ite	gt
 8003680:	2201      	movgt	r2, #1
 8003682:	f1c1 0202 	rsble	r2, r1, #2
 8003686:	4413      	add	r3, r2
 8003688:	e7e0      	b.n	800364c <_printf_float+0x198>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	055a      	lsls	r2, r3, #21
 800368e:	d407      	bmi.n	80036a0 <_printf_float+0x1ec>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	4642      	mov	r2, r8
 8003694:	4631      	mov	r1, r6
 8003696:	4628      	mov	r0, r5
 8003698:	47b8      	blx	r7
 800369a:	3001      	adds	r0, #1
 800369c:	d12b      	bne.n	80036f6 <_printf_float+0x242>
 800369e:	e764      	b.n	800356a <_printf_float+0xb6>
 80036a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80036a4:	f240 80dd 	bls.w	8003862 <_printf_float+0x3ae>
 80036a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036ac:	2200      	movs	r2, #0
 80036ae:	2300      	movs	r3, #0
 80036b0:	f7fd f97a 	bl	80009a8 <__aeabi_dcmpeq>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d033      	beq.n	8003720 <_printf_float+0x26c>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4631      	mov	r1, r6
 80036bc:	4628      	mov	r0, r5
 80036be:	4a35      	ldr	r2, [pc, #212]	; (8003794 <_printf_float+0x2e0>)
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	f43f af51 	beq.w	800356a <_printf_float+0xb6>
 80036c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036cc:	429a      	cmp	r2, r3
 80036ce:	db02      	blt.n	80036d6 <_printf_float+0x222>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	07d8      	lsls	r0, r3, #31
 80036d4:	d50f      	bpl.n	80036f6 <_printf_float+0x242>
 80036d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f af42 	beq.w	800356a <_printf_float+0xb6>
 80036e6:	f04f 0800 	mov.w	r8, #0
 80036ea:	f104 091a 	add.w	r9, r4, #26
 80036ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4543      	cmp	r3, r8
 80036f4:	dc09      	bgt.n	800370a <_printf_float+0x256>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	079b      	lsls	r3, r3, #30
 80036fa:	f100 8102 	bmi.w	8003902 <_printf_float+0x44e>
 80036fe:	68e0      	ldr	r0, [r4, #12]
 8003700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003702:	4298      	cmp	r0, r3
 8003704:	bfb8      	it	lt
 8003706:	4618      	movlt	r0, r3
 8003708:	e731      	b.n	800356e <_printf_float+0xba>
 800370a:	2301      	movs	r3, #1
 800370c:	464a      	mov	r2, r9
 800370e:	4631      	mov	r1, r6
 8003710:	4628      	mov	r0, r5
 8003712:	47b8      	blx	r7
 8003714:	3001      	adds	r0, #1
 8003716:	f43f af28 	beq.w	800356a <_printf_float+0xb6>
 800371a:	f108 0801 	add.w	r8, r8, #1
 800371e:	e7e6      	b.n	80036ee <_printf_float+0x23a>
 8003720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003722:	2b00      	cmp	r3, #0
 8003724:	dc38      	bgt.n	8003798 <_printf_float+0x2e4>
 8003726:	2301      	movs	r3, #1
 8003728:	4631      	mov	r1, r6
 800372a:	4628      	mov	r0, r5
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <_printf_float+0x2e0>)
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	f43f af1a 	beq.w	800356a <_printf_float+0xb6>
 8003736:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800373a:	4313      	orrs	r3, r2
 800373c:	d102      	bne.n	8003744 <_printf_float+0x290>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	07d9      	lsls	r1, r3, #31
 8003742:	d5d8      	bpl.n	80036f6 <_printf_float+0x242>
 8003744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003748:	4631      	mov	r1, r6
 800374a:	4628      	mov	r0, r5
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	f43f af0b 	beq.w	800356a <_printf_float+0xb6>
 8003754:	f04f 0900 	mov.w	r9, #0
 8003758:	f104 0a1a 	add.w	sl, r4, #26
 800375c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800375e:	425b      	negs	r3, r3
 8003760:	454b      	cmp	r3, r9
 8003762:	dc01      	bgt.n	8003768 <_printf_float+0x2b4>
 8003764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003766:	e794      	b.n	8003692 <_printf_float+0x1de>
 8003768:	2301      	movs	r3, #1
 800376a:	4652      	mov	r2, sl
 800376c:	4631      	mov	r1, r6
 800376e:	4628      	mov	r0, r5
 8003770:	47b8      	blx	r7
 8003772:	3001      	adds	r0, #1
 8003774:	f43f aef9 	beq.w	800356a <_printf_float+0xb6>
 8003778:	f109 0901 	add.w	r9, r9, #1
 800377c:	e7ee      	b.n	800375c <_printf_float+0x2a8>
 800377e:	bf00      	nop
 8003780:	7fefffff 	.word	0x7fefffff
 8003784:	08007504 	.word	0x08007504
 8003788:	08007508 	.word	0x08007508
 800378c:	08007510 	.word	0x08007510
 8003790:	0800750c 	.word	0x0800750c
 8003794:	08007514 	.word	0x08007514
 8003798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800379a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800379c:	429a      	cmp	r2, r3
 800379e:	bfa8      	it	ge
 80037a0:	461a      	movge	r2, r3
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	4691      	mov	r9, r2
 80037a6:	dc37      	bgt.n	8003818 <_printf_float+0x364>
 80037a8:	f04f 0b00 	mov.w	fp, #0
 80037ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037b0:	f104 021a 	add.w	r2, r4, #26
 80037b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80037b8:	ebaa 0309 	sub.w	r3, sl, r9
 80037bc:	455b      	cmp	r3, fp
 80037be:	dc33      	bgt.n	8003828 <_printf_float+0x374>
 80037c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037c4:	429a      	cmp	r2, r3
 80037c6:	db3b      	blt.n	8003840 <_printf_float+0x38c>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07da      	lsls	r2, r3, #31
 80037cc:	d438      	bmi.n	8003840 <_printf_float+0x38c>
 80037ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037d2:	eba2 030a 	sub.w	r3, r2, sl
 80037d6:	eba2 0901 	sub.w	r9, r2, r1
 80037da:	4599      	cmp	r9, r3
 80037dc:	bfa8      	it	ge
 80037de:	4699      	movge	r9, r3
 80037e0:	f1b9 0f00 	cmp.w	r9, #0
 80037e4:	dc34      	bgt.n	8003850 <_printf_float+0x39c>
 80037e6:	f04f 0800 	mov.w	r8, #0
 80037ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ee:	f104 0a1a 	add.w	sl, r4, #26
 80037f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	eba3 0309 	sub.w	r3, r3, r9
 80037fc:	4543      	cmp	r3, r8
 80037fe:	f77f af7a 	ble.w	80036f6 <_printf_float+0x242>
 8003802:	2301      	movs	r3, #1
 8003804:	4652      	mov	r2, sl
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f aeac 	beq.w	800356a <_printf_float+0xb6>
 8003812:	f108 0801 	add.w	r8, r8, #1
 8003816:	e7ec      	b.n	80037f2 <_printf_float+0x33e>
 8003818:	4613      	mov	r3, r2
 800381a:	4631      	mov	r1, r6
 800381c:	4642      	mov	r2, r8
 800381e:	4628      	mov	r0, r5
 8003820:	47b8      	blx	r7
 8003822:	3001      	adds	r0, #1
 8003824:	d1c0      	bne.n	80037a8 <_printf_float+0x2f4>
 8003826:	e6a0      	b.n	800356a <_printf_float+0xb6>
 8003828:	2301      	movs	r3, #1
 800382a:	4631      	mov	r1, r6
 800382c:	4628      	mov	r0, r5
 800382e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003830:	47b8      	blx	r7
 8003832:	3001      	adds	r0, #1
 8003834:	f43f ae99 	beq.w	800356a <_printf_float+0xb6>
 8003838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800383a:	f10b 0b01 	add.w	fp, fp, #1
 800383e:	e7b9      	b.n	80037b4 <_printf_float+0x300>
 8003840:	4631      	mov	r1, r6
 8003842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003846:	4628      	mov	r0, r5
 8003848:	47b8      	blx	r7
 800384a:	3001      	adds	r0, #1
 800384c:	d1bf      	bne.n	80037ce <_printf_float+0x31a>
 800384e:	e68c      	b.n	800356a <_printf_float+0xb6>
 8003850:	464b      	mov	r3, r9
 8003852:	4631      	mov	r1, r6
 8003854:	4628      	mov	r0, r5
 8003856:	eb08 020a 	add.w	r2, r8, sl
 800385a:	47b8      	blx	r7
 800385c:	3001      	adds	r0, #1
 800385e:	d1c2      	bne.n	80037e6 <_printf_float+0x332>
 8003860:	e683      	b.n	800356a <_printf_float+0xb6>
 8003862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003864:	2a01      	cmp	r2, #1
 8003866:	dc01      	bgt.n	800386c <_printf_float+0x3b8>
 8003868:	07db      	lsls	r3, r3, #31
 800386a:	d537      	bpl.n	80038dc <_printf_float+0x428>
 800386c:	2301      	movs	r3, #1
 800386e:	4642      	mov	r2, r8
 8003870:	4631      	mov	r1, r6
 8003872:	4628      	mov	r0, r5
 8003874:	47b8      	blx	r7
 8003876:	3001      	adds	r0, #1
 8003878:	f43f ae77 	beq.w	800356a <_printf_float+0xb6>
 800387c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	47b8      	blx	r7
 8003886:	3001      	adds	r0, #1
 8003888:	f43f ae6f 	beq.w	800356a <_printf_float+0xb6>
 800388c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003890:	2200      	movs	r2, #0
 8003892:	2300      	movs	r3, #0
 8003894:	f7fd f888 	bl	80009a8 <__aeabi_dcmpeq>
 8003898:	b9d8      	cbnz	r0, 80038d2 <_printf_float+0x41e>
 800389a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389c:	f108 0201 	add.w	r2, r8, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	d10e      	bne.n	80038ca <_printf_float+0x416>
 80038ac:	e65d      	b.n	800356a <_printf_float+0xb6>
 80038ae:	2301      	movs	r3, #1
 80038b0:	464a      	mov	r2, r9
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f ae56 	beq.w	800356a <_printf_float+0xb6>
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038c4:	3b01      	subs	r3, #1
 80038c6:	4543      	cmp	r3, r8
 80038c8:	dcf1      	bgt.n	80038ae <_printf_float+0x3fa>
 80038ca:	4653      	mov	r3, sl
 80038cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038d0:	e6e0      	b.n	8003694 <_printf_float+0x1e0>
 80038d2:	f04f 0800 	mov.w	r8, #0
 80038d6:	f104 091a 	add.w	r9, r4, #26
 80038da:	e7f2      	b.n	80038c2 <_printf_float+0x40e>
 80038dc:	2301      	movs	r3, #1
 80038de:	4642      	mov	r2, r8
 80038e0:	e7df      	b.n	80038a2 <_printf_float+0x3ee>
 80038e2:	2301      	movs	r3, #1
 80038e4:	464a      	mov	r2, r9
 80038e6:	4631      	mov	r1, r6
 80038e8:	4628      	mov	r0, r5
 80038ea:	47b8      	blx	r7
 80038ec:	3001      	adds	r0, #1
 80038ee:	f43f ae3c 	beq.w	800356a <_printf_float+0xb6>
 80038f2:	f108 0801 	add.w	r8, r8, #1
 80038f6:	68e3      	ldr	r3, [r4, #12]
 80038f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038fa:	1a5b      	subs	r3, r3, r1
 80038fc:	4543      	cmp	r3, r8
 80038fe:	dcf0      	bgt.n	80038e2 <_printf_float+0x42e>
 8003900:	e6fd      	b.n	80036fe <_printf_float+0x24a>
 8003902:	f04f 0800 	mov.w	r8, #0
 8003906:	f104 0919 	add.w	r9, r4, #25
 800390a:	e7f4      	b.n	80038f6 <_printf_float+0x442>

0800390c <_printf_common>:
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	4616      	mov	r6, r2
 8003912:	4699      	mov	r9, r3
 8003914:	688a      	ldr	r2, [r1, #8]
 8003916:	690b      	ldr	r3, [r1, #16]
 8003918:	4607      	mov	r7, r0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfb8      	it	lt
 800391e:	4613      	movlt	r3, r2
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003926:	460c      	mov	r4, r1
 8003928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800392c:	b10a      	cbz	r2, 8003932 <_printf_common+0x26>
 800392e:	3301      	adds	r3, #1
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	0699      	lsls	r1, r3, #26
 8003936:	bf42      	ittt	mi
 8003938:	6833      	ldrmi	r3, [r6, #0]
 800393a:	3302      	addmi	r3, #2
 800393c:	6033      	strmi	r3, [r6, #0]
 800393e:	6825      	ldr	r5, [r4, #0]
 8003940:	f015 0506 	ands.w	r5, r5, #6
 8003944:	d106      	bne.n	8003954 <_printf_common+0x48>
 8003946:	f104 0a19 	add.w	sl, r4, #25
 800394a:	68e3      	ldr	r3, [r4, #12]
 800394c:	6832      	ldr	r2, [r6, #0]
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	42ab      	cmp	r3, r5
 8003952:	dc28      	bgt.n	80039a6 <_printf_common+0x9a>
 8003954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003958:	1e13      	subs	r3, r2, #0
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	bf18      	it	ne
 800395e:	2301      	movne	r3, #1
 8003960:	0692      	lsls	r2, r2, #26
 8003962:	d42d      	bmi.n	80039c0 <_printf_common+0xb4>
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d020      	beq.n	80039b4 <_printf_common+0xa8>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	68e5      	ldr	r5, [r4, #12]
 8003976:	f003 0306 	and.w	r3, r3, #6
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf18      	it	ne
 800397e:	2500      	movne	r5, #0
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	bf08      	it	eq
 800398a:	1aad      	subeq	r5, r5, r2
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	bf08      	it	eq
 8003990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003994:	4293      	cmp	r3, r2
 8003996:	bfc4      	itt	gt
 8003998:	1a9b      	subgt	r3, r3, r2
 800399a:	18ed      	addgt	r5, r5, r3
 800399c:	341a      	adds	r4, #26
 800399e:	42b5      	cmp	r5, r6
 80039a0:	d11a      	bne.n	80039d8 <_printf_common+0xcc>
 80039a2:	2000      	movs	r0, #0
 80039a4:	e008      	b.n	80039b8 <_printf_common+0xac>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4652      	mov	r2, sl
 80039aa:	4649      	mov	r1, r9
 80039ac:	4638      	mov	r0, r7
 80039ae:	47c0      	blx	r8
 80039b0:	3001      	adds	r0, #1
 80039b2:	d103      	bne.n	80039bc <_printf_common+0xb0>
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	3501      	adds	r5, #1
 80039be:	e7c4      	b.n	800394a <_printf_common+0x3e>
 80039c0:	2030      	movs	r0, #48	; 0x30
 80039c2:	18e1      	adds	r1, r4, r3
 80039c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039ce:	4422      	add	r2, r4
 80039d0:	3302      	adds	r3, #2
 80039d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d6:	e7c5      	b.n	8003964 <_printf_common+0x58>
 80039d8:	2301      	movs	r3, #1
 80039da:	4622      	mov	r2, r4
 80039dc:	4649      	mov	r1, r9
 80039de:	4638      	mov	r0, r7
 80039e0:	47c0      	blx	r8
 80039e2:	3001      	adds	r0, #1
 80039e4:	d0e6      	beq.n	80039b4 <_printf_common+0xa8>
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7d9      	b.n	800399e <_printf_common+0x92>
	...

080039ec <_printf_i>:
 80039ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	460c      	mov	r4, r1
 80039f2:	7e27      	ldrb	r7, [r4, #24]
 80039f4:	4691      	mov	r9, r2
 80039f6:	2f78      	cmp	r7, #120	; 0x78
 80039f8:	4680      	mov	r8, r0
 80039fa:	469a      	mov	sl, r3
 80039fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a02:	d807      	bhi.n	8003a14 <_printf_i+0x28>
 8003a04:	2f62      	cmp	r7, #98	; 0x62
 8003a06:	d80a      	bhi.n	8003a1e <_printf_i+0x32>
 8003a08:	2f00      	cmp	r7, #0
 8003a0a:	f000 80d9 	beq.w	8003bc0 <_printf_i+0x1d4>
 8003a0e:	2f58      	cmp	r7, #88	; 0x58
 8003a10:	f000 80a4 	beq.w	8003b5c <_printf_i+0x170>
 8003a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a1c:	e03a      	b.n	8003a94 <_printf_i+0xa8>
 8003a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a22:	2b15      	cmp	r3, #21
 8003a24:	d8f6      	bhi.n	8003a14 <_printf_i+0x28>
 8003a26:	a001      	add	r0, pc, #4	; (adr r0, 8003a2c <_printf_i+0x40>)
 8003a28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a2c:	08003a85 	.word	0x08003a85
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003a15 	.word	0x08003a15
 8003a38:	08003a15 	.word	0x08003a15
 8003a3c:	08003a15 	.word	0x08003a15
 8003a40:	08003a15 	.word	0x08003a15
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003a15 	.word	0x08003a15
 8003a4c:	08003a15 	.word	0x08003a15
 8003a50:	08003a15 	.word	0x08003a15
 8003a54:	08003a15 	.word	0x08003a15
 8003a58:	08003ba7 	.word	0x08003ba7
 8003a5c:	08003ac9 	.word	0x08003ac9
 8003a60:	08003b89 	.word	0x08003b89
 8003a64:	08003a15 	.word	0x08003a15
 8003a68:	08003a15 	.word	0x08003a15
 8003a6c:	08003bc9 	.word	0x08003bc9
 8003a70:	08003a15 	.word	0x08003a15
 8003a74:	08003ac9 	.word	0x08003ac9
 8003a78:	08003a15 	.word	0x08003a15
 8003a7c:	08003a15 	.word	0x08003a15
 8003a80:	08003b91 	.word	0x08003b91
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	600a      	str	r2, [r1, #0]
 8003a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0a4      	b.n	8003be2 <_printf_i+0x1f6>
 8003a98:	6825      	ldr	r5, [r4, #0]
 8003a9a:	6808      	ldr	r0, [r1, #0]
 8003a9c:	062e      	lsls	r6, r5, #24
 8003a9e:	f100 0304 	add.w	r3, r0, #4
 8003aa2:	d50a      	bpl.n	8003aba <_printf_i+0xce>
 8003aa4:	6805      	ldr	r5, [r0, #0]
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	2d00      	cmp	r5, #0
 8003aaa:	da03      	bge.n	8003ab4 <_printf_i+0xc8>
 8003aac:	232d      	movs	r3, #45	; 0x2d
 8003aae:	426d      	negs	r5, r5
 8003ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	485e      	ldr	r0, [pc, #376]	; (8003c30 <_printf_i+0x244>)
 8003ab8:	e019      	b.n	8003aee <_printf_i+0x102>
 8003aba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003abe:	6805      	ldr	r5, [r0, #0]
 8003ac0:	600b      	str	r3, [r1, #0]
 8003ac2:	bf18      	it	ne
 8003ac4:	b22d      	sxthne	r5, r5
 8003ac6:	e7ef      	b.n	8003aa8 <_printf_i+0xbc>
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	6825      	ldr	r5, [r4, #0]
 8003acc:	1d18      	adds	r0, r3, #4
 8003ace:	6008      	str	r0, [r1, #0]
 8003ad0:	0628      	lsls	r0, r5, #24
 8003ad2:	d501      	bpl.n	8003ad8 <_printf_i+0xec>
 8003ad4:	681d      	ldr	r5, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <_printf_i+0xf2>
 8003ad8:	0669      	lsls	r1, r5, #25
 8003ada:	d5fb      	bpl.n	8003ad4 <_printf_i+0xe8>
 8003adc:	881d      	ldrh	r5, [r3, #0]
 8003ade:	2f6f      	cmp	r7, #111	; 0x6f
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2308      	moveq	r3, #8
 8003ae4:	230a      	movne	r3, #10
 8003ae6:	4852      	ldr	r0, [pc, #328]	; (8003c30 <_printf_i+0x244>)
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aee:	6866      	ldr	r6, [r4, #4]
 8003af0:	2e00      	cmp	r6, #0
 8003af2:	bfa8      	it	ge
 8003af4:	6821      	ldrge	r1, [r4, #0]
 8003af6:	60a6      	str	r6, [r4, #8]
 8003af8:	bfa4      	itt	ge
 8003afa:	f021 0104 	bicge.w	r1, r1, #4
 8003afe:	6021      	strge	r1, [r4, #0]
 8003b00:	b90d      	cbnz	r5, 8003b06 <_printf_i+0x11a>
 8003b02:	2e00      	cmp	r6, #0
 8003b04:	d04d      	beq.n	8003ba2 <_printf_i+0x1b6>
 8003b06:	4616      	mov	r6, r2
 8003b08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003b10:	5dc7      	ldrb	r7, [r0, r7]
 8003b12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b16:	462f      	mov	r7, r5
 8003b18:	42bb      	cmp	r3, r7
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	d9f4      	bls.n	8003b08 <_printf_i+0x11c>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d10b      	bne.n	8003b3a <_printf_i+0x14e>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07df      	lsls	r7, r3, #31
 8003b26:	d508      	bpl.n	8003b3a <_printf_i+0x14e>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	6861      	ldr	r1, [r4, #4]
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	bfde      	ittt	le
 8003b30:	2330      	movle	r3, #48	; 0x30
 8003b32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b3a:	1b92      	subs	r2, r2, r6
 8003b3c:	6122      	str	r2, [r4, #16]
 8003b3e:	464b      	mov	r3, r9
 8003b40:	4621      	mov	r1, r4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f8cd a000 	str.w	sl, [sp]
 8003b48:	aa03      	add	r2, sp, #12
 8003b4a:	f7ff fedf 	bl	800390c <_printf_common>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d14c      	bne.n	8003bec <_printf_i+0x200>
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	b004      	add	sp, #16
 8003b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5c:	4834      	ldr	r0, [pc, #208]	; (8003c30 <_printf_i+0x244>)
 8003b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b62:	680e      	ldr	r6, [r1, #0]
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b6a:	061f      	lsls	r7, r3, #24
 8003b6c:	600e      	str	r6, [r1, #0]
 8003b6e:	d514      	bpl.n	8003b9a <_printf_i+0x1ae>
 8003b70:	07d9      	lsls	r1, r3, #31
 8003b72:	bf44      	itt	mi
 8003b74:	f043 0320 	orrmi.w	r3, r3, #32
 8003b78:	6023      	strmi	r3, [r4, #0]
 8003b7a:	b91d      	cbnz	r5, 8003b84 <_printf_i+0x198>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	2310      	movs	r3, #16
 8003b86:	e7af      	b.n	8003ae8 <_printf_i+0xfc>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	f043 0320 	orr.w	r3, r3, #32
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	2378      	movs	r3, #120	; 0x78
 8003b92:	4828      	ldr	r0, [pc, #160]	; (8003c34 <_printf_i+0x248>)
 8003b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b98:	e7e3      	b.n	8003b62 <_printf_i+0x176>
 8003b9a:	065e      	lsls	r6, r3, #25
 8003b9c:	bf48      	it	mi
 8003b9e:	b2ad      	uxthmi	r5, r5
 8003ba0:	e7e6      	b.n	8003b70 <_printf_i+0x184>
 8003ba2:	4616      	mov	r6, r2
 8003ba4:	e7bb      	b.n	8003b1e <_printf_i+0x132>
 8003ba6:	680b      	ldr	r3, [r1, #0]
 8003ba8:	6826      	ldr	r6, [r4, #0]
 8003baa:	1d1d      	adds	r5, r3, #4
 8003bac:	6960      	ldr	r0, [r4, #20]
 8003bae:	600d      	str	r5, [r1, #0]
 8003bb0:	0635      	lsls	r5, r6, #24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	d501      	bpl.n	8003bba <_printf_i+0x1ce>
 8003bb6:	6018      	str	r0, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <_printf_i+0x1d4>
 8003bba:	0671      	lsls	r1, r6, #25
 8003bbc:	d5fb      	bpl.n	8003bb6 <_printf_i+0x1ca>
 8003bbe:	8018      	strh	r0, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4616      	mov	r6, r2
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	e7ba      	b.n	8003b3e <_printf_i+0x152>
 8003bc8:	680b      	ldr	r3, [r1, #0]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	600a      	str	r2, [r1, #0]
 8003bce:	681e      	ldr	r6, [r3, #0]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	6862      	ldr	r2, [r4, #4]
 8003bd6:	f002 fc05 	bl	80063e4 <memchr>
 8003bda:	b108      	cbz	r0, 8003be0 <_printf_i+0x1f4>
 8003bdc:	1b80      	subs	r0, r0, r6
 8003bde:	6060      	str	r0, [r4, #4]
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	2300      	movs	r3, #0
 8003be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bea:	e7a8      	b.n	8003b3e <_printf_i+0x152>
 8003bec:	4632      	mov	r2, r6
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	47d0      	blx	sl
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0ab      	beq.n	8003b52 <_printf_i+0x166>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	079b      	lsls	r3, r3, #30
 8003bfe:	d413      	bmi.n	8003c28 <_printf_i+0x23c>
 8003c00:	68e0      	ldr	r0, [r4, #12]
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	4298      	cmp	r0, r3
 8003c06:	bfb8      	it	lt
 8003c08:	4618      	movlt	r0, r3
 8003c0a:	e7a4      	b.n	8003b56 <_printf_i+0x16a>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4649      	mov	r1, r9
 8003c12:	4640      	mov	r0, r8
 8003c14:	47d0      	blx	sl
 8003c16:	3001      	adds	r0, #1
 8003c18:	d09b      	beq.n	8003b52 <_printf_i+0x166>
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	68e3      	ldr	r3, [r4, #12]
 8003c1e:	9903      	ldr	r1, [sp, #12]
 8003c20:	1a5b      	subs	r3, r3, r1
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	dcf2      	bgt.n	8003c0c <_printf_i+0x220>
 8003c26:	e7eb      	b.n	8003c00 <_printf_i+0x214>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f104 0619 	add.w	r6, r4, #25
 8003c2e:	e7f5      	b.n	8003c1c <_printf_i+0x230>
 8003c30:	08007516 	.word	0x08007516
 8003c34:	08007527 	.word	0x08007527

08003c38 <iprintf>:
 8003c38:	b40f      	push	{r0, r1, r2, r3}
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <iprintf+0x2c>)
 8003c3c:	b513      	push	{r0, r1, r4, lr}
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	b124      	cbz	r4, 8003c4c <iprintf+0x14>
 8003c42:	69a3      	ldr	r3, [r4, #24]
 8003c44:	b913      	cbnz	r3, 8003c4c <iprintf+0x14>
 8003c46:	4620      	mov	r0, r4
 8003c48:	f001 ff42 	bl	8005ad0 <__sinit>
 8003c4c:	ab05      	add	r3, sp, #20
 8003c4e:	4620      	mov	r0, r4
 8003c50:	9a04      	ldr	r2, [sp, #16]
 8003c52:	68a1      	ldr	r1, [r4, #8]
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	f003 f975 	bl	8006f44 <_vfiprintf_r>
 8003c5a:	b002      	add	sp, #8
 8003c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c60:	b004      	add	sp, #16
 8003c62:	4770      	bx	lr
 8003c64:	2000000c 	.word	0x2000000c

08003c68 <_puts_r>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	460e      	mov	r6, r1
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	b118      	cbz	r0, 8003c78 <_puts_r+0x10>
 8003c70:	6983      	ldr	r3, [r0, #24]
 8003c72:	b90b      	cbnz	r3, 8003c78 <_puts_r+0x10>
 8003c74:	f001 ff2c 	bl	8005ad0 <__sinit>
 8003c78:	69ab      	ldr	r3, [r5, #24]
 8003c7a:	68ac      	ldr	r4, [r5, #8]
 8003c7c:	b913      	cbnz	r3, 8003c84 <_puts_r+0x1c>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f001 ff26 	bl	8005ad0 <__sinit>
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <_puts_r+0xd0>)
 8003c86:	429c      	cmp	r4, r3
 8003c88:	d120      	bne.n	8003ccc <_puts_r+0x64>
 8003c8a:	686c      	ldr	r4, [r5, #4]
 8003c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c8e:	07db      	lsls	r3, r3, #31
 8003c90:	d405      	bmi.n	8003c9e <_puts_r+0x36>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	0598      	lsls	r0, r3, #22
 8003c96:	d402      	bmi.n	8003c9e <_puts_r+0x36>
 8003c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c9a:	f002 fb22 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	0719      	lsls	r1, r3, #28
 8003ca2:	d51d      	bpl.n	8003ce0 <_puts_r+0x78>
 8003ca4:	6923      	ldr	r3, [r4, #16]
 8003ca6:	b1db      	cbz	r3, 8003ce0 <_puts_r+0x78>
 8003ca8:	3e01      	subs	r6, #1
 8003caa:	68a3      	ldr	r3, [r4, #8]
 8003cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60a3      	str	r3, [r4, #8]
 8003cb4:	bb39      	cbnz	r1, 8003d06 <_puts_r+0x9e>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da38      	bge.n	8003d2c <_puts_r+0xc4>
 8003cba:	4622      	mov	r2, r4
 8003cbc:	210a      	movs	r1, #10
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 feb0 	bl	8004a24 <__swbuf_r>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d011      	beq.n	8003cec <_puts_r+0x84>
 8003cc8:	250a      	movs	r5, #10
 8003cca:	e011      	b.n	8003cf0 <_puts_r+0x88>
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <_puts_r+0xd4>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d101      	bne.n	8003cd6 <_puts_r+0x6e>
 8003cd2:	68ac      	ldr	r4, [r5, #8]
 8003cd4:	e7da      	b.n	8003c8c <_puts_r+0x24>
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <_puts_r+0xd8>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	bf08      	it	eq
 8003cdc:	68ec      	ldreq	r4, [r5, #12]
 8003cde:	e7d5      	b.n	8003c8c <_puts_r+0x24>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 fef0 	bl	8004ac8 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d0dd      	beq.n	8003ca8 <_puts_r+0x40>
 8003cec:	f04f 35ff 	mov.w	r5, #4294967295
 8003cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf2:	07da      	lsls	r2, r3, #31
 8003cf4:	d405      	bmi.n	8003d02 <_puts_r+0x9a>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	059b      	lsls	r3, r3, #22
 8003cfa:	d402      	bmi.n	8003d02 <_puts_r+0x9a>
 8003cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfe:	f002 faf1 	bl	80062e4 <__retarget_lock_release_recursive>
 8003d02:	4628      	mov	r0, r5
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da04      	bge.n	8003d14 <_puts_r+0xac>
 8003d0a:	69a2      	ldr	r2, [r4, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dc06      	bgt.n	8003d1e <_puts_r+0xb6>
 8003d10:	290a      	cmp	r1, #10
 8003d12:	d004      	beq.n	8003d1e <_puts_r+0xb6>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	6022      	str	r2, [r4, #0]
 8003d1a:	7019      	strb	r1, [r3, #0]
 8003d1c:	e7c5      	b.n	8003caa <_puts_r+0x42>
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 fe7f 	bl	8004a24 <__swbuf_r>
 8003d26:	3001      	adds	r0, #1
 8003d28:	d1bf      	bne.n	8003caa <_puts_r+0x42>
 8003d2a:	e7df      	b.n	8003cec <_puts_r+0x84>
 8003d2c:	250a      	movs	r5, #10
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	6022      	str	r2, [r4, #0]
 8003d34:	701d      	strb	r5, [r3, #0]
 8003d36:	e7db      	b.n	8003cf0 <_puts_r+0x88>
 8003d38:	0800763c 	.word	0x0800763c
 8003d3c:	0800765c 	.word	0x0800765c
 8003d40:	0800761c 	.word	0x0800761c

08003d44 <puts>:
 8003d44:	4b02      	ldr	r3, [pc, #8]	; (8003d50 <puts+0xc>)
 8003d46:	4601      	mov	r1, r0
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	f7ff bf8d 	b.w	8003c68 <_puts_r>
 8003d4e:	bf00      	nop
 8003d50:	2000000c 	.word	0x2000000c

08003d54 <sulp>:
 8003d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d58:	460f      	mov	r7, r1
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	f002 fece 	bl	8006afc <__ulp>
 8003d60:	4604      	mov	r4, r0
 8003d62:	460d      	mov	r5, r1
 8003d64:	f1b8 0f00 	cmp.w	r8, #0
 8003d68:	d011      	beq.n	8003d8e <sulp+0x3a>
 8003d6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003d6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	dd0b      	ble.n	8003d8e <sulp+0x3a>
 8003d76:	2400      	movs	r4, #0
 8003d78:	051b      	lsls	r3, r3, #20
 8003d7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003d7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f7fc fba7 	bl	80004d8 <__aeabi_dmul>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003d98 <_strtod_l>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	469b      	mov	fp, r3
 8003d9e:	2300      	movs	r3, #0
 8003da0:	b0a1      	sub	sp, #132	; 0x84
 8003da2:	931c      	str	r3, [sp, #112]	; 0x70
 8003da4:	4ba1      	ldr	r3, [pc, #644]	; (800402c <_strtod_l+0x294>)
 8003da6:	4682      	mov	sl, r0
 8003da8:	681f      	ldr	r7, [r3, #0]
 8003daa:	460e      	mov	r6, r1
 8003dac:	4638      	mov	r0, r7
 8003dae:	9217      	str	r2, [sp, #92]	; 0x5c
 8003db0:	f7fc f9ce 	bl	8000150 <strlen>
 8003db4:	f04f 0800 	mov.w	r8, #0
 8003db8:	4604      	mov	r4, r0
 8003dba:	f04f 0900 	mov.w	r9, #0
 8003dbe:	961b      	str	r6, [sp, #108]	; 0x6c
 8003dc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	2a2b      	cmp	r2, #43	; 0x2b
 8003dc6:	d04c      	beq.n	8003e62 <_strtod_l+0xca>
 8003dc8:	d83a      	bhi.n	8003e40 <_strtod_l+0xa8>
 8003dca:	2a0d      	cmp	r2, #13
 8003dcc:	d833      	bhi.n	8003e36 <_strtod_l+0x9e>
 8003dce:	2a08      	cmp	r2, #8
 8003dd0:	d833      	bhi.n	8003e3a <_strtod_l+0xa2>
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d03d      	beq.n	8003e52 <_strtod_l+0xba>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8003dda:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003ddc:	782b      	ldrb	r3, [r5, #0]
 8003dde:	2b30      	cmp	r3, #48	; 0x30
 8003de0:	f040 80af 	bne.w	8003f42 <_strtod_l+0x1aa>
 8003de4:	786b      	ldrb	r3, [r5, #1]
 8003de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003dea:	2b58      	cmp	r3, #88	; 0x58
 8003dec:	d16c      	bne.n	8003ec8 <_strtod_l+0x130>
 8003dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003df0:	4650      	mov	r0, sl
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	ab1c      	add	r3, sp, #112	; 0x70
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4a8d      	ldr	r2, [pc, #564]	; (8004030 <_strtod_l+0x298>)
 8003dfa:	f8cd b008 	str.w	fp, [sp, #8]
 8003dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003e00:	a91b      	add	r1, sp, #108	; 0x6c
 8003e02:	f001 ff6b 	bl	8005cdc <__gethex>
 8003e06:	f010 0607 	ands.w	r6, r0, #7
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	d005      	beq.n	8003e1a <_strtod_l+0x82>
 8003e0e:	2e06      	cmp	r6, #6
 8003e10:	d129      	bne.n	8003e66 <_strtod_l+0xce>
 8003e12:	2300      	movs	r3, #0
 8003e14:	3501      	adds	r5, #1
 8003e16:	951b      	str	r5, [sp, #108]	; 0x6c
 8003e18:	930c      	str	r3, [sp, #48]	; 0x30
 8003e1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8596 	bne.w	800494e <_strtod_l+0xbb6>
 8003e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e24:	b1d3      	cbz	r3, 8003e5c <_strtod_l+0xc4>
 8003e26:	4642      	mov	r2, r8
 8003e28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	b021      	add	sp, #132	; 0x84
 8003e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e36:	2a20      	cmp	r2, #32
 8003e38:	d1cd      	bne.n	8003dd6 <_strtod_l+0x3e>
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e3e:	e7bf      	b.n	8003dc0 <_strtod_l+0x28>
 8003e40:	2a2d      	cmp	r2, #45	; 0x2d
 8003e42:	d1c8      	bne.n	8003dd6 <_strtod_l+0x3e>
 8003e44:	2201      	movs	r2, #1
 8003e46:	920c      	str	r2, [sp, #48]	; 0x30
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003e4c:	785b      	ldrb	r3, [r3, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1c3      	bne.n	8003dda <_strtod_l+0x42>
 8003e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e54:	961b      	str	r6, [sp, #108]	; 0x6c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8577 	bne.w	800494a <_strtod_l+0xbb2>
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	e7e4      	b.n	8003e2c <_strtod_l+0x94>
 8003e62:	2200      	movs	r2, #0
 8003e64:	e7ef      	b.n	8003e46 <_strtod_l+0xae>
 8003e66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003e68:	b13a      	cbz	r2, 8003e7a <_strtod_l+0xe2>
 8003e6a:	2135      	movs	r1, #53	; 0x35
 8003e6c:	a81e      	add	r0, sp, #120	; 0x78
 8003e6e:	f002 ff49 	bl	8006d04 <__copybits>
 8003e72:	4650      	mov	r0, sl
 8003e74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003e76:	f002 fb11 	bl	800649c <_Bfree>
 8003e7a:	3e01      	subs	r6, #1
 8003e7c:	2e05      	cmp	r6, #5
 8003e7e:	d807      	bhi.n	8003e90 <_strtod_l+0xf8>
 8003e80:	e8df f006 	tbb	[pc, r6]
 8003e84:	1d180b0e 	.word	0x1d180b0e
 8003e88:	030e      	.short	0x030e
 8003e8a:	f04f 0900 	mov.w	r9, #0
 8003e8e:	46c8      	mov	r8, r9
 8003e90:	0721      	lsls	r1, r4, #28
 8003e92:	d5c2      	bpl.n	8003e1a <_strtod_l+0x82>
 8003e94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003e98:	e7bf      	b.n	8003e1a <_strtod_l+0x82>
 8003e9a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003e9e:	e7f7      	b.n	8003e90 <_strtod_l+0xf8>
 8003ea0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003ea2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003eb2:	e7ed      	b.n	8003e90 <_strtod_l+0xf8>
 8003eb4:	f04f 0800 	mov.w	r8, #0
 8003eb8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004034 <_strtod_l+0x29c>
 8003ebc:	e7e8      	b.n	8003e90 <_strtod_l+0xf8>
 8003ebe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ec2:	f04f 38ff 	mov.w	r8, #4294967295
 8003ec6:	e7e3      	b.n	8003e90 <_strtod_l+0xf8>
 8003ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d0f9      	beq.n	8003ec8 <_strtod_l+0x130>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0a0      	beq.n	8003e1a <_strtod_l+0x82>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	9307      	str	r3, [sp, #28]
 8003edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ede:	220a      	movs	r2, #10
 8003ee0:	9308      	str	r3, [sp, #32]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	469b      	mov	fp, r3
 8003ee6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003eea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003eec:	7805      	ldrb	r5, [r0, #0]
 8003eee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003ef2:	b2d9      	uxtb	r1, r3
 8003ef4:	2909      	cmp	r1, #9
 8003ef6:	d926      	bls.n	8003f46 <_strtod_l+0x1ae>
 8003ef8:	4622      	mov	r2, r4
 8003efa:	4639      	mov	r1, r7
 8003efc:	f003 f9af 	bl	800725e <strncmp>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d032      	beq.n	8003f6a <_strtod_l+0x1d2>
 8003f04:	2000      	movs	r0, #0
 8003f06:	462b      	mov	r3, r5
 8003f08:	465c      	mov	r4, fp
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	9004      	str	r0, [sp, #16]
 8003f0e:	2b65      	cmp	r3, #101	; 0x65
 8003f10:	d001      	beq.n	8003f16 <_strtod_l+0x17e>
 8003f12:	2b45      	cmp	r3, #69	; 0x45
 8003f14:	d113      	bne.n	8003f3e <_strtod_l+0x1a6>
 8003f16:	b91c      	cbnz	r4, 8003f20 <_strtod_l+0x188>
 8003f18:	9b07      	ldr	r3, [sp, #28]
 8003f1a:	4303      	orrs	r3, r0
 8003f1c:	d099      	beq.n	8003e52 <_strtod_l+0xba>
 8003f1e:	2400      	movs	r4, #0
 8003f20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003f22:	1c73      	adds	r3, r6, #1
 8003f24:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f26:	7873      	ldrb	r3, [r6, #1]
 8003f28:	2b2b      	cmp	r3, #43	; 0x2b
 8003f2a:	d078      	beq.n	800401e <_strtod_l+0x286>
 8003f2c:	2b2d      	cmp	r3, #45	; 0x2d
 8003f2e:	d07b      	beq.n	8004028 <_strtod_l+0x290>
 8003f30:	2700      	movs	r7, #0
 8003f32:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003f36:	2909      	cmp	r1, #9
 8003f38:	f240 8082 	bls.w	8004040 <_strtod_l+0x2a8>
 8003f3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f3e:	2500      	movs	r5, #0
 8003f40:	e09e      	b.n	8004080 <_strtod_l+0x2e8>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e7c9      	b.n	8003eda <_strtod_l+0x142>
 8003f46:	f1bb 0f08 	cmp.w	fp, #8
 8003f4a:	bfd5      	itete	le
 8003f4c:	9906      	ldrle	r1, [sp, #24]
 8003f4e:	9905      	ldrgt	r1, [sp, #20]
 8003f50:	fb02 3301 	mlale	r3, r2, r1, r3
 8003f54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003f58:	f100 0001 	add.w	r0, r0, #1
 8003f5c:	bfd4      	ite	le
 8003f5e:	9306      	strle	r3, [sp, #24]
 8003f60:	9305      	strgt	r3, [sp, #20]
 8003f62:	f10b 0b01 	add.w	fp, fp, #1
 8003f66:	901b      	str	r0, [sp, #108]	; 0x6c
 8003f68:	e7bf      	b.n	8003eea <_strtod_l+0x152>
 8003f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f6c:	191a      	adds	r2, r3, r4
 8003f6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f70:	5d1b      	ldrb	r3, [r3, r4]
 8003f72:	f1bb 0f00 	cmp.w	fp, #0
 8003f76:	d036      	beq.n	8003fe6 <_strtod_l+0x24e>
 8003f78:	465c      	mov	r4, fp
 8003f7a:	9004      	str	r0, [sp, #16]
 8003f7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003f80:	2a09      	cmp	r2, #9
 8003f82:	d912      	bls.n	8003faa <_strtod_l+0x212>
 8003f84:	2201      	movs	r2, #1
 8003f86:	e7c2      	b.n	8003f0e <_strtod_l+0x176>
 8003f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	2b30      	cmp	r3, #48	; 0x30
 8003f94:	d0f8      	beq.n	8003f88 <_strtod_l+0x1f0>
 8003f96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003f9a:	2a08      	cmp	r2, #8
 8003f9c:	f200 84dc 	bhi.w	8004958 <_strtod_l+0xbc0>
 8003fa0:	9004      	str	r0, [sp, #16]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003fa8:	9208      	str	r2, [sp, #32]
 8003faa:	3b30      	subs	r3, #48	; 0x30
 8003fac:	f100 0201 	add.w	r2, r0, #1
 8003fb0:	d013      	beq.n	8003fda <_strtod_l+0x242>
 8003fb2:	9904      	ldr	r1, [sp, #16]
 8003fb4:	1905      	adds	r5, r0, r4
 8003fb6:	4411      	add	r1, r2
 8003fb8:	9104      	str	r1, [sp, #16]
 8003fba:	4622      	mov	r2, r4
 8003fbc:	210a      	movs	r1, #10
 8003fbe:	42aa      	cmp	r2, r5
 8003fc0:	d113      	bne.n	8003fea <_strtod_l+0x252>
 8003fc2:	1822      	adds	r2, r4, r0
 8003fc4:	2a08      	cmp	r2, #8
 8003fc6:	f104 0401 	add.w	r4, r4, #1
 8003fca:	4404      	add	r4, r0
 8003fcc:	dc1b      	bgt.n	8004006 <_strtod_l+0x26e>
 8003fce:	220a      	movs	r2, #10
 8003fd0:	9906      	ldr	r1, [sp, #24]
 8003fd2:	fb02 3301 	mla	r3, r2, r1, r3
 8003fd6:	9306      	str	r3, [sp, #24]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fdc:	4610      	mov	r0, r2
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	911b      	str	r1, [sp, #108]	; 0x6c
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	e7ca      	b.n	8003f7c <_strtod_l+0x1e4>
 8003fe6:	4658      	mov	r0, fp
 8003fe8:	e7d3      	b.n	8003f92 <_strtod_l+0x1fa>
 8003fea:	2a08      	cmp	r2, #8
 8003fec:	dc04      	bgt.n	8003ff8 <_strtod_l+0x260>
 8003fee:	9f06      	ldr	r7, [sp, #24]
 8003ff0:	434f      	muls	r7, r1
 8003ff2:	9706      	str	r7, [sp, #24]
 8003ff4:	3201      	adds	r2, #1
 8003ff6:	e7e2      	b.n	8003fbe <_strtod_l+0x226>
 8003ff8:	1c57      	adds	r7, r2, #1
 8003ffa:	2f10      	cmp	r7, #16
 8003ffc:	bfde      	ittt	le
 8003ffe:	9f05      	ldrle	r7, [sp, #20]
 8004000:	434f      	mulle	r7, r1
 8004002:	9705      	strle	r7, [sp, #20]
 8004004:	e7f6      	b.n	8003ff4 <_strtod_l+0x25c>
 8004006:	2c10      	cmp	r4, #16
 8004008:	bfdf      	itttt	le
 800400a:	220a      	movle	r2, #10
 800400c:	9905      	ldrle	r1, [sp, #20]
 800400e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004012:	9305      	strle	r3, [sp, #20]
 8004014:	e7e0      	b.n	8003fd8 <_strtod_l+0x240>
 8004016:	2300      	movs	r3, #0
 8004018:	2201      	movs	r2, #1
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	e77c      	b.n	8003f18 <_strtod_l+0x180>
 800401e:	2700      	movs	r7, #0
 8004020:	1cb3      	adds	r3, r6, #2
 8004022:	931b      	str	r3, [sp, #108]	; 0x6c
 8004024:	78b3      	ldrb	r3, [r6, #2]
 8004026:	e784      	b.n	8003f32 <_strtod_l+0x19a>
 8004028:	2701      	movs	r7, #1
 800402a:	e7f9      	b.n	8004020 <_strtod_l+0x288>
 800402c:	080076e8 	.word	0x080076e8
 8004030:	08007538 	.word	0x08007538
 8004034:	7ff00000 	.word	0x7ff00000
 8004038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	911b      	str	r1, [sp, #108]	; 0x6c
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d0f9      	beq.n	8004038 <_strtod_l+0x2a0>
 8004044:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004048:	2908      	cmp	r1, #8
 800404a:	f63f af78 	bhi.w	8003f3e <_strtod_l+0x1a6>
 800404e:	f04f 0e0a 	mov.w	lr, #10
 8004052:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004066:	2d09      	cmp	r5, #9
 8004068:	d935      	bls.n	80040d6 <_strtod_l+0x33e>
 800406a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800406c:	1b49      	subs	r1, r1, r5
 800406e:	2908      	cmp	r1, #8
 8004070:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004074:	dc02      	bgt.n	800407c <_strtod_l+0x2e4>
 8004076:	4565      	cmp	r5, ip
 8004078:	bfa8      	it	ge
 800407a:	4665      	movge	r5, ip
 800407c:	b107      	cbz	r7, 8004080 <_strtod_l+0x2e8>
 800407e:	426d      	negs	r5, r5
 8004080:	2c00      	cmp	r4, #0
 8004082:	d14c      	bne.n	800411e <_strtod_l+0x386>
 8004084:	9907      	ldr	r1, [sp, #28]
 8004086:	4301      	orrs	r1, r0
 8004088:	f47f aec7 	bne.w	8003e1a <_strtod_l+0x82>
 800408c:	2a00      	cmp	r2, #0
 800408e:	f47f aee0 	bne.w	8003e52 <_strtod_l+0xba>
 8004092:	2b69      	cmp	r3, #105	; 0x69
 8004094:	d026      	beq.n	80040e4 <_strtod_l+0x34c>
 8004096:	dc23      	bgt.n	80040e0 <_strtod_l+0x348>
 8004098:	2b49      	cmp	r3, #73	; 0x49
 800409a:	d023      	beq.n	80040e4 <_strtod_l+0x34c>
 800409c:	2b4e      	cmp	r3, #78	; 0x4e
 800409e:	f47f aed8 	bne.w	8003e52 <_strtod_l+0xba>
 80040a2:	499c      	ldr	r1, [pc, #624]	; (8004314 <_strtod_l+0x57c>)
 80040a4:	a81b      	add	r0, sp, #108	; 0x6c
 80040a6:	f002 f867 	bl	8006178 <__match>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	f43f aed1 	beq.w	8003e52 <_strtod_l+0xba>
 80040b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b28      	cmp	r3, #40	; 0x28
 80040b6:	d12c      	bne.n	8004112 <_strtod_l+0x37a>
 80040b8:	4997      	ldr	r1, [pc, #604]	; (8004318 <_strtod_l+0x580>)
 80040ba:	aa1e      	add	r2, sp, #120	; 0x78
 80040bc:	a81b      	add	r0, sp, #108	; 0x6c
 80040be:	f002 f86f 	bl	80061a0 <__hexnan>
 80040c2:	2805      	cmp	r0, #5
 80040c4:	d125      	bne.n	8004112 <_strtod_l+0x37a>
 80040c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80040cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80040d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80040d4:	e6a1      	b.n	8003e1a <_strtod_l+0x82>
 80040d6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80040da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80040de:	e7bc      	b.n	800405a <_strtod_l+0x2c2>
 80040e0:	2b6e      	cmp	r3, #110	; 0x6e
 80040e2:	e7dc      	b.n	800409e <_strtod_l+0x306>
 80040e4:	498d      	ldr	r1, [pc, #564]	; (800431c <_strtod_l+0x584>)
 80040e6:	a81b      	add	r0, sp, #108	; 0x6c
 80040e8:	f002 f846 	bl	8006178 <__match>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f43f aeb0 	beq.w	8003e52 <_strtod_l+0xba>
 80040f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040f4:	498a      	ldr	r1, [pc, #552]	; (8004320 <_strtod_l+0x588>)
 80040f6:	3b01      	subs	r3, #1
 80040f8:	a81b      	add	r0, sp, #108	; 0x6c
 80040fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80040fc:	f002 f83c 	bl	8006178 <__match>
 8004100:	b910      	cbnz	r0, 8004108 <_strtod_l+0x370>
 8004102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004104:	3301      	adds	r3, #1
 8004106:	931b      	str	r3, [sp, #108]	; 0x6c
 8004108:	f04f 0800 	mov.w	r8, #0
 800410c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004330 <_strtod_l+0x598>
 8004110:	e683      	b.n	8003e1a <_strtod_l+0x82>
 8004112:	4884      	ldr	r0, [pc, #528]	; (8004324 <_strtod_l+0x58c>)
 8004114:	f003 f846 	bl	80071a4 <nan>
 8004118:	4680      	mov	r8, r0
 800411a:	4689      	mov	r9, r1
 800411c:	e67d      	b.n	8003e1a <_strtod_l+0x82>
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	f1bb 0f00 	cmp.w	fp, #0
 8004124:	bf08      	it	eq
 8004126:	46a3      	moveq	fp, r4
 8004128:	1aeb      	subs	r3, r5, r3
 800412a:	2c10      	cmp	r4, #16
 800412c:	9806      	ldr	r0, [sp, #24]
 800412e:	4626      	mov	r6, r4
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	bfa8      	it	ge
 8004134:	2610      	movge	r6, #16
 8004136:	f7fc f955 	bl	80003e4 <__aeabi_ui2d>
 800413a:	2c09      	cmp	r4, #9
 800413c:	4680      	mov	r8, r0
 800413e:	4689      	mov	r9, r1
 8004140:	dd13      	ble.n	800416a <_strtod_l+0x3d2>
 8004142:	4b79      	ldr	r3, [pc, #484]	; (8004328 <_strtod_l+0x590>)
 8004144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004148:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800414c:	f7fc f9c4 	bl	80004d8 <__aeabi_dmul>
 8004150:	4680      	mov	r8, r0
 8004152:	9805      	ldr	r0, [sp, #20]
 8004154:	4689      	mov	r9, r1
 8004156:	f7fc f945 	bl	80003e4 <__aeabi_ui2d>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4640      	mov	r0, r8
 8004160:	4649      	mov	r1, r9
 8004162:	f7fc f803 	bl	800016c <__adddf3>
 8004166:	4680      	mov	r8, r0
 8004168:	4689      	mov	r9, r1
 800416a:	2c0f      	cmp	r4, #15
 800416c:	dc36      	bgt.n	80041dc <_strtod_l+0x444>
 800416e:	9b07      	ldr	r3, [sp, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f43f ae52 	beq.w	8003e1a <_strtod_l+0x82>
 8004176:	dd22      	ble.n	80041be <_strtod_l+0x426>
 8004178:	2b16      	cmp	r3, #22
 800417a:	dc09      	bgt.n	8004190 <_strtod_l+0x3f8>
 800417c:	4c6a      	ldr	r4, [pc, #424]	; (8004328 <_strtod_l+0x590>)
 800417e:	4642      	mov	r2, r8
 8004180:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004184:	464b      	mov	r3, r9
 8004186:	e9d4 0100 	ldrd	r0, r1, [r4]
 800418a:	f7fc f9a5 	bl	80004d8 <__aeabi_dmul>
 800418e:	e7c3      	b.n	8004118 <_strtod_l+0x380>
 8004190:	9a07      	ldr	r2, [sp, #28]
 8004192:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004196:	4293      	cmp	r3, r2
 8004198:	db20      	blt.n	80041dc <_strtod_l+0x444>
 800419a:	4d63      	ldr	r5, [pc, #396]	; (8004328 <_strtod_l+0x590>)
 800419c:	f1c4 040f 	rsb	r4, r4, #15
 80041a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80041a4:	4642      	mov	r2, r8
 80041a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041aa:	464b      	mov	r3, r9
 80041ac:	f7fc f994 	bl	80004d8 <__aeabi_dmul>
 80041b0:	9b07      	ldr	r3, [sp, #28]
 80041b2:	1b1c      	subs	r4, r3, r4
 80041b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80041b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041bc:	e7e5      	b.n	800418a <_strtod_l+0x3f2>
 80041be:	9b07      	ldr	r3, [sp, #28]
 80041c0:	3316      	adds	r3, #22
 80041c2:	db0b      	blt.n	80041dc <_strtod_l+0x444>
 80041c4:	9b04      	ldr	r3, [sp, #16]
 80041c6:	4a58      	ldr	r2, [pc, #352]	; (8004328 <_strtod_l+0x590>)
 80041c8:	1b5d      	subs	r5, r3, r5
 80041ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80041ce:	4640      	mov	r0, r8
 80041d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041d4:	4649      	mov	r1, r9
 80041d6:	f7fc faa9 	bl	800072c <__aeabi_ddiv>
 80041da:	e79d      	b.n	8004118 <_strtod_l+0x380>
 80041dc:	9b07      	ldr	r3, [sp, #28]
 80041de:	1ba6      	subs	r6, r4, r6
 80041e0:	441e      	add	r6, r3
 80041e2:	2e00      	cmp	r6, #0
 80041e4:	dd71      	ble.n	80042ca <_strtod_l+0x532>
 80041e6:	f016 030f 	ands.w	r3, r6, #15
 80041ea:	d00a      	beq.n	8004202 <_strtod_l+0x46a>
 80041ec:	494e      	ldr	r1, [pc, #312]	; (8004328 <_strtod_l+0x590>)
 80041ee:	4642      	mov	r2, r8
 80041f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80041f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041f8:	464b      	mov	r3, r9
 80041fa:	f7fc f96d 	bl	80004d8 <__aeabi_dmul>
 80041fe:	4680      	mov	r8, r0
 8004200:	4689      	mov	r9, r1
 8004202:	f036 060f 	bics.w	r6, r6, #15
 8004206:	d050      	beq.n	80042aa <_strtod_l+0x512>
 8004208:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800420c:	dd27      	ble.n	800425e <_strtod_l+0x4c6>
 800420e:	f04f 0b00 	mov.w	fp, #0
 8004212:	f8cd b010 	str.w	fp, [sp, #16]
 8004216:	f8cd b020 	str.w	fp, [sp, #32]
 800421a:	f8cd b018 	str.w	fp, [sp, #24]
 800421e:	2322      	movs	r3, #34	; 0x22
 8004220:	f04f 0800 	mov.w	r8, #0
 8004224:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004330 <_strtod_l+0x598>
 8004228:	f8ca 3000 	str.w	r3, [sl]
 800422c:	9b08      	ldr	r3, [sp, #32]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f43f adf3 	beq.w	8003e1a <_strtod_l+0x82>
 8004234:	4650      	mov	r0, sl
 8004236:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004238:	f002 f930 	bl	800649c <_Bfree>
 800423c:	4650      	mov	r0, sl
 800423e:	9906      	ldr	r1, [sp, #24]
 8004240:	f002 f92c 	bl	800649c <_Bfree>
 8004244:	4650      	mov	r0, sl
 8004246:	9904      	ldr	r1, [sp, #16]
 8004248:	f002 f928 	bl	800649c <_Bfree>
 800424c:	4650      	mov	r0, sl
 800424e:	9908      	ldr	r1, [sp, #32]
 8004250:	f002 f924 	bl	800649c <_Bfree>
 8004254:	4659      	mov	r1, fp
 8004256:	4650      	mov	r0, sl
 8004258:	f002 f920 	bl	800649c <_Bfree>
 800425c:	e5dd      	b.n	8003e1a <_strtod_l+0x82>
 800425e:	2300      	movs	r3, #0
 8004260:	4640      	mov	r0, r8
 8004262:	4649      	mov	r1, r9
 8004264:	461f      	mov	r7, r3
 8004266:	1136      	asrs	r6, r6, #4
 8004268:	2e01      	cmp	r6, #1
 800426a:	dc21      	bgt.n	80042b0 <_strtod_l+0x518>
 800426c:	b10b      	cbz	r3, 8004272 <_strtod_l+0x4da>
 800426e:	4680      	mov	r8, r0
 8004270:	4689      	mov	r9, r1
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <_strtod_l+0x594>)
 8004274:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004278:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800427c:	4642      	mov	r2, r8
 800427e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004282:	464b      	mov	r3, r9
 8004284:	f7fc f928 	bl	80004d8 <__aeabi_dmul>
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <_strtod_l+0x598>)
 800428a:	460a      	mov	r2, r1
 800428c:	400b      	ands	r3, r1
 800428e:	4929      	ldr	r1, [pc, #164]	; (8004334 <_strtod_l+0x59c>)
 8004290:	4680      	mov	r8, r0
 8004292:	428b      	cmp	r3, r1
 8004294:	d8bb      	bhi.n	800420e <_strtod_l+0x476>
 8004296:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800429a:	428b      	cmp	r3, r1
 800429c:	bf86      	itte	hi
 800429e:	f04f 38ff 	movhi.w	r8, #4294967295
 80042a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004338 <_strtod_l+0x5a0>
 80042a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80042aa:	2300      	movs	r3, #0
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	e07e      	b.n	80043ae <_strtod_l+0x616>
 80042b0:	07f2      	lsls	r2, r6, #31
 80042b2:	d507      	bpl.n	80042c4 <_strtod_l+0x52c>
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <_strtod_l+0x594>)
 80042b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc f90b 	bl	80004d8 <__aeabi_dmul>
 80042c2:	2301      	movs	r3, #1
 80042c4:	3701      	adds	r7, #1
 80042c6:	1076      	asrs	r6, r6, #1
 80042c8:	e7ce      	b.n	8004268 <_strtod_l+0x4d0>
 80042ca:	d0ee      	beq.n	80042aa <_strtod_l+0x512>
 80042cc:	4276      	negs	r6, r6
 80042ce:	f016 020f 	ands.w	r2, r6, #15
 80042d2:	d00a      	beq.n	80042ea <_strtod_l+0x552>
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <_strtod_l+0x590>)
 80042d6:	4640      	mov	r0, r8
 80042d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042dc:	4649      	mov	r1, r9
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f7fc fa23 	bl	800072c <__aeabi_ddiv>
 80042e6:	4680      	mov	r8, r0
 80042e8:	4689      	mov	r9, r1
 80042ea:	1136      	asrs	r6, r6, #4
 80042ec:	d0dd      	beq.n	80042aa <_strtod_l+0x512>
 80042ee:	2e1f      	cmp	r6, #31
 80042f0:	dd24      	ble.n	800433c <_strtod_l+0x5a4>
 80042f2:	f04f 0b00 	mov.w	fp, #0
 80042f6:	f8cd b010 	str.w	fp, [sp, #16]
 80042fa:	f8cd b020 	str.w	fp, [sp, #32]
 80042fe:	f8cd b018 	str.w	fp, [sp, #24]
 8004302:	2322      	movs	r3, #34	; 0x22
 8004304:	f04f 0800 	mov.w	r8, #0
 8004308:	f04f 0900 	mov.w	r9, #0
 800430c:	f8ca 3000 	str.w	r3, [sl]
 8004310:	e78c      	b.n	800422c <_strtod_l+0x494>
 8004312:	bf00      	nop
 8004314:	08007511 	.word	0x08007511
 8004318:	0800754c 	.word	0x0800754c
 800431c:	08007509 	.word	0x08007509
 8004320:	0800758b 	.word	0x0800758b
 8004324:	080078a8 	.word	0x080078a8
 8004328:	08007788 	.word	0x08007788
 800432c:	08007760 	.word	0x08007760
 8004330:	7ff00000 	.word	0x7ff00000
 8004334:	7ca00000 	.word	0x7ca00000
 8004338:	7fefffff 	.word	0x7fefffff
 800433c:	f016 0310 	ands.w	r3, r6, #16
 8004340:	bf18      	it	ne
 8004342:	236a      	movne	r3, #106	; 0x6a
 8004344:	4640      	mov	r0, r8
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	4649      	mov	r1, r9
 800434a:	2300      	movs	r3, #0
 800434c:	4fb2      	ldr	r7, [pc, #712]	; (8004618 <_strtod_l+0x880>)
 800434e:	07f2      	lsls	r2, r6, #31
 8004350:	d504      	bpl.n	800435c <_strtod_l+0x5c4>
 8004352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004356:	f7fc f8bf 	bl	80004d8 <__aeabi_dmul>
 800435a:	2301      	movs	r3, #1
 800435c:	1076      	asrs	r6, r6, #1
 800435e:	f107 0708 	add.w	r7, r7, #8
 8004362:	d1f4      	bne.n	800434e <_strtod_l+0x5b6>
 8004364:	b10b      	cbz	r3, 800436a <_strtod_l+0x5d2>
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	9b05      	ldr	r3, [sp, #20]
 800436c:	b1bb      	cbz	r3, 800439e <_strtod_l+0x606>
 800436e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004376:	2b00      	cmp	r3, #0
 8004378:	4649      	mov	r1, r9
 800437a:	dd10      	ble.n	800439e <_strtod_l+0x606>
 800437c:	2b1f      	cmp	r3, #31
 800437e:	f340 812b 	ble.w	80045d8 <_strtod_l+0x840>
 8004382:	2b34      	cmp	r3, #52	; 0x34
 8004384:	bfd8      	it	le
 8004386:	f04f 32ff 	movle.w	r2, #4294967295
 800438a:	f04f 0800 	mov.w	r8, #0
 800438e:	bfcf      	iteee	gt
 8004390:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004394:	3b20      	suble	r3, #32
 8004396:	fa02 f303 	lslle.w	r3, r2, r3
 800439a:	ea03 0901 	andle.w	r9, r3, r1
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	f7fc faff 	bl	80009a8 <__aeabi_dcmpeq>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d1a1      	bne.n	80042f2 <_strtod_l+0x55a>
 80043ae:	9b06      	ldr	r3, [sp, #24]
 80043b0:	465a      	mov	r2, fp
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4650      	mov	r0, sl
 80043b6:	4623      	mov	r3, r4
 80043b8:	9908      	ldr	r1, [sp, #32]
 80043ba:	f002 f8db 	bl	8006574 <__s2b>
 80043be:	9008      	str	r0, [sp, #32]
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f43f af24 	beq.w	800420e <_strtod_l+0x476>
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	f04f 0b00 	mov.w	fp, #0
 80043cc:	1b5d      	subs	r5, r3, r5
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	f8cd b010 	str.w	fp, [sp, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bfb4      	ite	lt
 80043d8:	462b      	movlt	r3, r5
 80043da:	2300      	movge	r3, #0
 80043dc:	930e      	str	r3, [sp, #56]	; 0x38
 80043de:	9b07      	ldr	r3, [sp, #28]
 80043e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043e4:	9316      	str	r3, [sp, #88]	; 0x58
 80043e6:	9b08      	ldr	r3, [sp, #32]
 80043e8:	4650      	mov	r0, sl
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	f002 f816 	bl	800641c <_Balloc>
 80043f0:	9006      	str	r0, [sp, #24]
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f43f af13 	beq.w	800421e <_strtod_l+0x486>
 80043f8:	9b08      	ldr	r3, [sp, #32]
 80043fa:	300c      	adds	r0, #12
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	f103 010c 	add.w	r1, r3, #12
 8004402:	3202      	adds	r2, #2
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	f001 fffb 	bl	8006400 <memcpy>
 800440a:	ab1e      	add	r3, sp, #120	; 0x78
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	ab1d      	add	r3, sp, #116	; 0x74
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	4650      	mov	r0, sl
 8004418:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800441c:	f002 fbe8 	bl	8006bf0 <__d2b>
 8004420:	901c      	str	r0, [sp, #112]	; 0x70
 8004422:	2800      	cmp	r0, #0
 8004424:	f43f aefb 	beq.w	800421e <_strtod_l+0x486>
 8004428:	2101      	movs	r1, #1
 800442a:	4650      	mov	r0, sl
 800442c:	f002 f93a 	bl	80066a4 <__i2b>
 8004430:	4603      	mov	r3, r0
 8004432:	9004      	str	r0, [sp, #16]
 8004434:	2800      	cmp	r0, #0
 8004436:	f43f aef2 	beq.w	800421e <_strtod_l+0x486>
 800443a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800443c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800443e:	2d00      	cmp	r5, #0
 8004440:	bfab      	itete	ge
 8004442:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004444:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004446:	18ee      	addge	r6, r5, r3
 8004448:	1b5c      	sublt	r4, r3, r5
 800444a:	9b05      	ldr	r3, [sp, #20]
 800444c:	bfa8      	it	ge
 800444e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004450:	eba5 0503 	sub.w	r5, r5, r3
 8004454:	4415      	add	r5, r2
 8004456:	4b71      	ldr	r3, [pc, #452]	; (800461c <_strtod_l+0x884>)
 8004458:	f105 35ff 	add.w	r5, r5, #4294967295
 800445c:	bfb8      	it	lt
 800445e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004460:	429d      	cmp	r5, r3
 8004462:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004466:	f280 80c9 	bge.w	80045fc <_strtod_l+0x864>
 800446a:	1b5b      	subs	r3, r3, r5
 800446c:	2b1f      	cmp	r3, #31
 800446e:	f04f 0701 	mov.w	r7, #1
 8004472:	eba2 0203 	sub.w	r2, r2, r3
 8004476:	f300 80b6 	bgt.w	80045e6 <_strtod_l+0x84e>
 800447a:	2500      	movs	r5, #0
 800447c:	fa07 f303 	lsl.w	r3, r7, r3
 8004480:	930f      	str	r3, [sp, #60]	; 0x3c
 8004482:	18b7      	adds	r7, r6, r2
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	42be      	cmp	r6, r7
 8004488:	4414      	add	r4, r2
 800448a:	441c      	add	r4, r3
 800448c:	4633      	mov	r3, r6
 800448e:	bfa8      	it	ge
 8004490:	463b      	movge	r3, r7
 8004492:	42a3      	cmp	r3, r4
 8004494:	bfa8      	it	ge
 8004496:	4623      	movge	r3, r4
 8004498:	2b00      	cmp	r3, #0
 800449a:	bfc2      	ittt	gt
 800449c:	1aff      	subgt	r7, r7, r3
 800449e:	1ae4      	subgt	r4, r4, r3
 80044a0:	1af6      	subgt	r6, r6, r3
 80044a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd17      	ble.n	80044d8 <_strtod_l+0x740>
 80044a8:	461a      	mov	r2, r3
 80044aa:	4650      	mov	r0, sl
 80044ac:	9904      	ldr	r1, [sp, #16]
 80044ae:	f002 f9b3 	bl	8006818 <__pow5mult>
 80044b2:	9004      	str	r0, [sp, #16]
 80044b4:	2800      	cmp	r0, #0
 80044b6:	f43f aeb2 	beq.w	800421e <_strtod_l+0x486>
 80044ba:	4601      	mov	r1, r0
 80044bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80044be:	4650      	mov	r0, sl
 80044c0:	f002 f906 	bl	80066d0 <__multiply>
 80044c4:	9009      	str	r0, [sp, #36]	; 0x24
 80044c6:	2800      	cmp	r0, #0
 80044c8:	f43f aea9 	beq.w	800421e <_strtod_l+0x486>
 80044cc:	4650      	mov	r0, sl
 80044ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044d0:	f001 ffe4 	bl	800649c <_Bfree>
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	931c      	str	r3, [sp, #112]	; 0x70
 80044d8:	2f00      	cmp	r7, #0
 80044da:	f300 8093 	bgt.w	8004604 <_strtod_l+0x86c>
 80044de:	9b07      	ldr	r3, [sp, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dd08      	ble.n	80044f6 <_strtod_l+0x75e>
 80044e4:	4650      	mov	r0, sl
 80044e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80044e8:	9906      	ldr	r1, [sp, #24]
 80044ea:	f002 f995 	bl	8006818 <__pow5mult>
 80044ee:	9006      	str	r0, [sp, #24]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f43f ae94 	beq.w	800421e <_strtod_l+0x486>
 80044f6:	2c00      	cmp	r4, #0
 80044f8:	dd08      	ble.n	800450c <_strtod_l+0x774>
 80044fa:	4622      	mov	r2, r4
 80044fc:	4650      	mov	r0, sl
 80044fe:	9906      	ldr	r1, [sp, #24]
 8004500:	f002 f9e4 	bl	80068cc <__lshift>
 8004504:	9006      	str	r0, [sp, #24]
 8004506:	2800      	cmp	r0, #0
 8004508:	f43f ae89 	beq.w	800421e <_strtod_l+0x486>
 800450c:	2e00      	cmp	r6, #0
 800450e:	dd08      	ble.n	8004522 <_strtod_l+0x78a>
 8004510:	4632      	mov	r2, r6
 8004512:	4650      	mov	r0, sl
 8004514:	9904      	ldr	r1, [sp, #16]
 8004516:	f002 f9d9 	bl	80068cc <__lshift>
 800451a:	9004      	str	r0, [sp, #16]
 800451c:	2800      	cmp	r0, #0
 800451e:	f43f ae7e 	beq.w	800421e <_strtod_l+0x486>
 8004522:	4650      	mov	r0, sl
 8004524:	9a06      	ldr	r2, [sp, #24]
 8004526:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004528:	f002 fa58 	bl	80069dc <__mdiff>
 800452c:	4683      	mov	fp, r0
 800452e:	2800      	cmp	r0, #0
 8004530:	f43f ae75 	beq.w	800421e <_strtod_l+0x486>
 8004534:	2400      	movs	r4, #0
 8004536:	68c3      	ldr	r3, [r0, #12]
 8004538:	9904      	ldr	r1, [sp, #16]
 800453a:	60c4      	str	r4, [r0, #12]
 800453c:	930d      	str	r3, [sp, #52]	; 0x34
 800453e:	f002 fa31 	bl	80069a4 <__mcmp>
 8004542:	42a0      	cmp	r0, r4
 8004544:	da70      	bge.n	8004628 <_strtod_l+0x890>
 8004546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004548:	ea53 0308 	orrs.w	r3, r3, r8
 800454c:	f040 8096 	bne.w	800467c <_strtod_l+0x8e4>
 8004550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 8091 	bne.w	800467c <_strtod_l+0x8e4>
 800455a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800455e:	0d1b      	lsrs	r3, r3, #20
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004566:	f240 8089 	bls.w	800467c <_strtod_l+0x8e4>
 800456a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800456e:	b923      	cbnz	r3, 800457a <_strtod_l+0x7e2>
 8004570:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f340 8081 	ble.w	800467c <_strtod_l+0x8e4>
 800457a:	4659      	mov	r1, fp
 800457c:	2201      	movs	r2, #1
 800457e:	4650      	mov	r0, sl
 8004580:	f002 f9a4 	bl	80068cc <__lshift>
 8004584:	9904      	ldr	r1, [sp, #16]
 8004586:	4683      	mov	fp, r0
 8004588:	f002 fa0c 	bl	80069a4 <__mcmp>
 800458c:	2800      	cmp	r0, #0
 800458e:	dd75      	ble.n	800467c <_strtod_l+0x8e4>
 8004590:	9905      	ldr	r1, [sp, #20]
 8004592:	464b      	mov	r3, r9
 8004594:	4a22      	ldr	r2, [pc, #136]	; (8004620 <_strtod_l+0x888>)
 8004596:	2900      	cmp	r1, #0
 8004598:	f000 8091 	beq.w	80046be <_strtod_l+0x926>
 800459c:	ea02 0109 	and.w	r1, r2, r9
 80045a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80045a4:	f300 808b 	bgt.w	80046be <_strtod_l+0x926>
 80045a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80045ac:	f77f aea9 	ble.w	8004302 <_strtod_l+0x56a>
 80045b0:	2300      	movs	r3, #0
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <_strtod_l+0x88c>)
 80045b4:	4640      	mov	r0, r8
 80045b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80045ba:	4649      	mov	r1, r9
 80045bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80045c0:	f7fb ff8a 	bl	80004d8 <__aeabi_dmul>
 80045c4:	460b      	mov	r3, r1
 80045c6:	4303      	orrs	r3, r0
 80045c8:	bf08      	it	eq
 80045ca:	2322      	moveq	r3, #34	; 0x22
 80045cc:	4680      	mov	r8, r0
 80045ce:	4689      	mov	r9, r1
 80045d0:	bf08      	it	eq
 80045d2:	f8ca 3000 	streq.w	r3, [sl]
 80045d6:	e62d      	b.n	8004234 <_strtod_l+0x49c>
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	ea03 0808 	and.w	r8, r3, r8
 80045e4:	e6db      	b.n	800439e <_strtod_l+0x606>
 80045e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80045ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80045ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80045f2:	35e2      	adds	r5, #226	; 0xe2
 80045f4:	fa07 f505 	lsl.w	r5, r7, r5
 80045f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80045fa:	e742      	b.n	8004482 <_strtod_l+0x6ea>
 80045fc:	2301      	movs	r3, #1
 80045fe:	2500      	movs	r5, #0
 8004600:	930f      	str	r3, [sp, #60]	; 0x3c
 8004602:	e73e      	b.n	8004482 <_strtod_l+0x6ea>
 8004604:	463a      	mov	r2, r7
 8004606:	4650      	mov	r0, sl
 8004608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800460a:	f002 f95f 	bl	80068cc <__lshift>
 800460e:	901c      	str	r0, [sp, #112]	; 0x70
 8004610:	2800      	cmp	r0, #0
 8004612:	f47f af64 	bne.w	80044de <_strtod_l+0x746>
 8004616:	e602      	b.n	800421e <_strtod_l+0x486>
 8004618:	08007560 	.word	0x08007560
 800461c:	fffffc02 	.word	0xfffffc02
 8004620:	7ff00000 	.word	0x7ff00000
 8004624:	39500000 	.word	0x39500000
 8004628:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800462c:	d166      	bne.n	80046fc <_strtod_l+0x964>
 800462e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004634:	b35a      	cbz	r2, 800468e <_strtod_l+0x8f6>
 8004636:	4a9c      	ldr	r2, [pc, #624]	; (80048a8 <_strtod_l+0xb10>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d12c      	bne.n	8004696 <_strtod_l+0x8fe>
 800463c:	9b05      	ldr	r3, [sp, #20]
 800463e:	4640      	mov	r0, r8
 8004640:	b303      	cbz	r3, 8004684 <_strtod_l+0x8ec>
 8004642:	464b      	mov	r3, r9
 8004644:	4a99      	ldr	r2, [pc, #612]	; (80048ac <_strtod_l+0xb14>)
 8004646:	f04f 31ff 	mov.w	r1, #4294967295
 800464a:	401a      	ands	r2, r3
 800464c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004650:	d81b      	bhi.n	800468a <_strtod_l+0x8f2>
 8004652:	0d12      	lsrs	r2, r2, #20
 8004654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	4298      	cmp	r0, r3
 800465e:	d11a      	bne.n	8004696 <_strtod_l+0x8fe>
 8004660:	4b93      	ldr	r3, [pc, #588]	; (80048b0 <_strtod_l+0xb18>)
 8004662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004664:	429a      	cmp	r2, r3
 8004666:	d102      	bne.n	800466e <_strtod_l+0x8d6>
 8004668:	3001      	adds	r0, #1
 800466a:	f43f add8 	beq.w	800421e <_strtod_l+0x486>
 800466e:	f04f 0800 	mov.w	r8, #0
 8004672:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <_strtod_l+0xb14>)
 8004674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004676:	401a      	ands	r2, r3
 8004678:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800467c:	9b05      	ldr	r3, [sp, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d196      	bne.n	80045b0 <_strtod_l+0x818>
 8004682:	e5d7      	b.n	8004234 <_strtod_l+0x49c>
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	e7e8      	b.n	800465c <_strtod_l+0x8c4>
 800468a:	460b      	mov	r3, r1
 800468c:	e7e6      	b.n	800465c <_strtod_l+0x8c4>
 800468e:	ea53 0308 	orrs.w	r3, r3, r8
 8004692:	f43f af7d 	beq.w	8004590 <_strtod_l+0x7f8>
 8004696:	b1e5      	cbz	r5, 80046d2 <_strtod_l+0x93a>
 8004698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469a:	421d      	tst	r5, r3
 800469c:	d0ee      	beq.n	800467c <_strtod_l+0x8e4>
 800469e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a0:	4640      	mov	r0, r8
 80046a2:	4649      	mov	r1, r9
 80046a4:	9a05      	ldr	r2, [sp, #20]
 80046a6:	b1c3      	cbz	r3, 80046da <_strtod_l+0x942>
 80046a8:	f7ff fb54 	bl	8003d54 <sulp>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046b4:	f7fb fd5a 	bl	800016c <__adddf3>
 80046b8:	4680      	mov	r8, r0
 80046ba:	4689      	mov	r9, r1
 80046bc:	e7de      	b.n	800467c <_strtod_l+0x8e4>
 80046be:	4013      	ands	r3, r2
 80046c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80046c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80046c8:	f04f 38ff 	mov.w	r8, #4294967295
 80046cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80046d0:	e7d4      	b.n	800467c <_strtod_l+0x8e4>
 80046d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d4:	ea13 0f08 	tst.w	r3, r8
 80046d8:	e7e0      	b.n	800469c <_strtod_l+0x904>
 80046da:	f7ff fb3b 	bl	8003d54 <sulp>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046e6:	f7fb fd3f 	bl	8000168 <__aeabi_dsub>
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	4680      	mov	r8, r0
 80046f0:	4689      	mov	r9, r1
 80046f2:	f7fc f959 	bl	80009a8 <__aeabi_dcmpeq>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0c0      	beq.n	800467c <_strtod_l+0x8e4>
 80046fa:	e602      	b.n	8004302 <_strtod_l+0x56a>
 80046fc:	4658      	mov	r0, fp
 80046fe:	9904      	ldr	r1, [sp, #16]
 8004700:	f002 fad2 	bl	8006ca8 <__ratio>
 8004704:	2200      	movs	r2, #0
 8004706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	f7fc f95f 	bl	80009d0 <__aeabi_dcmple>
 8004712:	2800      	cmp	r0, #0
 8004714:	d075      	beq.n	8004802 <_strtod_l+0xa6a>
 8004716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d047      	beq.n	80047ac <_strtod_l+0xa14>
 800471c:	2600      	movs	r6, #0
 800471e:	4f65      	ldr	r7, [pc, #404]	; (80048b4 <_strtod_l+0xb1c>)
 8004720:	4d64      	ldr	r5, [pc, #400]	; (80048b4 <_strtod_l+0xb1c>)
 8004722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004728:	0d1b      	lsrs	r3, r3, #20
 800472a:	051b      	lsls	r3, r3, #20
 800472c:	930f      	str	r3, [sp, #60]	; 0x3c
 800472e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004730:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <_strtod_l+0xb20>)
 8004732:	429a      	cmp	r2, r3
 8004734:	f040 80c8 	bne.w	80048c8 <_strtod_l+0xb30>
 8004738:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800473c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	4640      	mov	r0, r8
 8004744:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004748:	4649      	mov	r1, r9
 800474a:	f002 f9d7 	bl	8006afc <__ulp>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4630      	mov	r0, r6
 8004754:	4639      	mov	r1, r7
 8004756:	f7fb febf 	bl	80004d8 <__aeabi_dmul>
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	f7fb fd05 	bl	800016c <__adddf3>
 8004762:	460b      	mov	r3, r1
 8004764:	4951      	ldr	r1, [pc, #324]	; (80048ac <_strtod_l+0xb14>)
 8004766:	4a55      	ldr	r2, [pc, #340]	; (80048bc <_strtod_l+0xb24>)
 8004768:	4019      	ands	r1, r3
 800476a:	4291      	cmp	r1, r2
 800476c:	4680      	mov	r8, r0
 800476e:	d95e      	bls.n	800482e <_strtod_l+0xa96>
 8004770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004772:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004776:	4293      	cmp	r3, r2
 8004778:	d103      	bne.n	8004782 <_strtod_l+0x9ea>
 800477a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477c:	3301      	adds	r3, #1
 800477e:	f43f ad4e 	beq.w	800421e <_strtod_l+0x486>
 8004782:	f04f 38ff 	mov.w	r8, #4294967295
 8004786:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80048b0 <_strtod_l+0xb18>
 800478a:	4650      	mov	r0, sl
 800478c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800478e:	f001 fe85 	bl	800649c <_Bfree>
 8004792:	4650      	mov	r0, sl
 8004794:	9906      	ldr	r1, [sp, #24]
 8004796:	f001 fe81 	bl	800649c <_Bfree>
 800479a:	4650      	mov	r0, sl
 800479c:	9904      	ldr	r1, [sp, #16]
 800479e:	f001 fe7d 	bl	800649c <_Bfree>
 80047a2:	4659      	mov	r1, fp
 80047a4:	4650      	mov	r0, sl
 80047a6:	f001 fe79 	bl	800649c <_Bfree>
 80047aa:	e61c      	b.n	80043e6 <_strtod_l+0x64e>
 80047ac:	f1b8 0f00 	cmp.w	r8, #0
 80047b0:	d119      	bne.n	80047e6 <_strtod_l+0xa4e>
 80047b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b8:	b9e3      	cbnz	r3, 80047f4 <_strtod_l+0xa5c>
 80047ba:	2200      	movs	r2, #0
 80047bc:	4630      	mov	r0, r6
 80047be:	4639      	mov	r1, r7
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <_strtod_l+0xb1c>)
 80047c2:	f7fc f8fb 	bl	80009bc <__aeabi_dcmplt>
 80047c6:	b9c8      	cbnz	r0, 80047fc <_strtod_l+0xa64>
 80047c8:	2200      	movs	r2, #0
 80047ca:	4630      	mov	r0, r6
 80047cc:	4639      	mov	r1, r7
 80047ce:	4b3c      	ldr	r3, [pc, #240]	; (80048c0 <_strtod_l+0xb28>)
 80047d0:	f7fb fe82 	bl	80004d8 <__aeabi_dmul>
 80047d4:	4604      	mov	r4, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80047dc:	9418      	str	r4, [sp, #96]	; 0x60
 80047de:	9319      	str	r3, [sp, #100]	; 0x64
 80047e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80047e4:	e79d      	b.n	8004722 <_strtod_l+0x98a>
 80047e6:	f1b8 0f01 	cmp.w	r8, #1
 80047ea:	d103      	bne.n	80047f4 <_strtod_l+0xa5c>
 80047ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f43f ad87 	beq.w	8004302 <_strtod_l+0x56a>
 80047f4:	2600      	movs	r6, #0
 80047f6:	2400      	movs	r4, #0
 80047f8:	4f32      	ldr	r7, [pc, #200]	; (80048c4 <_strtod_l+0xb2c>)
 80047fa:	e791      	b.n	8004720 <_strtod_l+0x988>
 80047fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80047fe:	4d30      	ldr	r5, [pc, #192]	; (80048c0 <_strtod_l+0xb28>)
 8004800:	e7ea      	b.n	80047d8 <_strtod_l+0xa40>
 8004802:	4b2f      	ldr	r3, [pc, #188]	; (80048c0 <_strtod_l+0xb28>)
 8004804:	2200      	movs	r2, #0
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	f7fb fe65 	bl	80004d8 <__aeabi_dmul>
 800480e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	b933      	cbnz	r3, 8004824 <_strtod_l+0xa8c>
 8004816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800481a:	9010      	str	r0, [sp, #64]	; 0x40
 800481c:	9311      	str	r3, [sp, #68]	; 0x44
 800481e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004822:	e77e      	b.n	8004722 <_strtod_l+0x98a>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800482c:	e7f7      	b.n	800481e <_strtod_l+0xa86>
 800482e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004832:	9b05      	ldr	r3, [sp, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1a8      	bne.n	800478a <_strtod_l+0x9f2>
 8004838:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800483c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800483e:	0d1b      	lsrs	r3, r3, #20
 8004840:	051b      	lsls	r3, r3, #20
 8004842:	429a      	cmp	r2, r3
 8004844:	d1a1      	bne.n	800478a <_strtod_l+0x9f2>
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fc fc77 	bl	800113c <__aeabi_d2lz>
 800484e:	f7fb fe15 	bl	800047c <__aeabi_l2d>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fc85 	bl	8000168 <__aeabi_dsub>
 800485e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004864:	ea43 0308 	orr.w	r3, r3, r8
 8004868:	4313      	orrs	r3, r2
 800486a:	4604      	mov	r4, r0
 800486c:	460d      	mov	r5, r1
 800486e:	d066      	beq.n	800493e <_strtod_l+0xba6>
 8004870:	a309      	add	r3, pc, #36	; (adr r3, 8004898 <_strtod_l+0xb00>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fc f8a1 	bl	80009bc <__aeabi_dcmplt>
 800487a:	2800      	cmp	r0, #0
 800487c:	f47f acda 	bne.w	8004234 <_strtod_l+0x49c>
 8004880:	a307      	add	r3, pc, #28	; (adr r3, 80048a0 <_strtod_l+0xb08>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	4620      	mov	r0, r4
 8004888:	4629      	mov	r1, r5
 800488a:	f7fc f8b5 	bl	80009f8 <__aeabi_dcmpgt>
 800488e:	2800      	cmp	r0, #0
 8004890:	f43f af7b 	beq.w	800478a <_strtod_l+0x9f2>
 8004894:	e4ce      	b.n	8004234 <_strtod_l+0x49c>
 8004896:	bf00      	nop
 8004898:	94a03595 	.word	0x94a03595
 800489c:	3fdfffff 	.word	0x3fdfffff
 80048a0:	35afe535 	.word	0x35afe535
 80048a4:	3fe00000 	.word	0x3fe00000
 80048a8:	000fffff 	.word	0x000fffff
 80048ac:	7ff00000 	.word	0x7ff00000
 80048b0:	7fefffff 	.word	0x7fefffff
 80048b4:	3ff00000 	.word	0x3ff00000
 80048b8:	7fe00000 	.word	0x7fe00000
 80048bc:	7c9fffff 	.word	0x7c9fffff
 80048c0:	3fe00000 	.word	0x3fe00000
 80048c4:	bff00000 	.word	0xbff00000
 80048c8:	9b05      	ldr	r3, [sp, #20]
 80048ca:	b313      	cbz	r3, 8004912 <_strtod_l+0xb7a>
 80048cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048d2:	d81e      	bhi.n	8004912 <_strtod_l+0xb7a>
 80048d4:	a326      	add	r3, pc, #152	; (adr r3, 8004970 <_strtod_l+0xbd8>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fc f877 	bl	80009d0 <__aeabi_dcmple>
 80048e2:	b190      	cbz	r0, 800490a <_strtod_l+0xb72>
 80048e4:	4629      	mov	r1, r5
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7fc f8ce 	bl	8000a88 <__aeabi_d2uiz>
 80048ec:	2801      	cmp	r0, #1
 80048ee:	bf38      	it	cc
 80048f0:	2001      	movcc	r0, #1
 80048f2:	f7fb fd77 	bl	80003e4 <__aeabi_ui2d>
 80048f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	b9d3      	cbnz	r3, 8004934 <_strtod_l+0xb9c>
 80048fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004902:	9012      	str	r0, [sp, #72]	; 0x48
 8004904:	9313      	str	r3, [sp, #76]	; 0x4c
 8004906:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800490a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800490c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004910:	1a9f      	subs	r7, r3, r2
 8004912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004916:	f002 f8f1 	bl	8006afc <__ulp>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4630      	mov	r0, r6
 8004920:	4639      	mov	r1, r7
 8004922:	f7fb fdd9 	bl	80004d8 <__aeabi_dmul>
 8004926:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800492a:	f7fb fc1f 	bl	800016c <__adddf3>
 800492e:	4680      	mov	r8, r0
 8004930:	4689      	mov	r9, r1
 8004932:	e77e      	b.n	8004832 <_strtod_l+0xa9a>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800493c:	e7e3      	b.n	8004906 <_strtod_l+0xb6e>
 800493e:	a30e      	add	r3, pc, #56	; (adr r3, 8004978 <_strtod_l+0xbe0>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fc f83a 	bl	80009bc <__aeabi_dcmplt>
 8004948:	e7a1      	b.n	800488e <_strtod_l+0xaf6>
 800494a:	2300      	movs	r3, #0
 800494c:	930c      	str	r3, [sp, #48]	; 0x30
 800494e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	f7ff ba65 	b.w	8003e22 <_strtod_l+0x8a>
 8004958:	2b65      	cmp	r3, #101	; 0x65
 800495a:	f43f ab5c 	beq.w	8004016 <_strtod_l+0x27e>
 800495e:	2b45      	cmp	r3, #69	; 0x45
 8004960:	f43f ab59 	beq.w	8004016 <_strtod_l+0x27e>
 8004964:	2201      	movs	r2, #1
 8004966:	f7ff bb8d 	b.w	8004084 <_strtod_l+0x2ec>
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	ffc00000 	.word	0xffc00000
 8004974:	41dfffff 	.word	0x41dfffff
 8004978:	94a03595 	.word	0x94a03595
 800497c:	3fcfffff 	.word	0x3fcfffff

08004980 <strtof>:
 8004980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	4f22      	ldr	r7, [pc, #136]	; (8004a10 <strtof+0x90>)
 8004986:	460a      	mov	r2, r1
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <strtof+0x94>)
 800498a:	4601      	mov	r1, r0
 800498c:	6838      	ldr	r0, [r7, #0]
 800498e:	f7ff fa03 	bl	8003d98 <_strtod_l>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4606      	mov	r6, r0
 8004998:	460c      	mov	r4, r1
 800499a:	f7fc f837 	bl	8000a0c <__aeabi_dcmpun>
 800499e:	b168      	cbz	r0, 80049bc <strtof+0x3c>
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	481d      	ldr	r0, [pc, #116]	; (8004a18 <strtof+0x98>)
 80049a4:	da06      	bge.n	80049b4 <strtof+0x34>
 80049a6:	f002 fc13 	bl	80071d0 <nanf>
 80049aa:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80049ae:	4628      	mov	r0, r5
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049b8:	f002 bc0a 	b.w	80071d0 <nanf>
 80049bc:	4621      	mov	r1, r4
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fc f882 	bl	8000ac8 <__aeabi_d2f>
 80049c4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80049c8:	4605      	mov	r5, r0
 80049ca:	4914      	ldr	r1, [pc, #80]	; (8004a1c <strtof+0x9c>)
 80049cc:	4640      	mov	r0, r8
 80049ce:	f7fc fb9f 	bl	8001110 <__aeabi_fcmpun>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d1eb      	bne.n	80049ae <strtof+0x2e>
 80049d6:	4640      	mov	r0, r8
 80049d8:	4910      	ldr	r1, [pc, #64]	; (8004a1c <strtof+0x9c>)
 80049da:	f7fc fb7b 	bl	80010d4 <__aeabi_fcmple>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d1e5      	bne.n	80049ae <strtof+0x2e>
 80049e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	4630      	mov	r0, r6
 80049ec:	4621      	mov	r1, r4
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <strtof+0xa0>)
 80049f0:	f7fc f80c 	bl	8000a0c <__aeabi_dcmpun>
 80049f4:	b940      	cbnz	r0, 8004a08 <strtof+0x88>
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	4630      	mov	r0, r6
 80049fc:	4621      	mov	r1, r4
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <strtof+0xa0>)
 8004a00:	f7fb ffe6 	bl	80009d0 <__aeabi_dcmple>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0d2      	beq.n	80049ae <strtof+0x2e>
 8004a08:	2222      	movs	r2, #34	; 0x22
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e7ce      	b.n	80049ae <strtof+0x2e>
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	20000074 	.word	0x20000074
 8004a18:	080078a8 	.word	0x080078a8
 8004a1c:	7f7fffff 	.word	0x7f7fffff
 8004a20:	7fefffff 	.word	0x7fefffff

08004a24 <__swbuf_r>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	460e      	mov	r6, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	b118      	cbz	r0, 8004a36 <__swbuf_r+0x12>
 8004a2e:	6983      	ldr	r3, [r0, #24]
 8004a30:	b90b      	cbnz	r3, 8004a36 <__swbuf_r+0x12>
 8004a32:	f001 f84d 	bl	8005ad0 <__sinit>
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <__swbuf_r+0x98>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	d12b      	bne.n	8004a94 <__swbuf_r+0x70>
 8004a3c:	686c      	ldr	r4, [r5, #4]
 8004a3e:	69a3      	ldr	r3, [r4, #24]
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	071a      	lsls	r2, r3, #28
 8004a46:	d52f      	bpl.n	8004aa8 <__swbuf_r+0x84>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	b36b      	cbz	r3, 8004aa8 <__swbuf_r+0x84>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	b2f6      	uxtb	r6, r6
 8004a52:	1ac0      	subs	r0, r0, r3
 8004a54:	6963      	ldr	r3, [r4, #20]
 8004a56:	4637      	mov	r7, r6
 8004a58:	4283      	cmp	r3, r0
 8004a5a:	dc04      	bgt.n	8004a66 <__swbuf_r+0x42>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 ffa2 	bl	80059a8 <_fflush_r>
 8004a64:	bb30      	cbnz	r0, 8004ab4 <__swbuf_r+0x90>
 8004a66:	68a3      	ldr	r3, [r4, #8]
 8004a68:	3001      	adds	r0, #1
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60a3      	str	r3, [r4, #8]
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	701e      	strb	r6, [r3, #0]
 8004a76:	6963      	ldr	r3, [r4, #20]
 8004a78:	4283      	cmp	r3, r0
 8004a7a:	d004      	beq.n	8004a86 <__swbuf_r+0x62>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	07db      	lsls	r3, r3, #31
 8004a80:	d506      	bpl.n	8004a90 <__swbuf_r+0x6c>
 8004a82:	2e0a      	cmp	r6, #10
 8004a84:	d104      	bne.n	8004a90 <__swbuf_r+0x6c>
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 ff8d 	bl	80059a8 <_fflush_r>
 8004a8e:	b988      	cbnz	r0, 8004ab4 <__swbuf_r+0x90>
 8004a90:	4638      	mov	r0, r7
 8004a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <__swbuf_r+0x9c>)
 8004a96:	429c      	cmp	r4, r3
 8004a98:	d101      	bne.n	8004a9e <__swbuf_r+0x7a>
 8004a9a:	68ac      	ldr	r4, [r5, #8]
 8004a9c:	e7cf      	b.n	8004a3e <__swbuf_r+0x1a>
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <__swbuf_r+0xa0>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	bf08      	it	eq
 8004aa4:	68ec      	ldreq	r4, [r5, #12]
 8004aa6:	e7ca      	b.n	8004a3e <__swbuf_r+0x1a>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f80c 	bl	8004ac8 <__swsetup_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d0cb      	beq.n	8004a4c <__swbuf_r+0x28>
 8004ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ab8:	e7ea      	b.n	8004a90 <__swbuf_r+0x6c>
 8004aba:	bf00      	nop
 8004abc:	0800763c 	.word	0x0800763c
 8004ac0:	0800765c 	.word	0x0800765c
 8004ac4:	0800761c 	.word	0x0800761c

08004ac8 <__swsetup_r>:
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <__swsetup_r+0xcc>)
 8004aca:	b570      	push	{r4, r5, r6, lr}
 8004acc:	681d      	ldr	r5, [r3, #0]
 8004ace:	4606      	mov	r6, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	b125      	cbz	r5, 8004ade <__swsetup_r+0x16>
 8004ad4:	69ab      	ldr	r3, [r5, #24]
 8004ad6:	b913      	cbnz	r3, 8004ade <__swsetup_r+0x16>
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 fff9 	bl	8005ad0 <__sinit>
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <__swsetup_r+0xd0>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	d10f      	bne.n	8004b04 <__swsetup_r+0x3c>
 8004ae4:	686c      	ldr	r4, [r5, #4]
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aec:	0719      	lsls	r1, r3, #28
 8004aee:	d42c      	bmi.n	8004b4a <__swsetup_r+0x82>
 8004af0:	06dd      	lsls	r5, r3, #27
 8004af2:	d411      	bmi.n	8004b18 <__swsetup_r+0x50>
 8004af4:	2309      	movs	r3, #9
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	e03e      	b.n	8004b82 <__swsetup_r+0xba>
 8004b04:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <__swsetup_r+0xd4>)
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d101      	bne.n	8004b0e <__swsetup_r+0x46>
 8004b0a:	68ac      	ldr	r4, [r5, #8]
 8004b0c:	e7eb      	b.n	8004ae6 <__swsetup_r+0x1e>
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <__swsetup_r+0xd8>)
 8004b10:	429c      	cmp	r4, r3
 8004b12:	bf08      	it	eq
 8004b14:	68ec      	ldreq	r4, [r5, #12]
 8004b16:	e7e6      	b.n	8004ae6 <__swsetup_r+0x1e>
 8004b18:	0758      	lsls	r0, r3, #29
 8004b1a:	d512      	bpl.n	8004b42 <__swsetup_r+0x7a>
 8004b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b1e:	b141      	cbz	r1, 8004b32 <__swsetup_r+0x6a>
 8004b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d002      	beq.n	8004b2e <__swsetup_r+0x66>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f002 f93d 	bl	8006da8 <_free_r>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6363      	str	r3, [r4, #52]	; 0x34
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	b94b      	cbnz	r3, 8004b62 <__swsetup_r+0x9a>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b58:	d003      	beq.n	8004b62 <__swsetup_r+0x9a>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f001 fbe7 	bl	8006330 <__smakebuf_r>
 8004b62:	89a0      	ldrh	r0, [r4, #12]
 8004b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b68:	f010 0301 	ands.w	r3, r0, #1
 8004b6c:	d00a      	beq.n	8004b84 <__swsetup_r+0xbc>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60a3      	str	r3, [r4, #8]
 8004b72:	6963      	ldr	r3, [r4, #20]
 8004b74:	425b      	negs	r3, r3
 8004b76:	61a3      	str	r3, [r4, #24]
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	b943      	cbnz	r3, 8004b8e <__swsetup_r+0xc6>
 8004b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b80:	d1ba      	bne.n	8004af8 <__swsetup_r+0x30>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	0781      	lsls	r1, r0, #30
 8004b86:	bf58      	it	pl
 8004b88:	6963      	ldrpl	r3, [r4, #20]
 8004b8a:	60a3      	str	r3, [r4, #8]
 8004b8c:	e7f4      	b.n	8004b78 <__swsetup_r+0xb0>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e7f7      	b.n	8004b82 <__swsetup_r+0xba>
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
 8004b98:	0800763c 	.word	0x0800763c
 8004b9c:	0800765c 	.word	0x0800765c
 8004ba0:	0800761c 	.word	0x0800761c

08004ba4 <quorem>:
 8004ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	6903      	ldr	r3, [r0, #16]
 8004baa:	690c      	ldr	r4, [r1, #16]
 8004bac:	4607      	mov	r7, r0
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	f2c0 8083 	blt.w	8004cba <quorem+0x116>
 8004bb4:	3c01      	subs	r4, #1
 8004bb6:	f100 0514 	add.w	r5, r0, #20
 8004bba:	f101 0814 	add.w	r8, r1, #20
 8004bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bdc:	d332      	bcc.n	8004c44 <quorem+0xa0>
 8004bde:	f04f 0e00 	mov.w	lr, #0
 8004be2:	4640      	mov	r0, r8
 8004be4:	46ac      	mov	ip, r5
 8004be6:	46f2      	mov	sl, lr
 8004be8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bec:	b293      	uxth	r3, r2
 8004bee:	fb06 e303 	mla	r3, r6, r3, lr
 8004bf2:	0c12      	lsrs	r2, r2, #16
 8004bf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bf8:	fb06 e202 	mla	r2, r6, r2, lr
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8004c02:	f8dc a000 	ldr.w	sl, [ip]
 8004c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c0a:	fa1f fa8a 	uxth.w	sl, sl
 8004c0e:	4453      	add	r3, sl
 8004c10:	fa1f fa82 	uxth.w	sl, r2
 8004c14:	f8dc 2000 	ldr.w	r2, [ip]
 8004c18:	4581      	cmp	r9, r0
 8004c1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8004c30:	d2da      	bcs.n	8004be8 <quorem+0x44>
 8004c32:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c36:	b92b      	cbnz	r3, 8004c44 <quorem+0xa0>
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	429d      	cmp	r5, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	d32f      	bcc.n	8004ca2 <quorem+0xfe>
 8004c42:	613c      	str	r4, [r7, #16]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f001 fead 	bl	80069a4 <__mcmp>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	db25      	blt.n	8004c9a <quorem+0xf6>
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f04f 0c00 	mov.w	ip, #0
 8004c54:	3601      	adds	r6, #1
 8004c56:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c5a:	f8d0 e000 	ldr.w	lr, [r0]
 8004c5e:	b28b      	uxth	r3, r1
 8004c60:	ebac 0303 	sub.w	r3, ip, r3
 8004c64:	fa1f f28e 	uxth.w	r2, lr
 8004c68:	4413      	add	r3, r2
 8004c6a:	0c0a      	lsrs	r2, r1, #16
 8004c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c7a:	45c1      	cmp	r9, r8
 8004c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c80:	f840 3b04 	str.w	r3, [r0], #4
 8004c84:	d2e7      	bcs.n	8004c56 <quorem+0xb2>
 8004c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c8e:	b922      	cbnz	r2, 8004c9a <quorem+0xf6>
 8004c90:	3b04      	subs	r3, #4
 8004c92:	429d      	cmp	r5, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	d30a      	bcc.n	8004cae <quorem+0x10a>
 8004c98:	613c      	str	r4, [r7, #16]
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	b003      	add	sp, #12
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d1cb      	bne.n	8004c42 <quorem+0x9e>
 8004caa:	3c01      	subs	r4, #1
 8004cac:	e7c6      	b.n	8004c3c <quorem+0x98>
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d1f0      	bne.n	8004c98 <quorem+0xf4>
 8004cb6:	3c01      	subs	r4, #1
 8004cb8:	e7eb      	b.n	8004c92 <quorem+0xee>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e7ee      	b.n	8004c9c <quorem+0xf8>
	...

08004cc0 <_dtoa_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cca:	b099      	sub	sp, #100	; 0x64
 8004ccc:	4605      	mov	r5, r0
 8004cce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004cd6:	b974      	cbnz	r4, 8004cf6 <_dtoa_r+0x36>
 8004cd8:	2010      	movs	r0, #16
 8004cda:	f001 fb69 	bl	80063b0 <malloc>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ce2:	b920      	cbnz	r0, 8004cee <_dtoa_r+0x2e>
 8004ce4:	21ea      	movs	r1, #234	; 0xea
 8004ce6:	4bae      	ldr	r3, [pc, #696]	; (8004fa0 <_dtoa_r+0x2e0>)
 8004ce8:	48ae      	ldr	r0, [pc, #696]	; (8004fa4 <_dtoa_r+0x2e4>)
 8004cea:	f002 fae9 	bl	80072c0 <__assert_func>
 8004cee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cf2:	6004      	str	r4, [r0, #0]
 8004cf4:	60c4      	str	r4, [r0, #12]
 8004cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	b151      	cbz	r1, 8004d12 <_dtoa_r+0x52>
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4093      	lsls	r3, r2
 8004d02:	604a      	str	r2, [r1, #4]
 8004d04:	608b      	str	r3, [r1, #8]
 8004d06:	4628      	mov	r0, r5
 8004d08:	f001 fbc8 	bl	800649c <_Bfree>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	1e3b      	subs	r3, r7, #0
 8004d14:	bfaf      	iteee	ge
 8004d16:	2300      	movge	r3, #0
 8004d18:	2201      	movlt	r2, #1
 8004d1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	9305      	strlt	r3, [sp, #20]
 8004d20:	bfa8      	it	ge
 8004d22:	f8c8 3000 	strge.w	r3, [r8]
 8004d26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d2a:	4b9f      	ldr	r3, [pc, #636]	; (8004fa8 <_dtoa_r+0x2e8>)
 8004d2c:	bfb8      	it	lt
 8004d2e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d32:	ea33 0309 	bics.w	r3, r3, r9
 8004d36:	d119      	bne.n	8004d6c <_dtoa_r+0xac>
 8004d38:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d44:	4333      	orrs	r3, r6
 8004d46:	f000 8580 	beq.w	800584a <_dtoa_r+0xb8a>
 8004d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d4c:	b953      	cbnz	r3, 8004d64 <_dtoa_r+0xa4>
 8004d4e:	4b97      	ldr	r3, [pc, #604]	; (8004fac <_dtoa_r+0x2ec>)
 8004d50:	e022      	b.n	8004d98 <_dtoa_r+0xd8>
 8004d52:	4b97      	ldr	r3, [pc, #604]	; (8004fb0 <_dtoa_r+0x2f0>)
 8004d54:	9308      	str	r3, [sp, #32]
 8004d56:	3308      	adds	r3, #8
 8004d58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	9808      	ldr	r0, [sp, #32]
 8004d5e:	b019      	add	sp, #100	; 0x64
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	4b91      	ldr	r3, [pc, #580]	; (8004fac <_dtoa_r+0x2ec>)
 8004d66:	9308      	str	r3, [sp, #32]
 8004d68:	3303      	adds	r3, #3
 8004d6a:	e7f5      	b.n	8004d58 <_dtoa_r+0x98>
 8004d6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f7fb fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8004d80:	4680      	mov	r8, r0
 8004d82:	b158      	cbz	r0, 8004d9c <_dtoa_r+0xdc>
 8004d84:	2301      	movs	r3, #1
 8004d86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8559 	beq.w	8005844 <_dtoa_r+0xb84>
 8004d92:	4888      	ldr	r0, [pc, #544]	; (8004fb4 <_dtoa_r+0x2f4>)
 8004d94:	6018      	str	r0, [r3, #0]
 8004d96:	1e43      	subs	r3, r0, #1
 8004d98:	9308      	str	r3, [sp, #32]
 8004d9a:	e7df      	b.n	8004d5c <_dtoa_r+0x9c>
 8004d9c:	ab16      	add	r3, sp, #88	; 0x58
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	ab17      	add	r3, sp, #92	; 0x5c
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4628      	mov	r0, r5
 8004da6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004daa:	f001 ff21 	bl	8006bf0 <__d2b>
 8004dae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004db2:	4682      	mov	sl, r0
 8004db4:	2c00      	cmp	r4, #0
 8004db6:	d07e      	beq.n	8004eb6 <_dtoa_r+0x1f6>
 8004db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004dca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <_dtoa_r+0x2f8>)
 8004dd6:	f7fb f9c7 	bl	8000168 <__aeabi_dsub>
 8004dda:	a36b      	add	r3, pc, #428	; (adr r3, 8004f88 <_dtoa_r+0x2c8>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fb7a 	bl	80004d8 <__aeabi_dmul>
 8004de4:	a36a      	add	r3, pc, #424	; (adr r3, 8004f90 <_dtoa_r+0x2d0>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb f9bf 	bl	800016c <__adddf3>
 8004dee:	4606      	mov	r6, r0
 8004df0:	4620      	mov	r0, r4
 8004df2:	460f      	mov	r7, r1
 8004df4:	f7fb fb06 	bl	8000404 <__aeabi_i2d>
 8004df8:	a367      	add	r3, pc, #412	; (adr r3, 8004f98 <_dtoa_r+0x2d8>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fb6b 	bl	80004d8 <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4630      	mov	r0, r6
 8004e08:	4639      	mov	r1, r7
 8004e0a:	f7fb f9af 	bl	800016c <__adddf3>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	f7fb fe11 	bl	8000a38 <__aeabi_d2iz>
 8004e16:	2200      	movs	r2, #0
 8004e18:	4681      	mov	r9, r0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fdcc 	bl	80009bc <__aeabi_dcmplt>
 8004e24:	b148      	cbz	r0, 8004e3a <_dtoa_r+0x17a>
 8004e26:	4648      	mov	r0, r9
 8004e28:	f7fb faec 	bl	8000404 <__aeabi_i2d>
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	f7fb fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8004e34:	b908      	cbnz	r0, 8004e3a <_dtoa_r+0x17a>
 8004e36:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e3a:	f1b9 0f16 	cmp.w	r9, #22
 8004e3e:	d857      	bhi.n	8004ef0 <_dtoa_r+0x230>
 8004e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e44:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <_dtoa_r+0x2fc>)
 8004e46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fdb5 	bl	80009bc <__aeabi_dcmplt>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d04e      	beq.n	8004ef4 <_dtoa_r+0x234>
 8004e56:	2300      	movs	r3, #0
 8004e58:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e60:	1b1c      	subs	r4, r3, r4
 8004e62:	1e63      	subs	r3, r4, #1
 8004e64:	9309      	str	r3, [sp, #36]	; 0x24
 8004e66:	bf49      	itett	mi
 8004e68:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e6c:	2300      	movpl	r3, #0
 8004e6e:	9306      	strmi	r3, [sp, #24]
 8004e70:	2300      	movmi	r3, #0
 8004e72:	bf54      	ite	pl
 8004e74:	9306      	strpl	r3, [sp, #24]
 8004e76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e78:	f1b9 0f00 	cmp.w	r9, #0
 8004e7c:	db3c      	blt.n	8004ef8 <_dtoa_r+0x238>
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004e84:	444b      	add	r3, r9
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	2300      	movs	r3, #0
 8004e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e8e:	2b09      	cmp	r3, #9
 8004e90:	d86c      	bhi.n	8004f6c <_dtoa_r+0x2ac>
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	bfc4      	itt	gt
 8004e96:	3b04      	subgt	r3, #4
 8004e98:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e9c:	bfc8      	it	gt
 8004e9e:	2400      	movgt	r4, #0
 8004ea0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ea4:	bfd8      	it	le
 8004ea6:	2401      	movle	r4, #1
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	f200 808b 	bhi.w	8004fc4 <_dtoa_r+0x304>
 8004eae:	e8df f003 	tbb	[pc, r3]
 8004eb2:	4f2d      	.short	0x4f2d
 8004eb4:	5b4d      	.short	0x5b4d
 8004eb6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004eba:	441c      	add	r4, r3
 8004ebc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	bfc3      	ittte	gt
 8004ec4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ec8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004ecc:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ed0:	f1c3 0320 	rsble	r3, r3, #32
 8004ed4:	bfc6      	itte	gt
 8004ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004eda:	4318      	orrgt	r0, r3
 8004edc:	fa06 f003 	lslle.w	r0, r6, r3
 8004ee0:	f7fb fa80 	bl	80003e4 <__aeabi_ui2d>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eea:	3c01      	subs	r4, #1
 8004eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eee:	e770      	b.n	8004dd2 <_dtoa_r+0x112>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e7b3      	b.n	8004e5c <_dtoa_r+0x19c>
 8004ef4:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ef6:	e7b2      	b.n	8004e5e <_dtoa_r+0x19e>
 8004ef8:	9b06      	ldr	r3, [sp, #24]
 8004efa:	eba3 0309 	sub.w	r3, r3, r9
 8004efe:	9306      	str	r3, [sp, #24]
 8004f00:	f1c9 0300 	rsb	r3, r9, #0
 8004f04:	930a      	str	r3, [sp, #40]	; 0x28
 8004f06:	2300      	movs	r3, #0
 8004f08:	930e      	str	r3, [sp, #56]	; 0x38
 8004f0a:	e7bf      	b.n	8004e8c <_dtoa_r+0x1cc>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc59      	bgt.n	8004fca <_dtoa_r+0x30a>
 8004f16:	f04f 0b01 	mov.w	fp, #1
 8004f1a:	465b      	mov	r3, fp
 8004f1c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004f24:	2200      	movs	r2, #0
 8004f26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f28:	6042      	str	r2, [r0, #4]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	f102 0614 	add.w	r6, r2, #20
 8004f30:	429e      	cmp	r6, r3
 8004f32:	6841      	ldr	r1, [r0, #4]
 8004f34:	d94f      	bls.n	8004fd6 <_dtoa_r+0x316>
 8004f36:	4628      	mov	r0, r5
 8004f38:	f001 fa70 	bl	800641c <_Balloc>
 8004f3c:	9008      	str	r0, [sp, #32]
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d14d      	bne.n	8004fde <_dtoa_r+0x31e>
 8004f42:	4602      	mov	r2, r0
 8004f44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <_dtoa_r+0x300>)
 8004f4a:	e6cd      	b.n	8004ce8 <_dtoa_r+0x28>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e7de      	b.n	8004f0e <_dtoa_r+0x24e>
 8004f50:	2300      	movs	r3, #0
 8004f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f56:	eb09 0b03 	add.w	fp, r9, r3
 8004f5a:	f10b 0301 	add.w	r3, fp, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	9302      	str	r3, [sp, #8]
 8004f62:	bfb8      	it	lt
 8004f64:	2301      	movlt	r3, #1
 8004f66:	e7dd      	b.n	8004f24 <_dtoa_r+0x264>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e7f2      	b.n	8004f52 <_dtoa_r+0x292>
 8004f6c:	2401      	movs	r4, #1
 8004f6e:	2300      	movs	r3, #0
 8004f70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f72:	9322      	str	r3, [sp, #136]	; 0x88
 8004f74:	f04f 3bff 	mov.w	fp, #4294967295
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	f8cd b008 	str.w	fp, [sp, #8]
 8004f80:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f82:	e7cf      	b.n	8004f24 <_dtoa_r+0x264>
 8004f84:	f3af 8000 	nop.w
 8004f88:	636f4361 	.word	0x636f4361
 8004f8c:	3fd287a7 	.word	0x3fd287a7
 8004f90:	8b60c8b3 	.word	0x8b60c8b3
 8004f94:	3fc68a28 	.word	0x3fc68a28
 8004f98:	509f79fb 	.word	0x509f79fb
 8004f9c:	3fd34413 	.word	0x3fd34413
 8004fa0:	08007595 	.word	0x08007595
 8004fa4:	080075ac 	.word	0x080075ac
 8004fa8:	7ff00000 	.word	0x7ff00000
 8004fac:	08007591 	.word	0x08007591
 8004fb0:	08007588 	.word	0x08007588
 8004fb4:	08007515 	.word	0x08007515
 8004fb8:	3ff80000 	.word	0x3ff80000
 8004fbc:	08007788 	.word	0x08007788
 8004fc0:	0800760b 	.word	0x0800760b
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc8:	e7d4      	b.n	8004f74 <_dtoa_r+0x2b4>
 8004fca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004fce:	465b      	mov	r3, fp
 8004fd0:	f8cd b008 	str.w	fp, [sp, #8]
 8004fd4:	e7a6      	b.n	8004f24 <_dtoa_r+0x264>
 8004fd6:	3101      	adds	r1, #1
 8004fd8:	6041      	str	r1, [r0, #4]
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	e7a6      	b.n	8004f2c <_dtoa_r+0x26c>
 8004fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fe0:	9a08      	ldr	r2, [sp, #32]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	9b02      	ldr	r3, [sp, #8]
 8004fe6:	2b0e      	cmp	r3, #14
 8004fe8:	f200 80a8 	bhi.w	800513c <_dtoa_r+0x47c>
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	f000 80a5 	beq.w	800513c <_dtoa_r+0x47c>
 8004ff2:	f1b9 0f00 	cmp.w	r9, #0
 8004ff6:	dd34      	ble.n	8005062 <_dtoa_r+0x3a2>
 8004ff8:	4a9a      	ldr	r2, [pc, #616]	; (8005264 <_dtoa_r+0x5a4>)
 8004ffa:	f009 030f 	and.w	r3, r9, #15
 8004ffe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005002:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005006:	e9d3 3400 	ldrd	r3, r4, [r3]
 800500a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800500e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005012:	d016      	beq.n	8005042 <_dtoa_r+0x382>
 8005014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005018:	4b93      	ldr	r3, [pc, #588]	; (8005268 <_dtoa_r+0x5a8>)
 800501a:	2703      	movs	r7, #3
 800501c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005020:	f7fb fb84 	bl	800072c <__aeabi_ddiv>
 8005024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005028:	f004 040f 	and.w	r4, r4, #15
 800502c:	4e8e      	ldr	r6, [pc, #568]	; (8005268 <_dtoa_r+0x5a8>)
 800502e:	b954      	cbnz	r4, 8005046 <_dtoa_r+0x386>
 8005030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005038:	f7fb fb78 	bl	800072c <__aeabi_ddiv>
 800503c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005040:	e029      	b.n	8005096 <_dtoa_r+0x3d6>
 8005042:	2702      	movs	r7, #2
 8005044:	e7f2      	b.n	800502c <_dtoa_r+0x36c>
 8005046:	07e1      	lsls	r1, r4, #31
 8005048:	d508      	bpl.n	800505c <_dtoa_r+0x39c>
 800504a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800504e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005052:	f7fb fa41 	bl	80004d8 <__aeabi_dmul>
 8005056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800505a:	3701      	adds	r7, #1
 800505c:	1064      	asrs	r4, r4, #1
 800505e:	3608      	adds	r6, #8
 8005060:	e7e5      	b.n	800502e <_dtoa_r+0x36e>
 8005062:	f000 80a5 	beq.w	80051b0 <_dtoa_r+0x4f0>
 8005066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800506a:	f1c9 0400 	rsb	r4, r9, #0
 800506e:	4b7d      	ldr	r3, [pc, #500]	; (8005264 <_dtoa_r+0x5a4>)
 8005070:	f004 020f 	and.w	r2, r4, #15
 8005074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f7fb fa2c 	bl	80004d8 <__aeabi_dmul>
 8005080:	2702      	movs	r7, #2
 8005082:	2300      	movs	r3, #0
 8005084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005088:	4e77      	ldr	r6, [pc, #476]	; (8005268 <_dtoa_r+0x5a8>)
 800508a:	1124      	asrs	r4, r4, #4
 800508c:	2c00      	cmp	r4, #0
 800508e:	f040 8084 	bne.w	800519a <_dtoa_r+0x4da>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1d2      	bne.n	800503c <_dtoa_r+0x37c>
 8005096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 808b 	beq.w	80051b4 <_dtoa_r+0x4f4>
 800509e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050aa:	2200      	movs	r2, #0
 80050ac:	4b6f      	ldr	r3, [pc, #444]	; (800526c <_dtoa_r+0x5ac>)
 80050ae:	f7fb fc85 	bl	80009bc <__aeabi_dcmplt>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d07e      	beq.n	80051b4 <_dtoa_r+0x4f4>
 80050b6:	9b02      	ldr	r3, [sp, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d07b      	beq.n	80051b4 <_dtoa_r+0x4f4>
 80050bc:	f1bb 0f00 	cmp.w	fp, #0
 80050c0:	dd38      	ble.n	8005134 <_dtoa_r+0x474>
 80050c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b69      	ldr	r3, [pc, #420]	; (8005270 <_dtoa_r+0x5b0>)
 80050ca:	f7fb fa05 	bl	80004d8 <__aeabi_dmul>
 80050ce:	465c      	mov	r4, fp
 80050d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d4:	f109 38ff 	add.w	r8, r9, #4294967295
 80050d8:	3701      	adds	r7, #1
 80050da:	4638      	mov	r0, r7
 80050dc:	f7fb f992 	bl	8000404 <__aeabi_i2d>
 80050e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e4:	f7fb f9f8 	bl	80004d8 <__aeabi_dmul>
 80050e8:	2200      	movs	r2, #0
 80050ea:	4b62      	ldr	r3, [pc, #392]	; (8005274 <_dtoa_r+0x5b4>)
 80050ec:	f7fb f83e 	bl	800016c <__adddf3>
 80050f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f8:	9611      	str	r6, [sp, #68]	; 0x44
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	d15d      	bne.n	80051ba <_dtoa_r+0x4fa>
 80050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005102:	2200      	movs	r2, #0
 8005104:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <_dtoa_r+0x5b8>)
 8005106:	f7fb f82f 	bl	8000168 <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005112:	4633      	mov	r3, r6
 8005114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005116:	f7fb fc6f 	bl	80009f8 <__aeabi_dcmpgt>
 800511a:	2800      	cmp	r0, #0
 800511c:	f040 829e 	bne.w	800565c <_dtoa_r+0x99c>
 8005120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005126:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800512a:	f7fb fc47 	bl	80009bc <__aeabi_dcmplt>
 800512e:	2800      	cmp	r0, #0
 8005130:	f040 8292 	bne.w	8005658 <_dtoa_r+0x998>
 8005134:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800513c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800513e:	2b00      	cmp	r3, #0
 8005140:	f2c0 8153 	blt.w	80053ea <_dtoa_r+0x72a>
 8005144:	f1b9 0f0e 	cmp.w	r9, #14
 8005148:	f300 814f 	bgt.w	80053ea <_dtoa_r+0x72a>
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <_dtoa_r+0x5a4>)
 800514e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005152:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005156:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800515a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800515c:	2b00      	cmp	r3, #0
 800515e:	f280 80db 	bge.w	8005318 <_dtoa_r+0x658>
 8005162:	9b02      	ldr	r3, [sp, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f300 80d7 	bgt.w	8005318 <_dtoa_r+0x658>
 800516a:	f040 8274 	bne.w	8005656 <_dtoa_r+0x996>
 800516e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005172:	2200      	movs	r2, #0
 8005174:	4b40      	ldr	r3, [pc, #256]	; (8005278 <_dtoa_r+0x5b8>)
 8005176:	f7fb f9af 	bl	80004d8 <__aeabi_dmul>
 800517a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800517e:	f7fb fc31 	bl	80009e4 <__aeabi_dcmpge>
 8005182:	9c02      	ldr	r4, [sp, #8]
 8005184:	4626      	mov	r6, r4
 8005186:	2800      	cmp	r0, #0
 8005188:	f040 824a 	bne.w	8005620 <_dtoa_r+0x960>
 800518c:	2331      	movs	r3, #49	; 0x31
 800518e:	9f08      	ldr	r7, [sp, #32]
 8005190:	f109 0901 	add.w	r9, r9, #1
 8005194:	f807 3b01 	strb.w	r3, [r7], #1
 8005198:	e246      	b.n	8005628 <_dtoa_r+0x968>
 800519a:	07e2      	lsls	r2, r4, #31
 800519c:	d505      	bpl.n	80051aa <_dtoa_r+0x4ea>
 800519e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051a2:	f7fb f999 	bl	80004d8 <__aeabi_dmul>
 80051a6:	2301      	movs	r3, #1
 80051a8:	3701      	adds	r7, #1
 80051aa:	1064      	asrs	r4, r4, #1
 80051ac:	3608      	adds	r6, #8
 80051ae:	e76d      	b.n	800508c <_dtoa_r+0x3cc>
 80051b0:	2702      	movs	r7, #2
 80051b2:	e770      	b.n	8005096 <_dtoa_r+0x3d6>
 80051b4:	46c8      	mov	r8, r9
 80051b6:	9c02      	ldr	r4, [sp, #8]
 80051b8:	e78f      	b.n	80050da <_dtoa_r+0x41a>
 80051ba:	9908      	ldr	r1, [sp, #32]
 80051bc:	4b29      	ldr	r3, [pc, #164]	; (8005264 <_dtoa_r+0x5a4>)
 80051be:	4421      	add	r1, r4
 80051c0:	9112      	str	r1, [sp, #72]	; 0x48
 80051c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80051cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051d0:	2900      	cmp	r1, #0
 80051d2:	d055      	beq.n	8005280 <_dtoa_r+0x5c0>
 80051d4:	2000      	movs	r0, #0
 80051d6:	4929      	ldr	r1, [pc, #164]	; (800527c <_dtoa_r+0x5bc>)
 80051d8:	f7fb faa8 	bl	800072c <__aeabi_ddiv>
 80051dc:	463b      	mov	r3, r7
 80051de:	4632      	mov	r2, r6
 80051e0:	f7fa ffc2 	bl	8000168 <__aeabi_dsub>
 80051e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051e8:	9f08      	ldr	r7, [sp, #32]
 80051ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ee:	f7fb fc23 	bl	8000a38 <__aeabi_d2iz>
 80051f2:	4604      	mov	r4, r0
 80051f4:	f7fb f906 	bl	8000404 <__aeabi_i2d>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005200:	f7fa ffb2 	bl	8000168 <__aeabi_dsub>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	3430      	adds	r4, #48	; 0x30
 800520a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800520e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005212:	f807 4b01 	strb.w	r4, [r7], #1
 8005216:	f7fb fbd1 	bl	80009bc <__aeabi_dcmplt>
 800521a:	2800      	cmp	r0, #0
 800521c:	d174      	bne.n	8005308 <_dtoa_r+0x648>
 800521e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005222:	2000      	movs	r0, #0
 8005224:	4911      	ldr	r1, [pc, #68]	; (800526c <_dtoa_r+0x5ac>)
 8005226:	f7fa ff9f 	bl	8000168 <__aeabi_dsub>
 800522a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800522e:	f7fb fbc5 	bl	80009bc <__aeabi_dcmplt>
 8005232:	2800      	cmp	r0, #0
 8005234:	f040 80b6 	bne.w	80053a4 <_dtoa_r+0x6e4>
 8005238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800523a:	429f      	cmp	r7, r3
 800523c:	f43f af7a 	beq.w	8005134 <_dtoa_r+0x474>
 8005240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005244:	2200      	movs	r2, #0
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <_dtoa_r+0x5b0>)
 8005248:	f7fb f946 	bl	80004d8 <__aeabi_dmul>
 800524c:	2200      	movs	r2, #0
 800524e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <_dtoa_r+0x5b0>)
 8005258:	f7fb f93e 	bl	80004d8 <__aeabi_dmul>
 800525c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005260:	e7c3      	b.n	80051ea <_dtoa_r+0x52a>
 8005262:	bf00      	nop
 8005264:	08007788 	.word	0x08007788
 8005268:	08007760 	.word	0x08007760
 800526c:	3ff00000 	.word	0x3ff00000
 8005270:	40240000 	.word	0x40240000
 8005274:	401c0000 	.word	0x401c0000
 8005278:	40140000 	.word	0x40140000
 800527c:	3fe00000 	.word	0x3fe00000
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	f7fb f928 	bl	80004d8 <__aeabi_dmul>
 8005288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800528a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800528e:	9c08      	ldr	r4, [sp, #32]
 8005290:	9314      	str	r3, [sp, #80]	; 0x50
 8005292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005296:	f7fb fbcf 	bl	8000a38 <__aeabi_d2iz>
 800529a:	9015      	str	r0, [sp, #84]	; 0x54
 800529c:	f7fb f8b2 	bl	8000404 <__aeabi_i2d>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a8:	f7fa ff5e 	bl	8000168 <__aeabi_dsub>
 80052ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052ae:	4606      	mov	r6, r0
 80052b0:	3330      	adds	r3, #48	; 0x30
 80052b2:	f804 3b01 	strb.w	r3, [r4], #1
 80052b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b8:	460f      	mov	r7, r1
 80052ba:	429c      	cmp	r4, r3
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	d124      	bne.n	800530c <_dtoa_r+0x64c>
 80052c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c6:	4bb3      	ldr	r3, [pc, #716]	; (8005594 <_dtoa_r+0x8d4>)
 80052c8:	f7fa ff50 	bl	800016c <__adddf3>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fb90 	bl	80009f8 <__aeabi_dcmpgt>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d162      	bne.n	80053a2 <_dtoa_r+0x6e2>
 80052dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052e0:	2000      	movs	r0, #0
 80052e2:	49ac      	ldr	r1, [pc, #688]	; (8005594 <_dtoa_r+0x8d4>)
 80052e4:	f7fa ff40 	bl	8000168 <__aeabi_dsub>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4630      	mov	r0, r6
 80052ee:	4639      	mov	r1, r7
 80052f0:	f7fb fb64 	bl	80009bc <__aeabi_dcmplt>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f43f af1d 	beq.w	8005134 <_dtoa_r+0x474>
 80052fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052fc:	1e7b      	subs	r3, r7, #1
 80052fe:	9314      	str	r3, [sp, #80]	; 0x50
 8005300:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005304:	2b30      	cmp	r3, #48	; 0x30
 8005306:	d0f8      	beq.n	80052fa <_dtoa_r+0x63a>
 8005308:	46c1      	mov	r9, r8
 800530a:	e03a      	b.n	8005382 <_dtoa_r+0x6c2>
 800530c:	4ba2      	ldr	r3, [pc, #648]	; (8005598 <_dtoa_r+0x8d8>)
 800530e:	f7fb f8e3 	bl	80004d8 <__aeabi_dmul>
 8005312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005316:	e7bc      	b.n	8005292 <_dtoa_r+0x5d2>
 8005318:	9f08      	ldr	r7, [sp, #32]
 800531a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800531e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005322:	f7fb fa03 	bl	800072c <__aeabi_ddiv>
 8005326:	f7fb fb87 	bl	8000a38 <__aeabi_d2iz>
 800532a:	4604      	mov	r4, r0
 800532c:	f7fb f86a 	bl	8000404 <__aeabi_i2d>
 8005330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800533c:	460b      	mov	r3, r1
 800533e:	4602      	mov	r2, r0
 8005340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005344:	f7fa ff10 	bl	8000168 <__aeabi_dsub>
 8005348:	f807 6b01 	strb.w	r6, [r7], #1
 800534c:	9e08      	ldr	r6, [sp, #32]
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	1bbe      	subs	r6, r7, r6
 8005352:	42b3      	cmp	r3, r6
 8005354:	d13a      	bne.n	80053cc <_dtoa_r+0x70c>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	f7fa ff07 	bl	800016c <__adddf3>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800536a:	f7fb fb45 	bl	80009f8 <__aeabi_dcmpgt>
 800536e:	bb58      	cbnz	r0, 80053c8 <_dtoa_r+0x708>
 8005370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005378:	f7fb fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800537c:	b108      	cbz	r0, 8005382 <_dtoa_r+0x6c2>
 800537e:	07e1      	lsls	r1, r4, #31
 8005380:	d422      	bmi.n	80053c8 <_dtoa_r+0x708>
 8005382:	4628      	mov	r0, r5
 8005384:	4651      	mov	r1, sl
 8005386:	f001 f889 	bl	800649c <_Bfree>
 800538a:	2300      	movs	r3, #0
 800538c:	703b      	strb	r3, [r7, #0]
 800538e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005390:	f109 0001 	add.w	r0, r9, #1
 8005394:	6018      	str	r0, [r3, #0]
 8005396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005398:	2b00      	cmp	r3, #0
 800539a:	f43f acdf 	beq.w	8004d5c <_dtoa_r+0x9c>
 800539e:	601f      	str	r7, [r3, #0]
 80053a0:	e4dc      	b.n	8004d5c <_dtoa_r+0x9c>
 80053a2:	4627      	mov	r7, r4
 80053a4:	463b      	mov	r3, r7
 80053a6:	461f      	mov	r7, r3
 80053a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ac:	2a39      	cmp	r2, #57	; 0x39
 80053ae:	d107      	bne.n	80053c0 <_dtoa_r+0x700>
 80053b0:	9a08      	ldr	r2, [sp, #32]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d1f7      	bne.n	80053a6 <_dtoa_r+0x6e6>
 80053b6:	2230      	movs	r2, #48	; 0x30
 80053b8:	9908      	ldr	r1, [sp, #32]
 80053ba:	f108 0801 	add.w	r8, r8, #1
 80053be:	700a      	strb	r2, [r1, #0]
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	3201      	adds	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e79f      	b.n	8005308 <_dtoa_r+0x648>
 80053c8:	46c8      	mov	r8, r9
 80053ca:	e7eb      	b.n	80053a4 <_dtoa_r+0x6e4>
 80053cc:	2200      	movs	r2, #0
 80053ce:	4b72      	ldr	r3, [pc, #456]	; (8005598 <_dtoa_r+0x8d8>)
 80053d0:	f7fb f882 	bl	80004d8 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	f7fb fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d098      	beq.n	800531a <_dtoa_r+0x65a>
 80053e8:	e7cb      	b.n	8005382 <_dtoa_r+0x6c2>
 80053ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	f000 80cd 	beq.w	800558c <_dtoa_r+0x8cc>
 80053f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	f300 80af 	bgt.w	8005558 <_dtoa_r+0x898>
 80053fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	f000 80a7 	beq.w	8005550 <_dtoa_r+0x890>
 8005402:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005406:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005408:	9f06      	ldr	r7, [sp, #24]
 800540a:	9a06      	ldr	r2, [sp, #24]
 800540c:	2101      	movs	r1, #1
 800540e:	441a      	add	r2, r3
 8005410:	9206      	str	r2, [sp, #24]
 8005412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005414:	4628      	mov	r0, r5
 8005416:	441a      	add	r2, r3
 8005418:	9209      	str	r2, [sp, #36]	; 0x24
 800541a:	f001 f943 	bl	80066a4 <__i2b>
 800541e:	4606      	mov	r6, r0
 8005420:	2f00      	cmp	r7, #0
 8005422:	dd0c      	ble.n	800543e <_dtoa_r+0x77e>
 8005424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	dd09      	ble.n	800543e <_dtoa_r+0x77e>
 800542a:	42bb      	cmp	r3, r7
 800542c:	bfa8      	it	ge
 800542e:	463b      	movge	r3, r7
 8005430:	9a06      	ldr	r2, [sp, #24]
 8005432:	1aff      	subs	r7, r7, r3
 8005434:	1ad2      	subs	r2, r2, r3
 8005436:	9206      	str	r2, [sp, #24]
 8005438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	9309      	str	r3, [sp, #36]	; 0x24
 800543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005440:	b1f3      	cbz	r3, 8005480 <_dtoa_r+0x7c0>
 8005442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a9 	beq.w	800559c <_dtoa_r+0x8dc>
 800544a:	2c00      	cmp	r4, #0
 800544c:	dd10      	ble.n	8005470 <_dtoa_r+0x7b0>
 800544e:	4631      	mov	r1, r6
 8005450:	4622      	mov	r2, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f001 f9e0 	bl	8006818 <__pow5mult>
 8005458:	4652      	mov	r2, sl
 800545a:	4601      	mov	r1, r0
 800545c:	4606      	mov	r6, r0
 800545e:	4628      	mov	r0, r5
 8005460:	f001 f936 	bl	80066d0 <__multiply>
 8005464:	4680      	mov	r8, r0
 8005466:	4651      	mov	r1, sl
 8005468:	4628      	mov	r0, r5
 800546a:	f001 f817 	bl	800649c <_Bfree>
 800546e:	46c2      	mov	sl, r8
 8005470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005472:	1b1a      	subs	r2, r3, r4
 8005474:	d004      	beq.n	8005480 <_dtoa_r+0x7c0>
 8005476:	4651      	mov	r1, sl
 8005478:	4628      	mov	r0, r5
 800547a:	f001 f9cd 	bl	8006818 <__pow5mult>
 800547e:	4682      	mov	sl, r0
 8005480:	2101      	movs	r1, #1
 8005482:	4628      	mov	r0, r5
 8005484:	f001 f90e 	bl	80066a4 <__i2b>
 8005488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800548a:	4604      	mov	r4, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f340 8087 	ble.w	80055a0 <_dtoa_r+0x8e0>
 8005492:	461a      	mov	r2, r3
 8005494:	4601      	mov	r1, r0
 8005496:	4628      	mov	r0, r5
 8005498:	f001 f9be 	bl	8006818 <__pow5mult>
 800549c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800549e:	4604      	mov	r4, r0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f340 8080 	ble.w	80055a6 <_dtoa_r+0x8e6>
 80054a6:	f04f 0800 	mov.w	r8, #0
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054b0:	6918      	ldr	r0, [r3, #16]
 80054b2:	f001 f8a9 	bl	8006608 <__hi0bits>
 80054b6:	f1c0 0020 	rsb	r0, r0, #32
 80054ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054bc:	4418      	add	r0, r3
 80054be:	f010 001f 	ands.w	r0, r0, #31
 80054c2:	f000 8092 	beq.w	80055ea <_dtoa_r+0x92a>
 80054c6:	f1c0 0320 	rsb	r3, r0, #32
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	f340 808a 	ble.w	80055e4 <_dtoa_r+0x924>
 80054d0:	f1c0 001c 	rsb	r0, r0, #28
 80054d4:	9b06      	ldr	r3, [sp, #24]
 80054d6:	4407      	add	r7, r0
 80054d8:	4403      	add	r3, r0
 80054da:	9306      	str	r3, [sp, #24]
 80054dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054de:	4403      	add	r3, r0
 80054e0:	9309      	str	r3, [sp, #36]	; 0x24
 80054e2:	9b06      	ldr	r3, [sp, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	dd05      	ble.n	80054f4 <_dtoa_r+0x834>
 80054e8:	4651      	mov	r1, sl
 80054ea:	461a      	mov	r2, r3
 80054ec:	4628      	mov	r0, r5
 80054ee:	f001 f9ed 	bl	80068cc <__lshift>
 80054f2:	4682      	mov	sl, r0
 80054f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	dd05      	ble.n	8005506 <_dtoa_r+0x846>
 80054fa:	4621      	mov	r1, r4
 80054fc:	461a      	mov	r2, r3
 80054fe:	4628      	mov	r0, r5
 8005500:	f001 f9e4 	bl	80068cc <__lshift>
 8005504:	4604      	mov	r4, r0
 8005506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d070      	beq.n	80055ee <_dtoa_r+0x92e>
 800550c:	4621      	mov	r1, r4
 800550e:	4650      	mov	r0, sl
 8005510:	f001 fa48 	bl	80069a4 <__mcmp>
 8005514:	2800      	cmp	r0, #0
 8005516:	da6a      	bge.n	80055ee <_dtoa_r+0x92e>
 8005518:	2300      	movs	r3, #0
 800551a:	4651      	mov	r1, sl
 800551c:	220a      	movs	r2, #10
 800551e:	4628      	mov	r0, r5
 8005520:	f000 ffde 	bl	80064e0 <__multadd>
 8005524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005526:	4682      	mov	sl, r0
 8005528:	f109 39ff 	add.w	r9, r9, #4294967295
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8193 	beq.w	8005858 <_dtoa_r+0xb98>
 8005532:	4631      	mov	r1, r6
 8005534:	2300      	movs	r3, #0
 8005536:	220a      	movs	r2, #10
 8005538:	4628      	mov	r0, r5
 800553a:	f000 ffd1 	bl	80064e0 <__multadd>
 800553e:	f1bb 0f00 	cmp.w	fp, #0
 8005542:	4606      	mov	r6, r0
 8005544:	f300 8093 	bgt.w	800566e <_dtoa_r+0x9ae>
 8005548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800554a:	2b02      	cmp	r3, #2
 800554c:	dc57      	bgt.n	80055fe <_dtoa_r+0x93e>
 800554e:	e08e      	b.n	800566e <_dtoa_r+0x9ae>
 8005550:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005552:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005556:	e756      	b.n	8005406 <_dtoa_r+0x746>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	1e5c      	subs	r4, r3, #1
 800555c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555e:	42a3      	cmp	r3, r4
 8005560:	bfb7      	itett	lt
 8005562:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005564:	1b1c      	subge	r4, r3, r4
 8005566:	1ae2      	sublt	r2, r4, r3
 8005568:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800556a:	bfbe      	ittt	lt
 800556c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800556e:	189b      	addlt	r3, r3, r2
 8005570:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005572:	9b02      	ldr	r3, [sp, #8]
 8005574:	bfb8      	it	lt
 8005576:	2400      	movlt	r4, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfbb      	ittet	lt
 800557c:	9b06      	ldrlt	r3, [sp, #24]
 800557e:	9a02      	ldrlt	r2, [sp, #8]
 8005580:	9f06      	ldrge	r7, [sp, #24]
 8005582:	1a9f      	sublt	r7, r3, r2
 8005584:	bfac      	ite	ge
 8005586:	9b02      	ldrge	r3, [sp, #8]
 8005588:	2300      	movlt	r3, #0
 800558a:	e73e      	b.n	800540a <_dtoa_r+0x74a>
 800558c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800558e:	9f06      	ldr	r7, [sp, #24]
 8005590:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005592:	e745      	b.n	8005420 <_dtoa_r+0x760>
 8005594:	3fe00000 	.word	0x3fe00000
 8005598:	40240000 	.word	0x40240000
 800559c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800559e:	e76a      	b.n	8005476 <_dtoa_r+0x7b6>
 80055a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	dc19      	bgt.n	80055da <_dtoa_r+0x91a>
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	b9bb      	cbnz	r3, 80055da <_dtoa_r+0x91a>
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b0:	b99b      	cbnz	r3, 80055da <_dtoa_r+0x91a>
 80055b2:	9b05      	ldr	r3, [sp, #20]
 80055b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	0d1b      	lsrs	r3, r3, #20
 80055ba:	051b      	lsls	r3, r3, #20
 80055bc:	b183      	cbz	r3, 80055e0 <_dtoa_r+0x920>
 80055be:	f04f 0801 	mov.w	r8, #1
 80055c2:	9b06      	ldr	r3, [sp, #24]
 80055c4:	3301      	adds	r3, #1
 80055c6:	9306      	str	r3, [sp, #24]
 80055c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ca:	3301      	adds	r3, #1
 80055cc:	9309      	str	r3, [sp, #36]	; 0x24
 80055ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f47f af6a 	bne.w	80054aa <_dtoa_r+0x7ea>
 80055d6:	2001      	movs	r0, #1
 80055d8:	e76f      	b.n	80054ba <_dtoa_r+0x7fa>
 80055da:	f04f 0800 	mov.w	r8, #0
 80055de:	e7f6      	b.n	80055ce <_dtoa_r+0x90e>
 80055e0:	4698      	mov	r8, r3
 80055e2:	e7f4      	b.n	80055ce <_dtoa_r+0x90e>
 80055e4:	f43f af7d 	beq.w	80054e2 <_dtoa_r+0x822>
 80055e8:	4618      	mov	r0, r3
 80055ea:	301c      	adds	r0, #28
 80055ec:	e772      	b.n	80054d4 <_dtoa_r+0x814>
 80055ee:	9b02      	ldr	r3, [sp, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dc36      	bgt.n	8005662 <_dtoa_r+0x9a2>
 80055f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	dd33      	ble.n	8005662 <_dtoa_r+0x9a2>
 80055fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80055fe:	f1bb 0f00 	cmp.w	fp, #0
 8005602:	d10d      	bne.n	8005620 <_dtoa_r+0x960>
 8005604:	4621      	mov	r1, r4
 8005606:	465b      	mov	r3, fp
 8005608:	2205      	movs	r2, #5
 800560a:	4628      	mov	r0, r5
 800560c:	f000 ff68 	bl	80064e0 <__multadd>
 8005610:	4601      	mov	r1, r0
 8005612:	4604      	mov	r4, r0
 8005614:	4650      	mov	r0, sl
 8005616:	f001 f9c5 	bl	80069a4 <__mcmp>
 800561a:	2800      	cmp	r0, #0
 800561c:	f73f adb6 	bgt.w	800518c <_dtoa_r+0x4cc>
 8005620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005622:	9f08      	ldr	r7, [sp, #32]
 8005624:	ea6f 0903 	mvn.w	r9, r3
 8005628:	f04f 0800 	mov.w	r8, #0
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 ff34 	bl	800649c <_Bfree>
 8005634:	2e00      	cmp	r6, #0
 8005636:	f43f aea4 	beq.w	8005382 <_dtoa_r+0x6c2>
 800563a:	f1b8 0f00 	cmp.w	r8, #0
 800563e:	d005      	beq.n	800564c <_dtoa_r+0x98c>
 8005640:	45b0      	cmp	r8, r6
 8005642:	d003      	beq.n	800564c <_dtoa_r+0x98c>
 8005644:	4641      	mov	r1, r8
 8005646:	4628      	mov	r0, r5
 8005648:	f000 ff28 	bl	800649c <_Bfree>
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	f000 ff24 	bl	800649c <_Bfree>
 8005654:	e695      	b.n	8005382 <_dtoa_r+0x6c2>
 8005656:	2400      	movs	r4, #0
 8005658:	4626      	mov	r6, r4
 800565a:	e7e1      	b.n	8005620 <_dtoa_r+0x960>
 800565c:	46c1      	mov	r9, r8
 800565e:	4626      	mov	r6, r4
 8005660:	e594      	b.n	800518c <_dtoa_r+0x4cc>
 8005662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005664:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80fc 	beq.w	8005866 <_dtoa_r+0xba6>
 800566e:	2f00      	cmp	r7, #0
 8005670:	dd05      	ble.n	800567e <_dtoa_r+0x9be>
 8005672:	4631      	mov	r1, r6
 8005674:	463a      	mov	r2, r7
 8005676:	4628      	mov	r0, r5
 8005678:	f001 f928 	bl	80068cc <__lshift>
 800567c:	4606      	mov	r6, r0
 800567e:	f1b8 0f00 	cmp.w	r8, #0
 8005682:	d05c      	beq.n	800573e <_dtoa_r+0xa7e>
 8005684:	4628      	mov	r0, r5
 8005686:	6871      	ldr	r1, [r6, #4]
 8005688:	f000 fec8 	bl	800641c <_Balloc>
 800568c:	4607      	mov	r7, r0
 800568e:	b928      	cbnz	r0, 800569c <_dtoa_r+0x9dc>
 8005690:	4602      	mov	r2, r0
 8005692:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005696:	4b7e      	ldr	r3, [pc, #504]	; (8005890 <_dtoa_r+0xbd0>)
 8005698:	f7ff bb26 	b.w	8004ce8 <_dtoa_r+0x28>
 800569c:	6932      	ldr	r2, [r6, #16]
 800569e:	f106 010c 	add.w	r1, r6, #12
 80056a2:	3202      	adds	r2, #2
 80056a4:	0092      	lsls	r2, r2, #2
 80056a6:	300c      	adds	r0, #12
 80056a8:	f000 feaa 	bl	8006400 <memcpy>
 80056ac:	2201      	movs	r2, #1
 80056ae:	4639      	mov	r1, r7
 80056b0:	4628      	mov	r0, r5
 80056b2:	f001 f90b 	bl	80068cc <__lshift>
 80056b6:	46b0      	mov	r8, r6
 80056b8:	4606      	mov	r6, r0
 80056ba:	9b08      	ldr	r3, [sp, #32]
 80056bc:	3301      	adds	r3, #1
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	445b      	add	r3, fp
 80056c4:	930a      	str	r3, [sp, #40]	; 0x28
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	9309      	str	r3, [sp, #36]	; 0x24
 80056ce:	9b02      	ldr	r3, [sp, #8]
 80056d0:	4621      	mov	r1, r4
 80056d2:	4650      	mov	r0, sl
 80056d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80056d8:	f7ff fa64 	bl	8004ba4 <quorem>
 80056dc:	4603      	mov	r3, r0
 80056de:	4641      	mov	r1, r8
 80056e0:	3330      	adds	r3, #48	; 0x30
 80056e2:	9004      	str	r0, [sp, #16]
 80056e4:	4650      	mov	r0, sl
 80056e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e8:	f001 f95c 	bl	80069a4 <__mcmp>
 80056ec:	4632      	mov	r2, r6
 80056ee:	9006      	str	r0, [sp, #24]
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f001 f972 	bl	80069dc <__mdiff>
 80056f8:	68c2      	ldr	r2, [r0, #12]
 80056fa:	4607      	mov	r7, r0
 80056fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fe:	bb02      	cbnz	r2, 8005742 <_dtoa_r+0xa82>
 8005700:	4601      	mov	r1, r0
 8005702:	4650      	mov	r0, sl
 8005704:	f001 f94e 	bl	80069a4 <__mcmp>
 8005708:	4602      	mov	r2, r0
 800570a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800570c:	4639      	mov	r1, r7
 800570e:	4628      	mov	r0, r5
 8005710:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005714:	f000 fec2 	bl	800649c <_Bfree>
 8005718:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800571c:	9f02      	ldr	r7, [sp, #8]
 800571e:	ea43 0102 	orr.w	r1, r3, r2
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	430b      	orrs	r3, r1
 8005726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005728:	d10d      	bne.n	8005746 <_dtoa_r+0xa86>
 800572a:	2b39      	cmp	r3, #57	; 0x39
 800572c:	d027      	beq.n	800577e <_dtoa_r+0xabe>
 800572e:	9a06      	ldr	r2, [sp, #24]
 8005730:	2a00      	cmp	r2, #0
 8005732:	dd01      	ble.n	8005738 <_dtoa_r+0xa78>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	3331      	adds	r3, #49	; 0x31
 8005738:	f88b 3000 	strb.w	r3, [fp]
 800573c:	e776      	b.n	800562c <_dtoa_r+0x96c>
 800573e:	4630      	mov	r0, r6
 8005740:	e7b9      	b.n	80056b6 <_dtoa_r+0x9f6>
 8005742:	2201      	movs	r2, #1
 8005744:	e7e2      	b.n	800570c <_dtoa_r+0xa4c>
 8005746:	9906      	ldr	r1, [sp, #24]
 8005748:	2900      	cmp	r1, #0
 800574a:	db04      	blt.n	8005756 <_dtoa_r+0xa96>
 800574c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800574e:	4301      	orrs	r1, r0
 8005750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005752:	4301      	orrs	r1, r0
 8005754:	d120      	bne.n	8005798 <_dtoa_r+0xad8>
 8005756:	2a00      	cmp	r2, #0
 8005758:	ddee      	ble.n	8005738 <_dtoa_r+0xa78>
 800575a:	4651      	mov	r1, sl
 800575c:	2201      	movs	r2, #1
 800575e:	4628      	mov	r0, r5
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	f001 f8b3 	bl	80068cc <__lshift>
 8005766:	4621      	mov	r1, r4
 8005768:	4682      	mov	sl, r0
 800576a:	f001 f91b 	bl	80069a4 <__mcmp>
 800576e:	2800      	cmp	r0, #0
 8005770:	9b02      	ldr	r3, [sp, #8]
 8005772:	dc02      	bgt.n	800577a <_dtoa_r+0xaba>
 8005774:	d1e0      	bne.n	8005738 <_dtoa_r+0xa78>
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d5de      	bpl.n	8005738 <_dtoa_r+0xa78>
 800577a:	2b39      	cmp	r3, #57	; 0x39
 800577c:	d1da      	bne.n	8005734 <_dtoa_r+0xa74>
 800577e:	2339      	movs	r3, #57	; 0x39
 8005780:	f88b 3000 	strb.w	r3, [fp]
 8005784:	463b      	mov	r3, r7
 8005786:	461f      	mov	r7, r3
 8005788:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800578c:	3b01      	subs	r3, #1
 800578e:	2a39      	cmp	r2, #57	; 0x39
 8005790:	d050      	beq.n	8005834 <_dtoa_r+0xb74>
 8005792:	3201      	adds	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e749      	b.n	800562c <_dtoa_r+0x96c>
 8005798:	2a00      	cmp	r2, #0
 800579a:	dd03      	ble.n	80057a4 <_dtoa_r+0xae4>
 800579c:	2b39      	cmp	r3, #57	; 0x39
 800579e:	d0ee      	beq.n	800577e <_dtoa_r+0xabe>
 80057a0:	3301      	adds	r3, #1
 80057a2:	e7c9      	b.n	8005738 <_dtoa_r+0xa78>
 80057a4:	9a02      	ldr	r2, [sp, #8]
 80057a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057ac:	428a      	cmp	r2, r1
 80057ae:	d02a      	beq.n	8005806 <_dtoa_r+0xb46>
 80057b0:	4651      	mov	r1, sl
 80057b2:	2300      	movs	r3, #0
 80057b4:	220a      	movs	r2, #10
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 fe92 	bl	80064e0 <__multadd>
 80057bc:	45b0      	cmp	r8, r6
 80057be:	4682      	mov	sl, r0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	f04f 020a 	mov.w	r2, #10
 80057c8:	4641      	mov	r1, r8
 80057ca:	4628      	mov	r0, r5
 80057cc:	d107      	bne.n	80057de <_dtoa_r+0xb1e>
 80057ce:	f000 fe87 	bl	80064e0 <__multadd>
 80057d2:	4680      	mov	r8, r0
 80057d4:	4606      	mov	r6, r0
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	e777      	b.n	80056ce <_dtoa_r+0xa0e>
 80057de:	f000 fe7f 	bl	80064e0 <__multadd>
 80057e2:	4631      	mov	r1, r6
 80057e4:	4680      	mov	r8, r0
 80057e6:	2300      	movs	r3, #0
 80057e8:	220a      	movs	r2, #10
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fe78 	bl	80064e0 <__multadd>
 80057f0:	4606      	mov	r6, r0
 80057f2:	e7f0      	b.n	80057d6 <_dtoa_r+0xb16>
 80057f4:	f1bb 0f00 	cmp.w	fp, #0
 80057f8:	bfcc      	ite	gt
 80057fa:	465f      	movgt	r7, fp
 80057fc:	2701      	movle	r7, #1
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	9a08      	ldr	r2, [sp, #32]
 8005804:	4417      	add	r7, r2
 8005806:	4651      	mov	r1, sl
 8005808:	2201      	movs	r2, #1
 800580a:	4628      	mov	r0, r5
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	f001 f85d 	bl	80068cc <__lshift>
 8005812:	4621      	mov	r1, r4
 8005814:	4682      	mov	sl, r0
 8005816:	f001 f8c5 	bl	80069a4 <__mcmp>
 800581a:	2800      	cmp	r0, #0
 800581c:	dcb2      	bgt.n	8005784 <_dtoa_r+0xac4>
 800581e:	d102      	bne.n	8005826 <_dtoa_r+0xb66>
 8005820:	9b02      	ldr	r3, [sp, #8]
 8005822:	07db      	lsls	r3, r3, #31
 8005824:	d4ae      	bmi.n	8005784 <_dtoa_r+0xac4>
 8005826:	463b      	mov	r3, r7
 8005828:	461f      	mov	r7, r3
 800582a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800582e:	2a30      	cmp	r2, #48	; 0x30
 8005830:	d0fa      	beq.n	8005828 <_dtoa_r+0xb68>
 8005832:	e6fb      	b.n	800562c <_dtoa_r+0x96c>
 8005834:	9a08      	ldr	r2, [sp, #32]
 8005836:	429a      	cmp	r2, r3
 8005838:	d1a5      	bne.n	8005786 <_dtoa_r+0xac6>
 800583a:	2331      	movs	r3, #49	; 0x31
 800583c:	f109 0901 	add.w	r9, r9, #1
 8005840:	7013      	strb	r3, [r2, #0]
 8005842:	e6f3      	b.n	800562c <_dtoa_r+0x96c>
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <_dtoa_r+0xbd4>)
 8005846:	f7ff baa7 	b.w	8004d98 <_dtoa_r+0xd8>
 800584a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f aa80 	bne.w	8004d52 <_dtoa_r+0x92>
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <_dtoa_r+0xbd8>)
 8005854:	f7ff baa0 	b.w	8004d98 <_dtoa_r+0xd8>
 8005858:	f1bb 0f00 	cmp.w	fp, #0
 800585c:	dc03      	bgt.n	8005866 <_dtoa_r+0xba6>
 800585e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005860:	2b02      	cmp	r3, #2
 8005862:	f73f aecc 	bgt.w	80055fe <_dtoa_r+0x93e>
 8005866:	9f08      	ldr	r7, [sp, #32]
 8005868:	4621      	mov	r1, r4
 800586a:	4650      	mov	r0, sl
 800586c:	f7ff f99a 	bl	8004ba4 <quorem>
 8005870:	9a08      	ldr	r2, [sp, #32]
 8005872:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005876:	f807 3b01 	strb.w	r3, [r7], #1
 800587a:	1aba      	subs	r2, r7, r2
 800587c:	4593      	cmp	fp, r2
 800587e:	ddb9      	ble.n	80057f4 <_dtoa_r+0xb34>
 8005880:	4651      	mov	r1, sl
 8005882:	2300      	movs	r3, #0
 8005884:	220a      	movs	r2, #10
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fe2a 	bl	80064e0 <__multadd>
 800588c:	4682      	mov	sl, r0
 800588e:	e7eb      	b.n	8005868 <_dtoa_r+0xba8>
 8005890:	0800760b 	.word	0x0800760b
 8005894:	08007514 	.word	0x08007514
 8005898:	08007588 	.word	0x08007588

0800589c <__sflush_r>:
 800589c:	898a      	ldrh	r2, [r1, #12]
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	4605      	mov	r5, r0
 80058a4:	0710      	lsls	r0, r2, #28
 80058a6:	460c      	mov	r4, r1
 80058a8:	d458      	bmi.n	800595c <__sflush_r+0xc0>
 80058aa:	684b      	ldr	r3, [r1, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dc05      	bgt.n	80058bc <__sflush_r+0x20>
 80058b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dc02      	bgt.n	80058bc <__sflush_r+0x20>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058be:	2e00      	cmp	r6, #0
 80058c0:	d0f9      	beq.n	80058b6 <__sflush_r+0x1a>
 80058c2:	2300      	movs	r3, #0
 80058c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058c8:	682f      	ldr	r7, [r5, #0]
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	d032      	beq.n	8005934 <__sflush_r+0x98>
 80058ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	075a      	lsls	r2, r3, #29
 80058d4:	d505      	bpl.n	80058e2 <__sflush_r+0x46>
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	1ac0      	subs	r0, r0, r3
 80058da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058dc:	b10b      	cbz	r3, 80058e2 <__sflush_r+0x46>
 80058de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e0:	1ac0      	subs	r0, r0, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	4602      	mov	r2, r0
 80058e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058e8:	4628      	mov	r0, r5
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	47b0      	blx	r6
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	d106      	bne.n	8005902 <__sflush_r+0x66>
 80058f4:	6829      	ldr	r1, [r5, #0]
 80058f6:	291d      	cmp	r1, #29
 80058f8:	d82c      	bhi.n	8005954 <__sflush_r+0xb8>
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <__sflush_r+0x108>)
 80058fc:	40ca      	lsrs	r2, r1
 80058fe:	07d6      	lsls	r6, r2, #31
 8005900:	d528      	bpl.n	8005954 <__sflush_r+0xb8>
 8005902:	2200      	movs	r2, #0
 8005904:	6062      	str	r2, [r4, #4]
 8005906:	6922      	ldr	r2, [r4, #16]
 8005908:	04d9      	lsls	r1, r3, #19
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	d504      	bpl.n	8005918 <__sflush_r+0x7c>
 800590e:	1c42      	adds	r2, r0, #1
 8005910:	d101      	bne.n	8005916 <__sflush_r+0x7a>
 8005912:	682b      	ldr	r3, [r5, #0]
 8005914:	b903      	cbnz	r3, 8005918 <__sflush_r+0x7c>
 8005916:	6560      	str	r0, [r4, #84]	; 0x54
 8005918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591a:	602f      	str	r7, [r5, #0]
 800591c:	2900      	cmp	r1, #0
 800591e:	d0ca      	beq.n	80058b6 <__sflush_r+0x1a>
 8005920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005924:	4299      	cmp	r1, r3
 8005926:	d002      	beq.n	800592e <__sflush_r+0x92>
 8005928:	4628      	mov	r0, r5
 800592a:	f001 fa3d 	bl	8006da8 <_free_r>
 800592e:	2000      	movs	r0, #0
 8005930:	6360      	str	r0, [r4, #52]	; 0x34
 8005932:	e7c1      	b.n	80058b8 <__sflush_r+0x1c>
 8005934:	6a21      	ldr	r1, [r4, #32]
 8005936:	2301      	movs	r3, #1
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	1c41      	adds	r1, r0, #1
 800593e:	d1c7      	bne.n	80058d0 <__sflush_r+0x34>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0c4      	beq.n	80058d0 <__sflush_r+0x34>
 8005946:	2b1d      	cmp	r3, #29
 8005948:	d001      	beq.n	800594e <__sflush_r+0xb2>
 800594a:	2b16      	cmp	r3, #22
 800594c:	d101      	bne.n	8005952 <__sflush_r+0xb6>
 800594e:	602f      	str	r7, [r5, #0]
 8005950:	e7b1      	b.n	80058b6 <__sflush_r+0x1a>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	e7ad      	b.n	80058b8 <__sflush_r+0x1c>
 800595c:	690f      	ldr	r7, [r1, #16]
 800595e:	2f00      	cmp	r7, #0
 8005960:	d0a9      	beq.n	80058b6 <__sflush_r+0x1a>
 8005962:	0793      	lsls	r3, r2, #30
 8005964:	bf18      	it	ne
 8005966:	2300      	movne	r3, #0
 8005968:	680e      	ldr	r6, [r1, #0]
 800596a:	bf08      	it	eq
 800596c:	694b      	ldreq	r3, [r1, #20]
 800596e:	eba6 0807 	sub.w	r8, r6, r7
 8005972:	600f      	str	r7, [r1, #0]
 8005974:	608b      	str	r3, [r1, #8]
 8005976:	f1b8 0f00 	cmp.w	r8, #0
 800597a:	dd9c      	ble.n	80058b6 <__sflush_r+0x1a>
 800597c:	4643      	mov	r3, r8
 800597e:	463a      	mov	r2, r7
 8005980:	4628      	mov	r0, r5
 8005982:	6a21      	ldr	r1, [r4, #32]
 8005984:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005986:	47b0      	blx	r6
 8005988:	2800      	cmp	r0, #0
 800598a:	dc06      	bgt.n	800599a <__sflush_r+0xfe>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
 8005992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	e78e      	b.n	80058b8 <__sflush_r+0x1c>
 800599a:	4407      	add	r7, r0
 800599c:	eba8 0800 	sub.w	r8, r8, r0
 80059a0:	e7e9      	b.n	8005976 <__sflush_r+0xda>
 80059a2:	bf00      	nop
 80059a4:	20400001 	.word	0x20400001

080059a8 <_fflush_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	4605      	mov	r5, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	b913      	cbnz	r3, 80059b8 <_fflush_r+0x10>
 80059b2:	2500      	movs	r5, #0
 80059b4:	4628      	mov	r0, r5
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	b118      	cbz	r0, 80059c2 <_fflush_r+0x1a>
 80059ba:	6983      	ldr	r3, [r0, #24]
 80059bc:	b90b      	cbnz	r3, 80059c2 <_fflush_r+0x1a>
 80059be:	f000 f887 	bl	8005ad0 <__sinit>
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <_fflush_r+0x6c>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d11b      	bne.n	8005a00 <_fflush_r+0x58>
 80059c8:	686c      	ldr	r4, [r5, #4]
 80059ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ef      	beq.n	80059b2 <_fflush_r+0xa>
 80059d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059d4:	07d0      	lsls	r0, r2, #31
 80059d6:	d404      	bmi.n	80059e2 <_fflush_r+0x3a>
 80059d8:	0599      	lsls	r1, r3, #22
 80059da:	d402      	bmi.n	80059e2 <_fflush_r+0x3a>
 80059dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059de:	f000 fc80 	bl	80062e2 <__retarget_lock_acquire_recursive>
 80059e2:	4628      	mov	r0, r5
 80059e4:	4621      	mov	r1, r4
 80059e6:	f7ff ff59 	bl	800589c <__sflush_r>
 80059ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ec:	4605      	mov	r5, r0
 80059ee:	07da      	lsls	r2, r3, #31
 80059f0:	d4e0      	bmi.n	80059b4 <_fflush_r+0xc>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	059b      	lsls	r3, r3, #22
 80059f6:	d4dd      	bmi.n	80059b4 <_fflush_r+0xc>
 80059f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fa:	f000 fc73 	bl	80062e4 <__retarget_lock_release_recursive>
 80059fe:	e7d9      	b.n	80059b4 <_fflush_r+0xc>
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <_fflush_r+0x70>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	d101      	bne.n	8005a0a <_fflush_r+0x62>
 8005a06:	68ac      	ldr	r4, [r5, #8]
 8005a08:	e7df      	b.n	80059ca <_fflush_r+0x22>
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <_fflush_r+0x74>)
 8005a0c:	429c      	cmp	r4, r3
 8005a0e:	bf08      	it	eq
 8005a10:	68ec      	ldreq	r4, [r5, #12]
 8005a12:	e7da      	b.n	80059ca <_fflush_r+0x22>
 8005a14:	0800763c 	.word	0x0800763c
 8005a18:	0800765c 	.word	0x0800765c
 8005a1c:	0800761c 	.word	0x0800761c

08005a20 <std>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a2e:	6083      	str	r3, [r0, #8]
 8005a30:	8181      	strh	r1, [r0, #12]
 8005a32:	6643      	str	r3, [r0, #100]	; 0x64
 8005a34:	81c2      	strh	r2, [r0, #14]
 8005a36:	6183      	str	r3, [r0, #24]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	305c      	adds	r0, #92	; 0x5c
 8005a3e:	f7fd fc93 	bl	8003368 <memset>
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <std+0x38>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	6263      	str	r3, [r4, #36]	; 0x24
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <std+0x3c>)
 8005a4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <std+0x40>)
 8005a4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <std+0x44>)
 8005a52:	6323      	str	r3, [r4, #48]	; 0x30
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	bf00      	nop
 8005a58:	080071d9 	.word	0x080071d9
 8005a5c:	080071fb 	.word	0x080071fb
 8005a60:	08007233 	.word	0x08007233
 8005a64:	08007257 	.word	0x08007257

08005a68 <_cleanup_r>:
 8005a68:	4901      	ldr	r1, [pc, #4]	; (8005a70 <_cleanup_r+0x8>)
 8005a6a:	f000 b8af 	b.w	8005bcc <_fwalk_reent>
 8005a6e:	bf00      	nop
 8005a70:	080059a9 	.word	0x080059a9

08005a74 <__sfmoreglue>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	2568      	movs	r5, #104	; 0x68
 8005a78:	1e4a      	subs	r2, r1, #1
 8005a7a:	4355      	muls	r5, r2
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a82:	f001 f9dd 	bl	8006e40 <_malloc_r>
 8005a86:	4604      	mov	r4, r0
 8005a88:	b140      	cbz	r0, 8005a9c <__sfmoreglue+0x28>
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005a90:	300c      	adds	r0, #12
 8005a92:	60a0      	str	r0, [r4, #8]
 8005a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a98:	f7fd fc66 	bl	8003368 <memset>
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}

08005aa0 <__sfp_lock_acquire>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__sfp_lock_acquire+0x8>)
 8005aa2:	f000 bc1e 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	2000032c 	.word	0x2000032c

08005aac <__sfp_lock_release>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__sfp_lock_release+0x8>)
 8005aae:	f000 bc19 	b.w	80062e4 <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	2000032c 	.word	0x2000032c

08005ab8 <__sinit_lock_acquire>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__sinit_lock_acquire+0x8>)
 8005aba:	f000 bc12 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 8005abe:	bf00      	nop
 8005ac0:	20000327 	.word	0x20000327

08005ac4 <__sinit_lock_release>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__sinit_lock_release+0x8>)
 8005ac6:	f000 bc0d 	b.w	80062e4 <__retarget_lock_release_recursive>
 8005aca:	bf00      	nop
 8005acc:	20000327 	.word	0x20000327

08005ad0 <__sinit>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	f7ff fff0 	bl	8005ab8 <__sinit_lock_acquire>
 8005ad8:	69a3      	ldr	r3, [r4, #24]
 8005ada:	b11b      	cbz	r3, 8005ae4 <__sinit+0x14>
 8005adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae0:	f7ff bff0 	b.w	8005ac4 <__sinit_lock_release>
 8005ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <__sinit+0x68>)
 8005aec:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <__sinit+0x6c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	bf08      	it	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	4620      	mov	r0, r4
 8005afa:	bf08      	it	eq
 8005afc:	61a3      	streq	r3, [r4, #24]
 8005afe:	f000 f81f 	bl	8005b40 <__sfp>
 8005b02:	6060      	str	r0, [r4, #4]
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 f81b 	bl	8005b40 <__sfp>
 8005b0a:	60a0      	str	r0, [r4, #8]
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f817 	bl	8005b40 <__sfp>
 8005b12:	2200      	movs	r2, #0
 8005b14:	2104      	movs	r1, #4
 8005b16:	60e0      	str	r0, [r4, #12]
 8005b18:	6860      	ldr	r0, [r4, #4]
 8005b1a:	f7ff ff81 	bl	8005a20 <std>
 8005b1e:	2201      	movs	r2, #1
 8005b20:	2109      	movs	r1, #9
 8005b22:	68a0      	ldr	r0, [r4, #8]
 8005b24:	f7ff ff7c 	bl	8005a20 <std>
 8005b28:	2202      	movs	r2, #2
 8005b2a:	2112      	movs	r1, #18
 8005b2c:	68e0      	ldr	r0, [r4, #12]
 8005b2e:	f7ff ff77 	bl	8005a20 <std>
 8005b32:	2301      	movs	r3, #1
 8005b34:	61a3      	str	r3, [r4, #24]
 8005b36:	e7d1      	b.n	8005adc <__sinit+0xc>
 8005b38:	08007500 	.word	0x08007500
 8005b3c:	08005a69 	.word	0x08005a69

08005b40 <__sfp>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	4607      	mov	r7, r0
 8005b44:	f7ff ffac 	bl	8005aa0 <__sfp_lock_acquire>
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <__sfp+0x84>)
 8005b4a:	681e      	ldr	r6, [r3, #0]
 8005b4c:	69b3      	ldr	r3, [r6, #24]
 8005b4e:	b913      	cbnz	r3, 8005b56 <__sfp+0x16>
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7ff ffbd 	bl	8005ad0 <__sinit>
 8005b56:	3648      	adds	r6, #72	; 0x48
 8005b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	d503      	bpl.n	8005b68 <__sfp+0x28>
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	b30b      	cbz	r3, 8005ba8 <__sfp+0x68>
 8005b64:	6836      	ldr	r6, [r6, #0]
 8005b66:	e7f7      	b.n	8005b58 <__sfp+0x18>
 8005b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b6c:	b9d5      	cbnz	r5, 8005ba4 <__sfp+0x64>
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <__sfp+0x88>)
 8005b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b74:	60e3      	str	r3, [r4, #12]
 8005b76:	6665      	str	r5, [r4, #100]	; 0x64
 8005b78:	f000 fbb2 	bl	80062e0 <__retarget_lock_init_recursive>
 8005b7c:	f7ff ff96 	bl	8005aac <__sfp_lock_release>
 8005b80:	2208      	movs	r2, #8
 8005b82:	4629      	mov	r1, r5
 8005b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b8c:	6025      	str	r5, [r4, #0]
 8005b8e:	61a5      	str	r5, [r4, #24]
 8005b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b94:	f7fd fbe8 	bl	8003368 <memset>
 8005b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba4:	3468      	adds	r4, #104	; 0x68
 8005ba6:	e7d9      	b.n	8005b5c <__sfp+0x1c>
 8005ba8:	2104      	movs	r1, #4
 8005baa:	4638      	mov	r0, r7
 8005bac:	f7ff ff62 	bl	8005a74 <__sfmoreglue>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	6030      	str	r0, [r6, #0]
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d1d5      	bne.n	8005b64 <__sfp+0x24>
 8005bb8:	f7ff ff78 	bl	8005aac <__sfp_lock_release>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	e7ee      	b.n	8005ba0 <__sfp+0x60>
 8005bc2:	bf00      	nop
 8005bc4:	08007500 	.word	0x08007500
 8005bc8:	ffff0001 	.word	0xffff0001

08005bcc <_fwalk_reent>:
 8005bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	4688      	mov	r8, r1
 8005bd4:	2700      	movs	r7, #0
 8005bd6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bde:	f1b9 0901 	subs.w	r9, r9, #1
 8005be2:	d505      	bpl.n	8005bf0 <_fwalk_reent+0x24>
 8005be4:	6824      	ldr	r4, [r4, #0]
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	d1f7      	bne.n	8005bda <_fwalk_reent+0xe>
 8005bea:	4638      	mov	r0, r7
 8005bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf0:	89ab      	ldrh	r3, [r5, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d907      	bls.n	8005c06 <_fwalk_reent+0x3a>
 8005bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <_fwalk_reent+0x3a>
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4630      	mov	r0, r6
 8005c02:	47c0      	blx	r8
 8005c04:	4307      	orrs	r7, r0
 8005c06:	3568      	adds	r5, #104	; 0x68
 8005c08:	e7e9      	b.n	8005bde <_fwalk_reent+0x12>

08005c0a <rshift>:
 8005c0a:	6903      	ldr	r3, [r0, #16]
 8005c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c14:	f100 0414 	add.w	r4, r0, #20
 8005c18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c1c:	dd46      	ble.n	8005cac <rshift+0xa2>
 8005c1e:	f011 011f 	ands.w	r1, r1, #31
 8005c22:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c26:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c2a:	d10c      	bne.n	8005c46 <rshift+0x3c>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	f100 0710 	add.w	r7, r0, #16
 8005c32:	42b1      	cmp	r1, r6
 8005c34:	d335      	bcc.n	8005ca2 <rshift+0x98>
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	1eea      	subs	r2, r5, #3
 8005c3c:	4296      	cmp	r6, r2
 8005c3e:	bf38      	it	cc
 8005c40:	2300      	movcc	r3, #0
 8005c42:	4423      	add	r3, r4
 8005c44:	e015      	b.n	8005c72 <rshift+0x68>
 8005c46:	46a1      	mov	r9, r4
 8005c48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c4c:	f1c1 0820 	rsb	r8, r1, #32
 8005c50:	40cf      	lsrs	r7, r1
 8005c52:	f105 0e04 	add.w	lr, r5, #4
 8005c56:	4576      	cmp	r6, lr
 8005c58:	46f4      	mov	ip, lr
 8005c5a:	d816      	bhi.n	8005c8a <rshift+0x80>
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009a      	lsls	r2, r3, #2
 8005c60:	3a04      	subs	r2, #4
 8005c62:	3501      	adds	r5, #1
 8005c64:	42ae      	cmp	r6, r5
 8005c66:	bf38      	it	cc
 8005c68:	2200      	movcc	r2, #0
 8005c6a:	18a3      	adds	r3, r4, r2
 8005c6c:	50a7      	str	r7, [r4, r2]
 8005c6e:	b107      	cbz	r7, 8005c72 <rshift+0x68>
 8005c70:	3304      	adds	r3, #4
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	eba3 0204 	sub.w	r2, r3, r4
 8005c78:	bf08      	it	eq
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c80:	6102      	str	r2, [r0, #16]
 8005c82:	bf08      	it	eq
 8005c84:	6143      	streq	r3, [r0, #20]
 8005c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	f8dc c000 	ldr.w	ip, [ip]
 8005c8e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c92:	ea4c 0707 	orr.w	r7, ip, r7
 8005c96:	f849 7b04 	str.w	r7, [r9], #4
 8005c9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c9e:	40cf      	lsrs	r7, r1
 8005ca0:	e7d9      	b.n	8005c56 <rshift+0x4c>
 8005ca2:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ca6:	f847 cf04 	str.w	ip, [r7, #4]!
 8005caa:	e7c2      	b.n	8005c32 <rshift+0x28>
 8005cac:	4623      	mov	r3, r4
 8005cae:	e7e0      	b.n	8005c72 <rshift+0x68>

08005cb0 <__hexdig_fun>:
 8005cb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005cb4:	2b09      	cmp	r3, #9
 8005cb6:	d802      	bhi.n	8005cbe <__hexdig_fun+0xe>
 8005cb8:	3820      	subs	r0, #32
 8005cba:	b2c0      	uxtb	r0, r0
 8005cbc:	4770      	bx	lr
 8005cbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d801      	bhi.n	8005cca <__hexdig_fun+0x1a>
 8005cc6:	3847      	subs	r0, #71	; 0x47
 8005cc8:	e7f7      	b.n	8005cba <__hexdig_fun+0xa>
 8005cca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d801      	bhi.n	8005cd6 <__hexdig_fun+0x26>
 8005cd2:	3827      	subs	r0, #39	; 0x27
 8005cd4:	e7f1      	b.n	8005cba <__hexdig_fun+0xa>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	4770      	bx	lr
	...

08005cdc <__gethex>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	b08b      	sub	sp, #44	; 0x2c
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	4bb9      	ldr	r3, [pc, #740]	; (8005fcc <__gethex+0x2f0>)
 8005ce6:	9002      	str	r0, [sp, #8]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	468b      	mov	fp, r1
 8005cec:	4618      	mov	r0, r3
 8005cee:	4690      	mov	r8, r2
 8005cf0:	9303      	str	r3, [sp, #12]
 8005cf2:	f7fa fa2d 	bl	8000150 <strlen>
 8005cf6:	4682      	mov	sl, r0
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	f8db 2000 	ldr.w	r2, [fp]
 8005cfe:	4403      	add	r3, r0
 8005d00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d04:	9307      	str	r3, [sp, #28]
 8005d06:	1c93      	adds	r3, r2, #2
 8005d08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005d0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005d10:	32fe      	adds	r2, #254	; 0xfe
 8005d12:	18d1      	adds	r1, r2, r3
 8005d14:	461f      	mov	r7, r3
 8005d16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d1a:	9101      	str	r1, [sp, #4]
 8005d1c:	2830      	cmp	r0, #48	; 0x30
 8005d1e:	d0f8      	beq.n	8005d12 <__gethex+0x36>
 8005d20:	f7ff ffc6 	bl	8005cb0 <__hexdig_fun>
 8005d24:	4604      	mov	r4, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d13a      	bne.n	8005da0 <__gethex+0xc4>
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	9903      	ldr	r1, [sp, #12]
 8005d30:	f001 fa95 	bl	800725e <strncmp>
 8005d34:	4605      	mov	r5, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d166      	bne.n	8005e08 <__gethex+0x12c>
 8005d3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005d3e:	eb07 060a 	add.w	r6, r7, sl
 8005d42:	f7ff ffb5 	bl	8005cb0 <__hexdig_fun>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d060      	beq.n	8005e0c <__gethex+0x130>
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	7818      	ldrb	r0, [r3, #0]
 8005d4e:	461f      	mov	r7, r3
 8005d50:	2830      	cmp	r0, #48	; 0x30
 8005d52:	f103 0301 	add.w	r3, r3, #1
 8005d56:	d0f9      	beq.n	8005d4c <__gethex+0x70>
 8005d58:	f7ff ffaa 	bl	8005cb0 <__hexdig_fun>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	fab0 f480 	clz	r4, r0
 8005d62:	4635      	mov	r5, r6
 8005d64:	0964      	lsrs	r4, r4, #5
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4616      	mov	r6, r2
 8005d6c:	7830      	ldrb	r0, [r6, #0]
 8005d6e:	3201      	adds	r2, #1
 8005d70:	f7ff ff9e 	bl	8005cb0 <__hexdig_fun>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d1f8      	bne.n	8005d6a <__gethex+0x8e>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	f001 fa6e 	bl	800725e <strncmp>
 8005d82:	b980      	cbnz	r0, 8005da6 <__gethex+0xca>
 8005d84:	b94d      	cbnz	r5, 8005d9a <__gethex+0xbe>
 8005d86:	eb06 050a 	add.w	r5, r6, sl
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	7830      	ldrb	r0, [r6, #0]
 8005d90:	3201      	adds	r2, #1
 8005d92:	f7ff ff8d 	bl	8005cb0 <__hexdig_fun>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d1f8      	bne.n	8005d8c <__gethex+0xb0>
 8005d9a:	1bad      	subs	r5, r5, r6
 8005d9c:	00ad      	lsls	r5, r5, #2
 8005d9e:	e004      	b.n	8005daa <__gethex+0xce>
 8005da0:	2400      	movs	r4, #0
 8005da2:	4625      	mov	r5, r4
 8005da4:	e7e0      	b.n	8005d68 <__gethex+0x8c>
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	d1f7      	bne.n	8005d9a <__gethex+0xbe>
 8005daa:	7833      	ldrb	r3, [r6, #0]
 8005dac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005db0:	2b50      	cmp	r3, #80	; 0x50
 8005db2:	d139      	bne.n	8005e28 <__gethex+0x14c>
 8005db4:	7873      	ldrb	r3, [r6, #1]
 8005db6:	2b2b      	cmp	r3, #43	; 0x2b
 8005db8:	d02a      	beq.n	8005e10 <__gethex+0x134>
 8005dba:	2b2d      	cmp	r3, #45	; 0x2d
 8005dbc:	d02c      	beq.n	8005e18 <__gethex+0x13c>
 8005dbe:	f04f 0900 	mov.w	r9, #0
 8005dc2:	1c71      	adds	r1, r6, #1
 8005dc4:	7808      	ldrb	r0, [r1, #0]
 8005dc6:	f7ff ff73 	bl	8005cb0 <__hexdig_fun>
 8005dca:	1e43      	subs	r3, r0, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b18      	cmp	r3, #24
 8005dd0:	d82a      	bhi.n	8005e28 <__gethex+0x14c>
 8005dd2:	f1a0 0210 	sub.w	r2, r0, #16
 8005dd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dda:	f7ff ff69 	bl	8005cb0 <__hexdig_fun>
 8005dde:	1e43      	subs	r3, r0, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b18      	cmp	r3, #24
 8005de4:	d91b      	bls.n	8005e1e <__gethex+0x142>
 8005de6:	f1b9 0f00 	cmp.w	r9, #0
 8005dea:	d000      	beq.n	8005dee <__gethex+0x112>
 8005dec:	4252      	negs	r2, r2
 8005dee:	4415      	add	r5, r2
 8005df0:	f8cb 1000 	str.w	r1, [fp]
 8005df4:	b1d4      	cbz	r4, 8005e2c <__gethex+0x150>
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf14      	ite	ne
 8005dfc:	2700      	movne	r7, #0
 8005dfe:	2706      	moveq	r7, #6
 8005e00:	4638      	mov	r0, r7
 8005e02:	b00b      	add	sp, #44	; 0x2c
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	463e      	mov	r6, r7
 8005e0a:	4625      	mov	r5, r4
 8005e0c:	2401      	movs	r4, #1
 8005e0e:	e7cc      	b.n	8005daa <__gethex+0xce>
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	1cb1      	adds	r1, r6, #2
 8005e16:	e7d5      	b.n	8005dc4 <__gethex+0xe8>
 8005e18:	f04f 0901 	mov.w	r9, #1
 8005e1c:	e7fa      	b.n	8005e14 <__gethex+0x138>
 8005e1e:	230a      	movs	r3, #10
 8005e20:	fb03 0202 	mla	r2, r3, r2, r0
 8005e24:	3a10      	subs	r2, #16
 8005e26:	e7d6      	b.n	8005dd6 <__gethex+0xfa>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	e7e1      	b.n	8005df0 <__gethex+0x114>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	1bf3      	subs	r3, r6, r7
 8005e30:	3b01      	subs	r3, #1
 8005e32:	2b07      	cmp	r3, #7
 8005e34:	dc0a      	bgt.n	8005e4c <__gethex+0x170>
 8005e36:	9802      	ldr	r0, [sp, #8]
 8005e38:	f000 faf0 	bl	800641c <_Balloc>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	b940      	cbnz	r0, 8005e52 <__gethex+0x176>
 8005e40:	4602      	mov	r2, r0
 8005e42:	21de      	movs	r1, #222	; 0xde
 8005e44:	4b62      	ldr	r3, [pc, #392]	; (8005fd0 <__gethex+0x2f4>)
 8005e46:	4863      	ldr	r0, [pc, #396]	; (8005fd4 <__gethex+0x2f8>)
 8005e48:	f001 fa3a 	bl	80072c0 <__assert_func>
 8005e4c:	3101      	adds	r1, #1
 8005e4e:	105b      	asrs	r3, r3, #1
 8005e50:	e7ef      	b.n	8005e32 <__gethex+0x156>
 8005e52:	f04f 0b00 	mov.w	fp, #0
 8005e56:	f100 0914 	add.w	r9, r0, #20
 8005e5a:	f1ca 0301 	rsb	r3, sl, #1
 8005e5e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005e62:	f8cd b004 	str.w	fp, [sp, #4]
 8005e66:	9308      	str	r3, [sp, #32]
 8005e68:	42b7      	cmp	r7, r6
 8005e6a:	d33f      	bcc.n	8005eec <__gethex+0x210>
 8005e6c:	9f04      	ldr	r7, [sp, #16]
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	f847 3b04 	str.w	r3, [r7], #4
 8005e74:	eba7 0709 	sub.w	r7, r7, r9
 8005e78:	10bf      	asrs	r7, r7, #2
 8005e7a:	6127      	str	r7, [r4, #16]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fbc3 	bl	8006608 <__hi0bits>
 8005e82:	017f      	lsls	r7, r7, #5
 8005e84:	f8d8 6000 	ldr.w	r6, [r8]
 8005e88:	1a3f      	subs	r7, r7, r0
 8005e8a:	42b7      	cmp	r7, r6
 8005e8c:	dd62      	ble.n	8005f54 <__gethex+0x278>
 8005e8e:	1bbf      	subs	r7, r7, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 ff59 	bl	8006d4a <__any_on>
 8005e98:	4682      	mov	sl, r0
 8005e9a:	b1a8      	cbz	r0, 8005ec8 <__gethex+0x1ec>
 8005e9c:	f04f 0a01 	mov.w	sl, #1
 8005ea0:	1e7b      	subs	r3, r7, #1
 8005ea2:	1159      	asrs	r1, r3, #5
 8005ea4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ea8:	f003 021f 	and.w	r2, r3, #31
 8005eac:	fa0a f202 	lsl.w	r2, sl, r2
 8005eb0:	420a      	tst	r2, r1
 8005eb2:	d009      	beq.n	8005ec8 <__gethex+0x1ec>
 8005eb4:	4553      	cmp	r3, sl
 8005eb6:	dd05      	ble.n	8005ec4 <__gethex+0x1e8>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	1eb9      	subs	r1, r7, #2
 8005ebc:	f000 ff45 	bl	8006d4a <__any_on>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d144      	bne.n	8005f4e <__gethex+0x272>
 8005ec4:	f04f 0a02 	mov.w	sl, #2
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fe9d 	bl	8005c0a <rshift>
 8005ed0:	443d      	add	r5, r7
 8005ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ed6:	42ab      	cmp	r3, r5
 8005ed8:	da4a      	bge.n	8005f70 <__gethex+0x294>
 8005eda:	4621      	mov	r1, r4
 8005edc:	9802      	ldr	r0, [sp, #8]
 8005ede:	f000 fadd 	bl	800649c <_Bfree>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ee6:	27a3      	movs	r7, #163	; 0xa3
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e789      	b.n	8005e00 <__gethex+0x124>
 8005eec:	1e73      	subs	r3, r6, #1
 8005eee:	9a07      	ldr	r2, [sp, #28]
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d019      	beq.n	8005f2e <__gethex+0x252>
 8005efa:	f1bb 0f20 	cmp.w	fp, #32
 8005efe:	d107      	bne.n	8005f10 <__gethex+0x234>
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	9a01      	ldr	r2, [sp, #4]
 8005f04:	f843 2b04 	str.w	r2, [r3], #4
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005f14:	f7ff fecc 	bl	8005cb0 <__hexdig_fun>
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	f000 000f 	and.w	r0, r0, #15
 8005f1e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005f22:	4303      	orrs	r3, r0
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	f10b 0b04 	add.w	fp, fp, #4
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	e00d      	b.n	8005f4a <__gethex+0x26e>
 8005f2e:	9b05      	ldr	r3, [sp, #20]
 8005f30:	9a08      	ldr	r2, [sp, #32]
 8005f32:	4413      	add	r3, r2
 8005f34:	42bb      	cmp	r3, r7
 8005f36:	d3e0      	bcc.n	8005efa <__gethex+0x21e>
 8005f38:	4618      	mov	r0, r3
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	9903      	ldr	r1, [sp, #12]
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	f001 f98d 	bl	800725e <strncmp>
 8005f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1d7      	bne.n	8005efa <__gethex+0x21e>
 8005f4a:	461e      	mov	r6, r3
 8005f4c:	e78c      	b.n	8005e68 <__gethex+0x18c>
 8005f4e:	f04f 0a03 	mov.w	sl, #3
 8005f52:	e7b9      	b.n	8005ec8 <__gethex+0x1ec>
 8005f54:	da09      	bge.n	8005f6a <__gethex+0x28e>
 8005f56:	1bf7      	subs	r7, r6, r7
 8005f58:	4621      	mov	r1, r4
 8005f5a:	463a      	mov	r2, r7
 8005f5c:	9802      	ldr	r0, [sp, #8]
 8005f5e:	f000 fcb5 	bl	80068cc <__lshift>
 8005f62:	4604      	mov	r4, r0
 8005f64:	1bed      	subs	r5, r5, r7
 8005f66:	f100 0914 	add.w	r9, r0, #20
 8005f6a:	f04f 0a00 	mov.w	sl, #0
 8005f6e:	e7b0      	b.n	8005ed2 <__gethex+0x1f6>
 8005f70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f74:	42a8      	cmp	r0, r5
 8005f76:	dd71      	ble.n	800605c <__gethex+0x380>
 8005f78:	1b45      	subs	r5, r0, r5
 8005f7a:	42ae      	cmp	r6, r5
 8005f7c:	dc34      	bgt.n	8005fe8 <__gethex+0x30c>
 8005f7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d028      	beq.n	8005fd8 <__gethex+0x2fc>
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d02a      	beq.n	8005fe0 <__gethex+0x304>
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d115      	bne.n	8005fba <__gethex+0x2de>
 8005f8e:	42ae      	cmp	r6, r5
 8005f90:	d113      	bne.n	8005fba <__gethex+0x2de>
 8005f92:	2e01      	cmp	r6, #1
 8005f94:	d10b      	bne.n	8005fae <__gethex+0x2d2>
 8005f96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f9a:	9a06      	ldr	r2, [sp, #24]
 8005f9c:	2762      	movs	r7, #98	; 0x62
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	f8c9 3000 	str.w	r3, [r9]
 8005fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005faa:	601c      	str	r4, [r3, #0]
 8005fac:	e728      	b.n	8005e00 <__gethex+0x124>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	1e71      	subs	r1, r6, #1
 8005fb2:	f000 feca 	bl	8006d4a <__any_on>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1ed      	bne.n	8005f96 <__gethex+0x2ba>
 8005fba:	4621      	mov	r1, r4
 8005fbc:	9802      	ldr	r0, [sp, #8]
 8005fbe:	f000 fa6d 	bl	800649c <_Bfree>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fc6:	2750      	movs	r7, #80	; 0x50
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e719      	b.n	8005e00 <__gethex+0x124>
 8005fcc:	080076e8 	.word	0x080076e8
 8005fd0:	0800760b 	.word	0x0800760b
 8005fd4:	0800767c 	.word	0x0800767c
 8005fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ed      	bne.n	8005fba <__gethex+0x2de>
 8005fde:	e7da      	b.n	8005f96 <__gethex+0x2ba>
 8005fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d7      	bne.n	8005f96 <__gethex+0x2ba>
 8005fe6:	e7e8      	b.n	8005fba <__gethex+0x2de>
 8005fe8:	1e6f      	subs	r7, r5, #1
 8005fea:	f1ba 0f00 	cmp.w	sl, #0
 8005fee:	d132      	bne.n	8006056 <__gethex+0x37a>
 8005ff0:	b127      	cbz	r7, 8005ffc <__gethex+0x320>
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fea8 	bl	8006d4a <__any_on>
 8005ffa:	4682      	mov	sl, r0
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	117b      	asrs	r3, r7, #5
 8006000:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006004:	f007 071f 	and.w	r7, r7, #31
 8006008:	fa01 f707 	lsl.w	r7, r1, r7
 800600c:	421f      	tst	r7, r3
 800600e:	f04f 0702 	mov.w	r7, #2
 8006012:	4629      	mov	r1, r5
 8006014:	4620      	mov	r0, r4
 8006016:	bf18      	it	ne
 8006018:	f04a 0a02 	orrne.w	sl, sl, #2
 800601c:	1b76      	subs	r6, r6, r5
 800601e:	f7ff fdf4 	bl	8005c0a <rshift>
 8006022:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006026:	f1ba 0f00 	cmp.w	sl, #0
 800602a:	d048      	beq.n	80060be <__gethex+0x3e2>
 800602c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d015      	beq.n	8006060 <__gethex+0x384>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d017      	beq.n	8006068 <__gethex+0x38c>
 8006038:	2b01      	cmp	r3, #1
 800603a:	d109      	bne.n	8006050 <__gethex+0x374>
 800603c:	f01a 0f02 	tst.w	sl, #2
 8006040:	d006      	beq.n	8006050 <__gethex+0x374>
 8006042:	f8d9 0000 	ldr.w	r0, [r9]
 8006046:	ea4a 0a00 	orr.w	sl, sl, r0
 800604a:	f01a 0f01 	tst.w	sl, #1
 800604e:	d10e      	bne.n	800606e <__gethex+0x392>
 8006050:	f047 0710 	orr.w	r7, r7, #16
 8006054:	e033      	b.n	80060be <__gethex+0x3e2>
 8006056:	f04f 0a01 	mov.w	sl, #1
 800605a:	e7cf      	b.n	8005ffc <__gethex+0x320>
 800605c:	2701      	movs	r7, #1
 800605e:	e7e2      	b.n	8006026 <__gethex+0x34a>
 8006060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006062:	f1c3 0301 	rsb	r3, r3, #1
 8006066:	9315      	str	r3, [sp, #84]	; 0x54
 8006068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <__gethex+0x374>
 800606e:	f04f 0c00 	mov.w	ip, #0
 8006072:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006076:	f104 0314 	add.w	r3, r4, #20
 800607a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800607e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006082:	4618      	mov	r0, r3
 8006084:	f853 2b04 	ldr.w	r2, [r3], #4
 8006088:	f1b2 3fff 	cmp.w	r2, #4294967295
 800608c:	d01c      	beq.n	80060c8 <__gethex+0x3ec>
 800608e:	3201      	adds	r2, #1
 8006090:	6002      	str	r2, [r0, #0]
 8006092:	2f02      	cmp	r7, #2
 8006094:	f104 0314 	add.w	r3, r4, #20
 8006098:	d13d      	bne.n	8006116 <__gethex+0x43a>
 800609a:	f8d8 2000 	ldr.w	r2, [r8]
 800609e:	3a01      	subs	r2, #1
 80060a0:	42b2      	cmp	r2, r6
 80060a2:	d10a      	bne.n	80060ba <__gethex+0x3de>
 80060a4:	2201      	movs	r2, #1
 80060a6:	1171      	asrs	r1, r6, #5
 80060a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060ac:	f006 061f 	and.w	r6, r6, #31
 80060b0:	fa02 f606 	lsl.w	r6, r2, r6
 80060b4:	421e      	tst	r6, r3
 80060b6:	bf18      	it	ne
 80060b8:	4617      	movne	r7, r2
 80060ba:	f047 0720 	orr.w	r7, r7, #32
 80060be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060c0:	601c      	str	r4, [r3, #0]
 80060c2:	9b06      	ldr	r3, [sp, #24]
 80060c4:	601d      	str	r5, [r3, #0]
 80060c6:	e69b      	b.n	8005e00 <__gethex+0x124>
 80060c8:	4299      	cmp	r1, r3
 80060ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80060ce:	d8d8      	bhi.n	8006082 <__gethex+0x3a6>
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	459b      	cmp	fp, r3
 80060d4:	db17      	blt.n	8006106 <__gethex+0x42a>
 80060d6:	6861      	ldr	r1, [r4, #4]
 80060d8:	9802      	ldr	r0, [sp, #8]
 80060da:	3101      	adds	r1, #1
 80060dc:	f000 f99e 	bl	800641c <_Balloc>
 80060e0:	4681      	mov	r9, r0
 80060e2:	b918      	cbnz	r0, 80060ec <__gethex+0x410>
 80060e4:	4602      	mov	r2, r0
 80060e6:	2184      	movs	r1, #132	; 0x84
 80060e8:	4b19      	ldr	r3, [pc, #100]	; (8006150 <__gethex+0x474>)
 80060ea:	e6ac      	b.n	8005e46 <__gethex+0x16a>
 80060ec:	6922      	ldr	r2, [r4, #16]
 80060ee:	f104 010c 	add.w	r1, r4, #12
 80060f2:	3202      	adds	r2, #2
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	300c      	adds	r0, #12
 80060f8:	f000 f982 	bl	8006400 <memcpy>
 80060fc:	4621      	mov	r1, r4
 80060fe:	9802      	ldr	r0, [sp, #8]
 8006100:	f000 f9cc 	bl	800649c <_Bfree>
 8006104:	464c      	mov	r4, r9
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	6122      	str	r2, [r4, #16]
 800610c:	2201      	movs	r2, #1
 800610e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006112:	615a      	str	r2, [r3, #20]
 8006114:	e7bd      	b.n	8006092 <__gethex+0x3b6>
 8006116:	6922      	ldr	r2, [r4, #16]
 8006118:	455a      	cmp	r2, fp
 800611a:	dd0b      	ble.n	8006134 <__gethex+0x458>
 800611c:	2101      	movs	r1, #1
 800611e:	4620      	mov	r0, r4
 8006120:	f7ff fd73 	bl	8005c0a <rshift>
 8006124:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006128:	3501      	adds	r5, #1
 800612a:	42ab      	cmp	r3, r5
 800612c:	f6ff aed5 	blt.w	8005eda <__gethex+0x1fe>
 8006130:	2701      	movs	r7, #1
 8006132:	e7c2      	b.n	80060ba <__gethex+0x3de>
 8006134:	f016 061f 	ands.w	r6, r6, #31
 8006138:	d0fa      	beq.n	8006130 <__gethex+0x454>
 800613a:	449a      	add	sl, r3
 800613c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006140:	f000 fa62 	bl	8006608 <__hi0bits>
 8006144:	f1c6 0620 	rsb	r6, r6, #32
 8006148:	42b0      	cmp	r0, r6
 800614a:	dbe7      	blt.n	800611c <__gethex+0x440>
 800614c:	e7f0      	b.n	8006130 <__gethex+0x454>
 800614e:	bf00      	nop
 8006150:	0800760b 	.word	0x0800760b

08006154 <L_shift>:
 8006154:	f1c2 0208 	rsb	r2, r2, #8
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	f1c2 0620 	rsb	r6, r2, #32
 8006160:	6843      	ldr	r3, [r0, #4]
 8006162:	6804      	ldr	r4, [r0, #0]
 8006164:	fa03 f506 	lsl.w	r5, r3, r6
 8006168:	432c      	orrs	r4, r5
 800616a:	40d3      	lsrs	r3, r2
 800616c:	6004      	str	r4, [r0, #0]
 800616e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006172:	4288      	cmp	r0, r1
 8006174:	d3f4      	bcc.n	8006160 <L_shift+0xc>
 8006176:	bd70      	pop	{r4, r5, r6, pc}

08006178 <__match>:
 8006178:	b530      	push	{r4, r5, lr}
 800617a:	6803      	ldr	r3, [r0, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006182:	b914      	cbnz	r4, 800618a <__match+0x12>
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	2001      	movs	r0, #1
 8006188:	bd30      	pop	{r4, r5, pc}
 800618a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006192:	2d19      	cmp	r5, #25
 8006194:	bf98      	it	ls
 8006196:	3220      	addls	r2, #32
 8006198:	42a2      	cmp	r2, r4
 800619a:	d0f0      	beq.n	800617e <__match+0x6>
 800619c:	2000      	movs	r0, #0
 800619e:	e7f3      	b.n	8006188 <__match+0x10>

080061a0 <__hexnan>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	2500      	movs	r5, #0
 80061a6:	680b      	ldr	r3, [r1, #0]
 80061a8:	4682      	mov	sl, r0
 80061aa:	115e      	asrs	r6, r3, #5
 80061ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80061b0:	f013 031f 	ands.w	r3, r3, #31
 80061b4:	bf18      	it	ne
 80061b6:	3604      	addne	r6, #4
 80061b8:	1f37      	subs	r7, r6, #4
 80061ba:	4690      	mov	r8, r2
 80061bc:	46b9      	mov	r9, r7
 80061be:	463c      	mov	r4, r7
 80061c0:	46ab      	mov	fp, r5
 80061c2:	b087      	sub	sp, #28
 80061c4:	6801      	ldr	r1, [r0, #0]
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80061cc:	9502      	str	r5, [sp, #8]
 80061ce:	784a      	ldrb	r2, [r1, #1]
 80061d0:	1c4b      	adds	r3, r1, #1
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	b342      	cbz	r2, 8006228 <__hexnan+0x88>
 80061d6:	4610      	mov	r0, r2
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	9204      	str	r2, [sp, #16]
 80061dc:	f7ff fd68 	bl	8005cb0 <__hexdig_fun>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d14f      	bne.n	8006284 <__hexnan+0xe4>
 80061e4:	9a04      	ldr	r2, [sp, #16]
 80061e6:	9905      	ldr	r1, [sp, #20]
 80061e8:	2a20      	cmp	r2, #32
 80061ea:	d818      	bhi.n	800621e <__hexnan+0x7e>
 80061ec:	9b02      	ldr	r3, [sp, #8]
 80061ee:	459b      	cmp	fp, r3
 80061f0:	dd13      	ble.n	800621a <__hexnan+0x7a>
 80061f2:	454c      	cmp	r4, r9
 80061f4:	d206      	bcs.n	8006204 <__hexnan+0x64>
 80061f6:	2d07      	cmp	r5, #7
 80061f8:	dc04      	bgt.n	8006204 <__hexnan+0x64>
 80061fa:	462a      	mov	r2, r5
 80061fc:	4649      	mov	r1, r9
 80061fe:	4620      	mov	r0, r4
 8006200:	f7ff ffa8 	bl	8006154 <L_shift>
 8006204:	4544      	cmp	r4, r8
 8006206:	d950      	bls.n	80062aa <__hexnan+0x10a>
 8006208:	2300      	movs	r3, #0
 800620a:	f1a4 0904 	sub.w	r9, r4, #4
 800620e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006212:	461d      	mov	r5, r3
 8006214:	464c      	mov	r4, r9
 8006216:	f8cd b008 	str.w	fp, [sp, #8]
 800621a:	9903      	ldr	r1, [sp, #12]
 800621c:	e7d7      	b.n	80061ce <__hexnan+0x2e>
 800621e:	2a29      	cmp	r2, #41	; 0x29
 8006220:	d156      	bne.n	80062d0 <__hexnan+0x130>
 8006222:	3102      	adds	r1, #2
 8006224:	f8ca 1000 	str.w	r1, [sl]
 8006228:	f1bb 0f00 	cmp.w	fp, #0
 800622c:	d050      	beq.n	80062d0 <__hexnan+0x130>
 800622e:	454c      	cmp	r4, r9
 8006230:	d206      	bcs.n	8006240 <__hexnan+0xa0>
 8006232:	2d07      	cmp	r5, #7
 8006234:	dc04      	bgt.n	8006240 <__hexnan+0xa0>
 8006236:	462a      	mov	r2, r5
 8006238:	4649      	mov	r1, r9
 800623a:	4620      	mov	r0, r4
 800623c:	f7ff ff8a 	bl	8006154 <L_shift>
 8006240:	4544      	cmp	r4, r8
 8006242:	d934      	bls.n	80062ae <__hexnan+0x10e>
 8006244:	4623      	mov	r3, r4
 8006246:	f1a8 0204 	sub.w	r2, r8, #4
 800624a:	f853 1b04 	ldr.w	r1, [r3], #4
 800624e:	429f      	cmp	r7, r3
 8006250:	f842 1f04 	str.w	r1, [r2, #4]!
 8006254:	d2f9      	bcs.n	800624a <__hexnan+0xaa>
 8006256:	1b3b      	subs	r3, r7, r4
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	3304      	adds	r3, #4
 800625e:	3401      	adds	r4, #1
 8006260:	3e03      	subs	r6, #3
 8006262:	42b4      	cmp	r4, r6
 8006264:	bf88      	it	hi
 8006266:	2304      	movhi	r3, #4
 8006268:	2200      	movs	r2, #0
 800626a:	4443      	add	r3, r8
 800626c:	f843 2b04 	str.w	r2, [r3], #4
 8006270:	429f      	cmp	r7, r3
 8006272:	d2fb      	bcs.n	800626c <__hexnan+0xcc>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	b91b      	cbnz	r3, 8006280 <__hexnan+0xe0>
 8006278:	4547      	cmp	r7, r8
 800627a:	d127      	bne.n	80062cc <__hexnan+0x12c>
 800627c:	2301      	movs	r3, #1
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	2005      	movs	r0, #5
 8006282:	e026      	b.n	80062d2 <__hexnan+0x132>
 8006284:	3501      	adds	r5, #1
 8006286:	2d08      	cmp	r5, #8
 8006288:	f10b 0b01 	add.w	fp, fp, #1
 800628c:	dd06      	ble.n	800629c <__hexnan+0xfc>
 800628e:	4544      	cmp	r4, r8
 8006290:	d9c3      	bls.n	800621a <__hexnan+0x7a>
 8006292:	2300      	movs	r3, #0
 8006294:	2501      	movs	r5, #1
 8006296:	f844 3c04 	str.w	r3, [r4, #-4]
 800629a:	3c04      	subs	r4, #4
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	f000 000f 	and.w	r0, r0, #15
 80062a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	e7b7      	b.n	800621a <__hexnan+0x7a>
 80062aa:	2508      	movs	r5, #8
 80062ac:	e7b5      	b.n	800621a <__hexnan+0x7a>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0df      	beq.n	8006274 <__hexnan+0xd4>
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	f1c3 0320 	rsb	r3, r3, #32
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
 80062c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80062c4:	401a      	ands	r2, r3
 80062c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80062ca:	e7d3      	b.n	8006274 <__hexnan+0xd4>
 80062cc:	3f04      	subs	r7, #4
 80062ce:	e7d1      	b.n	8006274 <__hexnan+0xd4>
 80062d0:	2004      	movs	r0, #4
 80062d2:	b007      	add	sp, #28
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062d8 <_localeconv_r>:
 80062d8:	4800      	ldr	r0, [pc, #0]	; (80062dc <_localeconv_r+0x4>)
 80062da:	4770      	bx	lr
 80062dc:	20000164 	.word	0x20000164

080062e0 <__retarget_lock_init_recursive>:
 80062e0:	4770      	bx	lr

080062e2 <__retarget_lock_acquire_recursive>:
 80062e2:	4770      	bx	lr

080062e4 <__retarget_lock_release_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <__swhatbuf_r>:
 80062e6:	b570      	push	{r4, r5, r6, lr}
 80062e8:	460e      	mov	r6, r1
 80062ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ee:	4614      	mov	r4, r2
 80062f0:	2900      	cmp	r1, #0
 80062f2:	461d      	mov	r5, r3
 80062f4:	b096      	sub	sp, #88	; 0x58
 80062f6:	da07      	bge.n	8006308 <__swhatbuf_r+0x22>
 80062f8:	2300      	movs	r3, #0
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	89b3      	ldrh	r3, [r6, #12]
 80062fe:	061a      	lsls	r2, r3, #24
 8006300:	d410      	bmi.n	8006324 <__swhatbuf_r+0x3e>
 8006302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006306:	e00e      	b.n	8006326 <__swhatbuf_r+0x40>
 8006308:	466a      	mov	r2, sp
 800630a:	f001 f819 	bl	8007340 <_fstat_r>
 800630e:	2800      	cmp	r0, #0
 8006310:	dbf2      	blt.n	80062f8 <__swhatbuf_r+0x12>
 8006312:	9a01      	ldr	r2, [sp, #4]
 8006314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800631c:	425a      	negs	r2, r3
 800631e:	415a      	adcs	r2, r3
 8006320:	602a      	str	r2, [r5, #0]
 8006322:	e7ee      	b.n	8006302 <__swhatbuf_r+0x1c>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	2000      	movs	r0, #0
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	b016      	add	sp, #88	; 0x58
 800632c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006330 <__smakebuf_r>:
 8006330:	898b      	ldrh	r3, [r1, #12]
 8006332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006334:	079d      	lsls	r5, r3, #30
 8006336:	4606      	mov	r6, r0
 8006338:	460c      	mov	r4, r1
 800633a:	d507      	bpl.n	800634c <__smakebuf_r+0x1c>
 800633c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	2301      	movs	r3, #1
 8006346:	6163      	str	r3, [r4, #20]
 8006348:	b002      	add	sp, #8
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	466a      	mov	r2, sp
 800634e:	ab01      	add	r3, sp, #4
 8006350:	f7ff ffc9 	bl	80062e6 <__swhatbuf_r>
 8006354:	9900      	ldr	r1, [sp, #0]
 8006356:	4605      	mov	r5, r0
 8006358:	4630      	mov	r0, r6
 800635a:	f000 fd71 	bl	8006e40 <_malloc_r>
 800635e:	b948      	cbnz	r0, 8006374 <__smakebuf_r+0x44>
 8006360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d4ef      	bmi.n	8006348 <__smakebuf_r+0x18>
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e7e3      	b.n	800633c <__smakebuf_r+0xc>
 8006374:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <__smakebuf_r+0x7c>)
 8006376:	62b3      	str	r3, [r6, #40]	; 0x28
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	6020      	str	r0, [r4, #0]
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	9b00      	ldr	r3, [sp, #0]
 8006384:	6120      	str	r0, [r4, #16]
 8006386:	6163      	str	r3, [r4, #20]
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	b15b      	cbz	r3, 80063a4 <__smakebuf_r+0x74>
 800638c:	4630      	mov	r0, r6
 800638e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006392:	f000 ffe7 	bl	8007364 <_isatty_r>
 8006396:	b128      	cbz	r0, 80063a4 <__smakebuf_r+0x74>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	89a0      	ldrh	r0, [r4, #12]
 80063a6:	4305      	orrs	r5, r0
 80063a8:	81a5      	strh	r5, [r4, #12]
 80063aa:	e7cd      	b.n	8006348 <__smakebuf_r+0x18>
 80063ac:	08005a69 	.word	0x08005a69

080063b0 <malloc>:
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <malloc+0xc>)
 80063b2:	4601      	mov	r1, r0
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f000 bd43 	b.w	8006e40 <_malloc_r>
 80063ba:	bf00      	nop
 80063bc:	2000000c 	.word	0x2000000c

080063c0 <__ascii_mbtowc>:
 80063c0:	b082      	sub	sp, #8
 80063c2:	b901      	cbnz	r1, 80063c6 <__ascii_mbtowc+0x6>
 80063c4:	a901      	add	r1, sp, #4
 80063c6:	b142      	cbz	r2, 80063da <__ascii_mbtowc+0x1a>
 80063c8:	b14b      	cbz	r3, 80063de <__ascii_mbtowc+0x1e>
 80063ca:	7813      	ldrb	r3, [r2, #0]
 80063cc:	600b      	str	r3, [r1, #0]
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	1e10      	subs	r0, r2, #0
 80063d2:	bf18      	it	ne
 80063d4:	2001      	movne	r0, #1
 80063d6:	b002      	add	sp, #8
 80063d8:	4770      	bx	lr
 80063da:	4610      	mov	r0, r2
 80063dc:	e7fb      	b.n	80063d6 <__ascii_mbtowc+0x16>
 80063de:	f06f 0001 	mvn.w	r0, #1
 80063e2:	e7f8      	b.n	80063d6 <__ascii_mbtowc+0x16>

080063e4 <memchr>:
 80063e4:	4603      	mov	r3, r0
 80063e6:	b510      	push	{r4, lr}
 80063e8:	b2c9      	uxtb	r1, r1
 80063ea:	4402      	add	r2, r0
 80063ec:	4293      	cmp	r3, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	d101      	bne.n	80063f6 <memchr+0x12>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e003      	b.n	80063fe <memchr+0x1a>
 80063f6:	7804      	ldrb	r4, [r0, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	428c      	cmp	r4, r1
 80063fc:	d1f6      	bne.n	80063ec <memchr+0x8>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <memcpy>:
 8006400:	440a      	add	r2, r1
 8006402:	4291      	cmp	r1, r2
 8006404:	f100 33ff 	add.w	r3, r0, #4294967295
 8006408:	d100      	bne.n	800640c <memcpy+0xc>
 800640a:	4770      	bx	lr
 800640c:	b510      	push	{r4, lr}
 800640e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006412:	4291      	cmp	r1, r2
 8006414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006418:	d1f9      	bne.n	800640e <memcpy+0xe>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_Balloc>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
 8006424:	b976      	cbnz	r6, 8006444 <_Balloc+0x28>
 8006426:	2010      	movs	r0, #16
 8006428:	f7ff ffc2 	bl	80063b0 <malloc>
 800642c:	4602      	mov	r2, r0
 800642e:	6260      	str	r0, [r4, #36]	; 0x24
 8006430:	b920      	cbnz	r0, 800643c <_Balloc+0x20>
 8006432:	2166      	movs	r1, #102	; 0x66
 8006434:	4b17      	ldr	r3, [pc, #92]	; (8006494 <_Balloc+0x78>)
 8006436:	4818      	ldr	r0, [pc, #96]	; (8006498 <_Balloc+0x7c>)
 8006438:	f000 ff42 	bl	80072c0 <__assert_func>
 800643c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006440:	6006      	str	r6, [r0, #0]
 8006442:	60c6      	str	r6, [r0, #12]
 8006444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006446:	68f3      	ldr	r3, [r6, #12]
 8006448:	b183      	cbz	r3, 800646c <_Balloc+0x50>
 800644a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006452:	b9b8      	cbnz	r0, 8006484 <_Balloc+0x68>
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f605 	lsl.w	r6, r1, r5
 800645a:	1d72      	adds	r2, r6, #5
 800645c:	4620      	mov	r0, r4
 800645e:	0092      	lsls	r2, r2, #2
 8006460:	f000 fc94 	bl	8006d8c <_calloc_r>
 8006464:	b160      	cbz	r0, 8006480 <_Balloc+0x64>
 8006466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800646a:	e00e      	b.n	800648a <_Balloc+0x6e>
 800646c:	2221      	movs	r2, #33	; 0x21
 800646e:	2104      	movs	r1, #4
 8006470:	4620      	mov	r0, r4
 8006472:	f000 fc8b 	bl	8006d8c <_calloc_r>
 8006476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006478:	60f0      	str	r0, [r6, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e4      	bne.n	800644a <_Balloc+0x2e>
 8006480:	2000      	movs	r0, #0
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	6802      	ldr	r2, [r0, #0]
 8006486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800648a:	2300      	movs	r3, #0
 800648c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006490:	e7f7      	b.n	8006482 <_Balloc+0x66>
 8006492:	bf00      	nop
 8006494:	08007595 	.word	0x08007595
 8006498:	080076fc 	.word	0x080076fc

0800649c <_Bfree>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a0:	4605      	mov	r5, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Bfree+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7ff ff82 	bl	80063b0 <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6268      	str	r0, [r5, #36]	; 0x24
 80064b0:	b920      	cbnz	r0, 80064bc <_Bfree+0x20>
 80064b2:	218a      	movs	r1, #138	; 0x8a
 80064b4:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <_Bfree+0x3c>)
 80064b6:	4809      	ldr	r0, [pc, #36]	; (80064dc <_Bfree+0x40>)
 80064b8:	f000 ff02 	bl	80072c0 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	b13c      	cbz	r4, 80064d6 <_Bfree+0x3a>
 80064c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064d0:	6021      	str	r1, [r4, #0]
 80064d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	08007595 	.word	0x08007595
 80064dc:	080076fc 	.word	0x080076fc

080064e0 <__multadd>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	4698      	mov	r8, r3
 80064e6:	460c      	mov	r4, r1
 80064e8:	2300      	movs	r3, #0
 80064ea:	690e      	ldr	r6, [r1, #16]
 80064ec:	4607      	mov	r7, r0
 80064ee:	f101 0014 	add.w	r0, r1, #20
 80064f2:	6805      	ldr	r5, [r0, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	b2a9      	uxth	r1, r5
 80064f8:	fb02 8101 	mla	r1, r2, r1, r8
 80064fc:	0c2d      	lsrs	r5, r5, #16
 80064fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006502:	fb02 c505 	mla	r5, r2, r5, ip
 8006506:	b289      	uxth	r1, r1
 8006508:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800650c:	429e      	cmp	r6, r3
 800650e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006512:	f840 1b04 	str.w	r1, [r0], #4
 8006516:	dcec      	bgt.n	80064f2 <__multadd+0x12>
 8006518:	f1b8 0f00 	cmp.w	r8, #0
 800651c:	d022      	beq.n	8006564 <__multadd+0x84>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	42b3      	cmp	r3, r6
 8006522:	dc19      	bgt.n	8006558 <__multadd+0x78>
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	4638      	mov	r0, r7
 8006528:	3101      	adds	r1, #1
 800652a:	f7ff ff77 	bl	800641c <_Balloc>
 800652e:	4605      	mov	r5, r0
 8006530:	b928      	cbnz	r0, 800653e <__multadd+0x5e>
 8006532:	4602      	mov	r2, r0
 8006534:	21b5      	movs	r1, #181	; 0xb5
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <__multadd+0x8c>)
 8006538:	480d      	ldr	r0, [pc, #52]	; (8006570 <__multadd+0x90>)
 800653a:	f000 fec1 	bl	80072c0 <__assert_func>
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	f104 010c 	add.w	r1, r4, #12
 8006544:	3202      	adds	r2, #2
 8006546:	0092      	lsls	r2, r2, #2
 8006548:	300c      	adds	r0, #12
 800654a:	f7ff ff59 	bl	8006400 <memcpy>
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ffa3 	bl	800649c <_Bfree>
 8006556:	462c      	mov	r4, r5
 8006558:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800655c:	3601      	adds	r6, #1
 800655e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006562:	6126      	str	r6, [r4, #16]
 8006564:	4620      	mov	r0, r4
 8006566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656a:	bf00      	nop
 800656c:	0800760b 	.word	0x0800760b
 8006570:	080076fc 	.word	0x080076fc

08006574 <__s2b>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4615      	mov	r5, r2
 800657a:	2209      	movs	r2, #9
 800657c:	461f      	mov	r7, r3
 800657e:	3308      	adds	r3, #8
 8006580:	460c      	mov	r4, r1
 8006582:	fb93 f3f2 	sdiv	r3, r3, r2
 8006586:	4606      	mov	r6, r0
 8006588:	2201      	movs	r2, #1
 800658a:	2100      	movs	r1, #0
 800658c:	429a      	cmp	r2, r3
 800658e:	db09      	blt.n	80065a4 <__s2b+0x30>
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff ff43 	bl	800641c <_Balloc>
 8006596:	b940      	cbnz	r0, 80065aa <__s2b+0x36>
 8006598:	4602      	mov	r2, r0
 800659a:	21ce      	movs	r1, #206	; 0xce
 800659c:	4b18      	ldr	r3, [pc, #96]	; (8006600 <__s2b+0x8c>)
 800659e:	4819      	ldr	r0, [pc, #100]	; (8006604 <__s2b+0x90>)
 80065a0:	f000 fe8e 	bl	80072c0 <__assert_func>
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	3101      	adds	r1, #1
 80065a8:	e7f0      	b.n	800658c <__s2b+0x18>
 80065aa:	9b08      	ldr	r3, [sp, #32]
 80065ac:	2d09      	cmp	r5, #9
 80065ae:	6143      	str	r3, [r0, #20]
 80065b0:	f04f 0301 	mov.w	r3, #1
 80065b4:	6103      	str	r3, [r0, #16]
 80065b6:	dd16      	ble.n	80065e6 <__s2b+0x72>
 80065b8:	f104 0909 	add.w	r9, r4, #9
 80065bc:	46c8      	mov	r8, r9
 80065be:	442c      	add	r4, r5
 80065c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065c4:	4601      	mov	r1, r0
 80065c6:	220a      	movs	r2, #10
 80065c8:	4630      	mov	r0, r6
 80065ca:	3b30      	subs	r3, #48	; 0x30
 80065cc:	f7ff ff88 	bl	80064e0 <__multadd>
 80065d0:	45a0      	cmp	r8, r4
 80065d2:	d1f5      	bne.n	80065c0 <__s2b+0x4c>
 80065d4:	f1a5 0408 	sub.w	r4, r5, #8
 80065d8:	444c      	add	r4, r9
 80065da:	1b2d      	subs	r5, r5, r4
 80065dc:	1963      	adds	r3, r4, r5
 80065de:	42bb      	cmp	r3, r7
 80065e0:	db04      	blt.n	80065ec <__s2b+0x78>
 80065e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e6:	2509      	movs	r5, #9
 80065e8:	340a      	adds	r4, #10
 80065ea:	e7f6      	b.n	80065da <__s2b+0x66>
 80065ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065f0:	4601      	mov	r1, r0
 80065f2:	220a      	movs	r2, #10
 80065f4:	4630      	mov	r0, r6
 80065f6:	3b30      	subs	r3, #48	; 0x30
 80065f8:	f7ff ff72 	bl	80064e0 <__multadd>
 80065fc:	e7ee      	b.n	80065dc <__s2b+0x68>
 80065fe:	bf00      	nop
 8006600:	0800760b 	.word	0x0800760b
 8006604:	080076fc 	.word	0x080076fc

08006608 <__hi0bits>:
 8006608:	0c02      	lsrs	r2, r0, #16
 800660a:	0412      	lsls	r2, r2, #16
 800660c:	4603      	mov	r3, r0
 800660e:	b9ca      	cbnz	r2, 8006644 <__hi0bits+0x3c>
 8006610:	0403      	lsls	r3, r0, #16
 8006612:	2010      	movs	r0, #16
 8006614:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006618:	bf04      	itt	eq
 800661a:	021b      	lsleq	r3, r3, #8
 800661c:	3008      	addeq	r0, #8
 800661e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006622:	bf04      	itt	eq
 8006624:	011b      	lsleq	r3, r3, #4
 8006626:	3004      	addeq	r0, #4
 8006628:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800662c:	bf04      	itt	eq
 800662e:	009b      	lsleq	r3, r3, #2
 8006630:	3002      	addeq	r0, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	db05      	blt.n	8006642 <__hi0bits+0x3a>
 8006636:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800663a:	f100 0001 	add.w	r0, r0, #1
 800663e:	bf08      	it	eq
 8006640:	2020      	moveq	r0, #32
 8006642:	4770      	bx	lr
 8006644:	2000      	movs	r0, #0
 8006646:	e7e5      	b.n	8006614 <__hi0bits+0xc>

08006648 <__lo0bits>:
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	4602      	mov	r2, r0
 800664c:	f013 0007 	ands.w	r0, r3, #7
 8006650:	d00b      	beq.n	800666a <__lo0bits+0x22>
 8006652:	07d9      	lsls	r1, r3, #31
 8006654:	d422      	bmi.n	800669c <__lo0bits+0x54>
 8006656:	0798      	lsls	r0, r3, #30
 8006658:	bf49      	itett	mi
 800665a:	085b      	lsrmi	r3, r3, #1
 800665c:	089b      	lsrpl	r3, r3, #2
 800665e:	2001      	movmi	r0, #1
 8006660:	6013      	strmi	r3, [r2, #0]
 8006662:	bf5c      	itt	pl
 8006664:	2002      	movpl	r0, #2
 8006666:	6013      	strpl	r3, [r2, #0]
 8006668:	4770      	bx	lr
 800666a:	b299      	uxth	r1, r3
 800666c:	b909      	cbnz	r1, 8006672 <__lo0bits+0x2a>
 800666e:	2010      	movs	r0, #16
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006676:	bf04      	itt	eq
 8006678:	0a1b      	lsreq	r3, r3, #8
 800667a:	3008      	addeq	r0, #8
 800667c:	0719      	lsls	r1, r3, #28
 800667e:	bf04      	itt	eq
 8006680:	091b      	lsreq	r3, r3, #4
 8006682:	3004      	addeq	r0, #4
 8006684:	0799      	lsls	r1, r3, #30
 8006686:	bf04      	itt	eq
 8006688:	089b      	lsreq	r3, r3, #2
 800668a:	3002      	addeq	r0, #2
 800668c:	07d9      	lsls	r1, r3, #31
 800668e:	d403      	bmi.n	8006698 <__lo0bits+0x50>
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	f100 0001 	add.w	r0, r0, #1
 8006696:	d003      	beq.n	80066a0 <__lo0bits+0x58>
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4770      	bx	lr
 800669c:	2000      	movs	r0, #0
 800669e:	4770      	bx	lr
 80066a0:	2020      	movs	r0, #32
 80066a2:	4770      	bx	lr

080066a4 <__i2b>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	2101      	movs	r1, #1
 80066aa:	f7ff feb7 	bl	800641c <_Balloc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	b928      	cbnz	r0, 80066be <__i2b+0x1a>
 80066b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066b6:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <__i2b+0x24>)
 80066b8:	4804      	ldr	r0, [pc, #16]	; (80066cc <__i2b+0x28>)
 80066ba:	f000 fe01 	bl	80072c0 <__assert_func>
 80066be:	2301      	movs	r3, #1
 80066c0:	6144      	str	r4, [r0, #20]
 80066c2:	6103      	str	r3, [r0, #16]
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	bf00      	nop
 80066c8:	0800760b 	.word	0x0800760b
 80066cc:	080076fc 	.word	0x080076fc

080066d0 <__multiply>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	4614      	mov	r4, r2
 80066d6:	690a      	ldr	r2, [r1, #16]
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	460d      	mov	r5, r1
 80066dc:	429a      	cmp	r2, r3
 80066de:	bfbe      	ittt	lt
 80066e0:	460b      	movlt	r3, r1
 80066e2:	4625      	movlt	r5, r4
 80066e4:	461c      	movlt	r4, r3
 80066e6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80066ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80066ee:	68ab      	ldr	r3, [r5, #8]
 80066f0:	6869      	ldr	r1, [r5, #4]
 80066f2:	eb0a 0709 	add.w	r7, sl, r9
 80066f6:	42bb      	cmp	r3, r7
 80066f8:	b085      	sub	sp, #20
 80066fa:	bfb8      	it	lt
 80066fc:	3101      	addlt	r1, #1
 80066fe:	f7ff fe8d 	bl	800641c <_Balloc>
 8006702:	b930      	cbnz	r0, 8006712 <__multiply+0x42>
 8006704:	4602      	mov	r2, r0
 8006706:	f240 115d 	movw	r1, #349	; 0x15d
 800670a:	4b41      	ldr	r3, [pc, #260]	; (8006810 <__multiply+0x140>)
 800670c:	4841      	ldr	r0, [pc, #260]	; (8006814 <__multiply+0x144>)
 800670e:	f000 fdd7 	bl	80072c0 <__assert_func>
 8006712:	f100 0614 	add.w	r6, r0, #20
 8006716:	4633      	mov	r3, r6
 8006718:	2200      	movs	r2, #0
 800671a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800671e:	4543      	cmp	r3, r8
 8006720:	d31e      	bcc.n	8006760 <__multiply+0x90>
 8006722:	f105 0c14 	add.w	ip, r5, #20
 8006726:	f104 0314 	add.w	r3, r4, #20
 800672a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800672e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	ebac 0205 	sub.w	r2, ip, r5
 8006738:	3a15      	subs	r2, #21
 800673a:	f022 0203 	bic.w	r2, r2, #3
 800673e:	3204      	adds	r2, #4
 8006740:	f105 0115 	add.w	r1, r5, #21
 8006744:	458c      	cmp	ip, r1
 8006746:	bf38      	it	cc
 8006748:	2204      	movcc	r2, #4
 800674a:	9201      	str	r2, [sp, #4]
 800674c:	9a02      	ldr	r2, [sp, #8]
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d808      	bhi.n	8006766 <__multiply+0x96>
 8006754:	2f00      	cmp	r7, #0
 8006756:	dc55      	bgt.n	8006804 <__multiply+0x134>
 8006758:	6107      	str	r7, [r0, #16]
 800675a:	b005      	add	sp, #20
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	f843 2b04 	str.w	r2, [r3], #4
 8006764:	e7db      	b.n	800671e <__multiply+0x4e>
 8006766:	f8b3 a000 	ldrh.w	sl, [r3]
 800676a:	f1ba 0f00 	cmp.w	sl, #0
 800676e:	d020      	beq.n	80067b2 <__multiply+0xe2>
 8006770:	46b1      	mov	r9, r6
 8006772:	2200      	movs	r2, #0
 8006774:	f105 0e14 	add.w	lr, r5, #20
 8006778:	f85e 4b04 	ldr.w	r4, [lr], #4
 800677c:	f8d9 b000 	ldr.w	fp, [r9]
 8006780:	b2a1      	uxth	r1, r4
 8006782:	fa1f fb8b 	uxth.w	fp, fp
 8006786:	fb0a b101 	mla	r1, sl, r1, fp
 800678a:	4411      	add	r1, r2
 800678c:	f8d9 2000 	ldr.w	r2, [r9]
 8006790:	0c24      	lsrs	r4, r4, #16
 8006792:	0c12      	lsrs	r2, r2, #16
 8006794:	fb0a 2404 	mla	r4, sl, r4, r2
 8006798:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800679c:	b289      	uxth	r1, r1
 800679e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80067a2:	45f4      	cmp	ip, lr
 80067a4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80067a8:	f849 1b04 	str.w	r1, [r9], #4
 80067ac:	d8e4      	bhi.n	8006778 <__multiply+0xa8>
 80067ae:	9901      	ldr	r1, [sp, #4]
 80067b0:	5072      	str	r2, [r6, r1]
 80067b2:	9a03      	ldr	r2, [sp, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	d01f      	beq.n	8006800 <__multiply+0x130>
 80067c0:	46b6      	mov	lr, r6
 80067c2:	f04f 0a00 	mov.w	sl, #0
 80067c6:	6834      	ldr	r4, [r6, #0]
 80067c8:	f105 0114 	add.w	r1, r5, #20
 80067cc:	880a      	ldrh	r2, [r1, #0]
 80067ce:	f8be b002 	ldrh.w	fp, [lr, #2]
 80067d2:	b2a4      	uxth	r4, r4
 80067d4:	fb09 b202 	mla	r2, r9, r2, fp
 80067d8:	4492      	add	sl, r2
 80067da:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80067de:	f84e 4b04 	str.w	r4, [lr], #4
 80067e2:	f851 4b04 	ldr.w	r4, [r1], #4
 80067e6:	f8be 2000 	ldrh.w	r2, [lr]
 80067ea:	0c24      	lsrs	r4, r4, #16
 80067ec:	fb09 2404 	mla	r4, r9, r4, r2
 80067f0:	458c      	cmp	ip, r1
 80067f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80067f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067fa:	d8e7      	bhi.n	80067cc <__multiply+0xfc>
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	50b4      	str	r4, [r6, r2]
 8006800:	3604      	adds	r6, #4
 8006802:	e7a3      	b.n	800674c <__multiply+0x7c>
 8006804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1a5      	bne.n	8006758 <__multiply+0x88>
 800680c:	3f01      	subs	r7, #1
 800680e:	e7a1      	b.n	8006754 <__multiply+0x84>
 8006810:	0800760b 	.word	0x0800760b
 8006814:	080076fc 	.word	0x080076fc

08006818 <__pow5mult>:
 8006818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800681c:	4615      	mov	r5, r2
 800681e:	f012 0203 	ands.w	r2, r2, #3
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	d007      	beq.n	8006838 <__pow5mult+0x20>
 8006828:	4c25      	ldr	r4, [pc, #148]	; (80068c0 <__pow5mult+0xa8>)
 800682a:	3a01      	subs	r2, #1
 800682c:	2300      	movs	r3, #0
 800682e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006832:	f7ff fe55 	bl	80064e0 <__multadd>
 8006836:	4607      	mov	r7, r0
 8006838:	10ad      	asrs	r5, r5, #2
 800683a:	d03d      	beq.n	80068b8 <__pow5mult+0xa0>
 800683c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800683e:	b97c      	cbnz	r4, 8006860 <__pow5mult+0x48>
 8006840:	2010      	movs	r0, #16
 8006842:	f7ff fdb5 	bl	80063b0 <malloc>
 8006846:	4602      	mov	r2, r0
 8006848:	6270      	str	r0, [r6, #36]	; 0x24
 800684a:	b928      	cbnz	r0, 8006858 <__pow5mult+0x40>
 800684c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006850:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <__pow5mult+0xac>)
 8006852:	481d      	ldr	r0, [pc, #116]	; (80068c8 <__pow5mult+0xb0>)
 8006854:	f000 fd34 	bl	80072c0 <__assert_func>
 8006858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800685c:	6004      	str	r4, [r0, #0]
 800685e:	60c4      	str	r4, [r0, #12]
 8006860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006868:	b94c      	cbnz	r4, 800687e <__pow5mult+0x66>
 800686a:	f240 2171 	movw	r1, #625	; 0x271
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff ff18 	bl	80066a4 <__i2b>
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	f8c8 0008 	str.w	r0, [r8, #8]
 800687c:	6003      	str	r3, [r0, #0]
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	07eb      	lsls	r3, r5, #31
 8006884:	d50a      	bpl.n	800689c <__pow5mult+0x84>
 8006886:	4639      	mov	r1, r7
 8006888:	4622      	mov	r2, r4
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff ff20 	bl	80066d0 <__multiply>
 8006890:	4680      	mov	r8, r0
 8006892:	4639      	mov	r1, r7
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff fe01 	bl	800649c <_Bfree>
 800689a:	4647      	mov	r7, r8
 800689c:	106d      	asrs	r5, r5, #1
 800689e:	d00b      	beq.n	80068b8 <__pow5mult+0xa0>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	b938      	cbnz	r0, 80068b4 <__pow5mult+0x9c>
 80068a4:	4622      	mov	r2, r4
 80068a6:	4621      	mov	r1, r4
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ff11 	bl	80066d0 <__multiply>
 80068ae:	6020      	str	r0, [r4, #0]
 80068b0:	f8c0 9000 	str.w	r9, [r0]
 80068b4:	4604      	mov	r4, r0
 80068b6:	e7e4      	b.n	8006882 <__pow5mult+0x6a>
 80068b8:	4638      	mov	r0, r7
 80068ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068be:	bf00      	nop
 80068c0:	08007850 	.word	0x08007850
 80068c4:	08007595 	.word	0x08007595
 80068c8:	080076fc 	.word	0x080076fc

080068cc <__lshift>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	460c      	mov	r4, r1
 80068d2:	4607      	mov	r7, r0
 80068d4:	4691      	mov	r9, r2
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	6849      	ldr	r1, [r1, #4]
 80068da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068e4:	f108 0601 	add.w	r6, r8, #1
 80068e8:	42b3      	cmp	r3, r6
 80068ea:	db0b      	blt.n	8006904 <__lshift+0x38>
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff fd95 	bl	800641c <_Balloc>
 80068f2:	4605      	mov	r5, r0
 80068f4:	b948      	cbnz	r0, 800690a <__lshift+0x3e>
 80068f6:	4602      	mov	r2, r0
 80068f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068fc:	4b27      	ldr	r3, [pc, #156]	; (800699c <__lshift+0xd0>)
 80068fe:	4828      	ldr	r0, [pc, #160]	; (80069a0 <__lshift+0xd4>)
 8006900:	f000 fcde 	bl	80072c0 <__assert_func>
 8006904:	3101      	adds	r1, #1
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	e7ee      	b.n	80068e8 <__lshift+0x1c>
 800690a:	2300      	movs	r3, #0
 800690c:	f100 0114 	add.w	r1, r0, #20
 8006910:	f100 0210 	add.w	r2, r0, #16
 8006914:	4618      	mov	r0, r3
 8006916:	4553      	cmp	r3, sl
 8006918:	db33      	blt.n	8006982 <__lshift+0xb6>
 800691a:	6920      	ldr	r0, [r4, #16]
 800691c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006920:	f104 0314 	add.w	r3, r4, #20
 8006924:	f019 091f 	ands.w	r9, r9, #31
 8006928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800692c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006930:	d02b      	beq.n	800698a <__lshift+0xbe>
 8006932:	468a      	mov	sl, r1
 8006934:	2200      	movs	r2, #0
 8006936:	f1c9 0e20 	rsb	lr, r9, #32
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	fa00 f009 	lsl.w	r0, r0, r9
 8006940:	4302      	orrs	r2, r0
 8006942:	f84a 2b04 	str.w	r2, [sl], #4
 8006946:	f853 2b04 	ldr.w	r2, [r3], #4
 800694a:	459c      	cmp	ip, r3
 800694c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006950:	d8f3      	bhi.n	800693a <__lshift+0x6e>
 8006952:	ebac 0304 	sub.w	r3, ip, r4
 8006956:	3b15      	subs	r3, #21
 8006958:	f023 0303 	bic.w	r3, r3, #3
 800695c:	3304      	adds	r3, #4
 800695e:	f104 0015 	add.w	r0, r4, #21
 8006962:	4584      	cmp	ip, r0
 8006964:	bf38      	it	cc
 8006966:	2304      	movcc	r3, #4
 8006968:	50ca      	str	r2, [r1, r3]
 800696a:	b10a      	cbz	r2, 8006970 <__lshift+0xa4>
 800696c:	f108 0602 	add.w	r6, r8, #2
 8006970:	3e01      	subs	r6, #1
 8006972:	4638      	mov	r0, r7
 8006974:	4621      	mov	r1, r4
 8006976:	612e      	str	r6, [r5, #16]
 8006978:	f7ff fd90 	bl	800649c <_Bfree>
 800697c:	4628      	mov	r0, r5
 800697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006982:	f842 0f04 	str.w	r0, [r2, #4]!
 8006986:	3301      	adds	r3, #1
 8006988:	e7c5      	b.n	8006916 <__lshift+0x4a>
 800698a:	3904      	subs	r1, #4
 800698c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006990:	459c      	cmp	ip, r3
 8006992:	f841 2f04 	str.w	r2, [r1, #4]!
 8006996:	d8f9      	bhi.n	800698c <__lshift+0xc0>
 8006998:	e7ea      	b.n	8006970 <__lshift+0xa4>
 800699a:	bf00      	nop
 800699c:	0800760b 	.word	0x0800760b
 80069a0:	080076fc 	.word	0x080076fc

080069a4 <__mcmp>:
 80069a4:	4603      	mov	r3, r0
 80069a6:	690a      	ldr	r2, [r1, #16]
 80069a8:	6900      	ldr	r0, [r0, #16]
 80069aa:	b530      	push	{r4, r5, lr}
 80069ac:	1a80      	subs	r0, r0, r2
 80069ae:	d10d      	bne.n	80069cc <__mcmp+0x28>
 80069b0:	3314      	adds	r3, #20
 80069b2:	3114      	adds	r1, #20
 80069b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069c4:	4295      	cmp	r5, r2
 80069c6:	d002      	beq.n	80069ce <__mcmp+0x2a>
 80069c8:	d304      	bcc.n	80069d4 <__mcmp+0x30>
 80069ca:	2001      	movs	r0, #1
 80069cc:	bd30      	pop	{r4, r5, pc}
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	d3f4      	bcc.n	80069bc <__mcmp+0x18>
 80069d2:	e7fb      	b.n	80069cc <__mcmp+0x28>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	e7f8      	b.n	80069cc <__mcmp+0x28>
	...

080069dc <__mdiff>:
 80069dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	4606      	mov	r6, r0
 80069e4:	4611      	mov	r1, r2
 80069e6:	4620      	mov	r0, r4
 80069e8:	4692      	mov	sl, r2
 80069ea:	f7ff ffdb 	bl	80069a4 <__mcmp>
 80069ee:	1e05      	subs	r5, r0, #0
 80069f0:	d111      	bne.n	8006a16 <__mdiff+0x3a>
 80069f2:	4629      	mov	r1, r5
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff fd11 	bl	800641c <_Balloc>
 80069fa:	4602      	mov	r2, r0
 80069fc:	b928      	cbnz	r0, 8006a0a <__mdiff+0x2e>
 80069fe:	f240 2132 	movw	r1, #562	; 0x232
 8006a02:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <__mdiff+0x118>)
 8006a04:	483c      	ldr	r0, [pc, #240]	; (8006af8 <__mdiff+0x11c>)
 8006a06:	f000 fc5b 	bl	80072c0 <__assert_func>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a10:	4610      	mov	r0, r2
 8006a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	bfa4      	itt	ge
 8006a18:	4653      	movge	r3, sl
 8006a1a:	46a2      	movge	sl, r4
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006a22:	bfa6      	itte	ge
 8006a24:	461c      	movge	r4, r3
 8006a26:	2500      	movge	r5, #0
 8006a28:	2501      	movlt	r5, #1
 8006a2a:	f7ff fcf7 	bl	800641c <_Balloc>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	b918      	cbnz	r0, 8006a3a <__mdiff+0x5e>
 8006a32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <__mdiff+0x118>)
 8006a38:	e7e4      	b.n	8006a04 <__mdiff+0x28>
 8006a3a:	f100 0814 	add.w	r8, r0, #20
 8006a3e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006a42:	60c5      	str	r5, [r0, #12]
 8006a44:	f04f 0c00 	mov.w	ip, #0
 8006a48:	f10a 0514 	add.w	r5, sl, #20
 8006a4c:	f10a 0010 	add.w	r0, sl, #16
 8006a50:	46c2      	mov	sl, r8
 8006a52:	6926      	ldr	r6, [r4, #16]
 8006a54:	f104 0914 	add.w	r9, r4, #20
 8006a58:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006a5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a60:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006a64:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a68:	fa1f f18b 	uxth.w	r1, fp
 8006a6c:	4461      	add	r1, ip
 8006a6e:	fa1f fc83 	uxth.w	ip, r3
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	eba1 010c 	sub.w	r1, r1, ip
 8006a78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a7c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a80:	b289      	uxth	r1, r1
 8006a82:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006a86:	454e      	cmp	r6, r9
 8006a88:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a8c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a90:	d8e6      	bhi.n	8006a60 <__mdiff+0x84>
 8006a92:	1b33      	subs	r3, r6, r4
 8006a94:	3b15      	subs	r3, #21
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	3415      	adds	r4, #21
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	bf38      	it	cc
 8006aa2:	2304      	movcc	r3, #4
 8006aa4:	441d      	add	r5, r3
 8006aa6:	4443      	add	r3, r8
 8006aa8:	461e      	mov	r6, r3
 8006aaa:	462c      	mov	r4, r5
 8006aac:	4574      	cmp	r4, lr
 8006aae:	d30e      	bcc.n	8006ace <__mdiff+0xf2>
 8006ab0:	f10e 0103 	add.w	r1, lr, #3
 8006ab4:	1b49      	subs	r1, r1, r5
 8006ab6:	f021 0103 	bic.w	r1, r1, #3
 8006aba:	3d03      	subs	r5, #3
 8006abc:	45ae      	cmp	lr, r5
 8006abe:	bf38      	it	cc
 8006ac0:	2100      	movcc	r1, #0
 8006ac2:	4419      	add	r1, r3
 8006ac4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ac8:	b18b      	cbz	r3, 8006aee <__mdiff+0x112>
 8006aca:	6117      	str	r7, [r2, #16]
 8006acc:	e7a0      	b.n	8006a10 <__mdiff+0x34>
 8006ace:	f854 8b04 	ldr.w	r8, [r4], #4
 8006ad2:	fa1f f188 	uxth.w	r1, r8
 8006ad6:	4461      	add	r1, ip
 8006ad8:	1408      	asrs	r0, r1, #16
 8006ada:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006ade:	b289      	uxth	r1, r1
 8006ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ae4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ae8:	f846 1b04 	str.w	r1, [r6], #4
 8006aec:	e7de      	b.n	8006aac <__mdiff+0xd0>
 8006aee:	3f01      	subs	r7, #1
 8006af0:	e7e8      	b.n	8006ac4 <__mdiff+0xe8>
 8006af2:	bf00      	nop
 8006af4:	0800760b 	.word	0x0800760b
 8006af8:	080076fc 	.word	0x080076fc

08006afc <__ulp>:
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <__ulp+0x48>)
 8006afe:	400b      	ands	r3, r1
 8006b00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dd02      	ble.n	8006b0e <__ulp+0x12>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4770      	bx	lr
 8006b0e:	425b      	negs	r3, r3
 8006b10:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f04f 0100 	mov.w	r1, #0
 8006b1c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b20:	da04      	bge.n	8006b2c <__ulp+0x30>
 8006b22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b26:	fa43 f102 	asr.w	r1, r3, r2
 8006b2a:	4770      	bx	lr
 8006b2c:	f1a2 0314 	sub.w	r3, r2, #20
 8006b30:	2b1e      	cmp	r3, #30
 8006b32:	bfd6      	itet	le
 8006b34:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006b38:	2301      	movgt	r3, #1
 8006b3a:	fa22 f303 	lsrle.w	r3, r2, r3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	7ff00000 	.word	0x7ff00000

08006b48 <__b2d>:
 8006b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	6907      	ldr	r7, [r0, #16]
 8006b4e:	f100 0914 	add.w	r9, r0, #20
 8006b52:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006b56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006b5a:	f1a7 0804 	sub.w	r8, r7, #4
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff fd52 	bl	8006608 <__hi0bits>
 8006b64:	f1c0 0320 	rsb	r3, r0, #32
 8006b68:	280a      	cmp	r0, #10
 8006b6a:	600b      	str	r3, [r1, #0]
 8006b6c:	491f      	ldr	r1, [pc, #124]	; (8006bec <__b2d+0xa4>)
 8006b6e:	dc17      	bgt.n	8006ba0 <__b2d+0x58>
 8006b70:	45c1      	cmp	r9, r8
 8006b72:	bf28      	it	cs
 8006b74:	2200      	movcs	r2, #0
 8006b76:	f1c0 0c0b 	rsb	ip, r0, #11
 8006b7a:	fa26 f30c 	lsr.w	r3, r6, ip
 8006b7e:	bf38      	it	cc
 8006b80:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006b84:	ea43 0501 	orr.w	r5, r3, r1
 8006b88:	f100 0315 	add.w	r3, r0, #21
 8006b8c:	fa06 f303 	lsl.w	r3, r6, r3
 8006b90:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b94:	ea43 0402 	orr.w	r4, r3, r2
 8006b98:	4620      	mov	r0, r4
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba0:	45c1      	cmp	r9, r8
 8006ba2:	bf2e      	itee	cs
 8006ba4:	2200      	movcs	r2, #0
 8006ba6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006baa:	f1a7 0808 	subcc.w	r8, r7, #8
 8006bae:	f1b0 030b 	subs.w	r3, r0, #11
 8006bb2:	d016      	beq.n	8006be2 <__b2d+0x9a>
 8006bb4:	f1c3 0720 	rsb	r7, r3, #32
 8006bb8:	fa22 f107 	lsr.w	r1, r2, r7
 8006bbc:	45c8      	cmp	r8, r9
 8006bbe:	fa06 f603 	lsl.w	r6, r6, r3
 8006bc2:	ea46 0601 	orr.w	r6, r6, r1
 8006bc6:	bf94      	ite	ls
 8006bc8:	2100      	movls	r1, #0
 8006bca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006bce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006bd2:	fa02 f003 	lsl.w	r0, r2, r3
 8006bd6:	40f9      	lsrs	r1, r7
 8006bd8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006bdc:	ea40 0401 	orr.w	r4, r0, r1
 8006be0:	e7da      	b.n	8006b98 <__b2d+0x50>
 8006be2:	4614      	mov	r4, r2
 8006be4:	ea46 0501 	orr.w	r5, r6, r1
 8006be8:	e7d6      	b.n	8006b98 <__b2d+0x50>
 8006bea:	bf00      	nop
 8006bec:	3ff00000 	.word	0x3ff00000

08006bf0 <__d2b>:
 8006bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006bfa:	4690      	mov	r8, r2
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	f7ff fc0d 	bl	800641c <_Balloc>
 8006c02:	4604      	mov	r4, r0
 8006c04:	b930      	cbnz	r0, 8006c14 <__d2b+0x24>
 8006c06:	4602      	mov	r2, r0
 8006c08:	f240 310a 	movw	r1, #778	; 0x30a
 8006c0c:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <__d2b+0xb0>)
 8006c0e:	4825      	ldr	r0, [pc, #148]	; (8006ca4 <__d2b+0xb4>)
 8006c10:	f000 fb56 	bl	80072c0 <__assert_func>
 8006c14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c1c:	bb2d      	cbnz	r5, 8006c6a <__d2b+0x7a>
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f1b8 0300 	subs.w	r3, r8, #0
 8006c24:	d026      	beq.n	8006c74 <__d2b+0x84>
 8006c26:	4668      	mov	r0, sp
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f7ff fd0d 	bl	8006648 <__lo0bits>
 8006c2e:	9900      	ldr	r1, [sp, #0]
 8006c30:	b1f0      	cbz	r0, 8006c70 <__d2b+0x80>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	f1c0 0320 	rsb	r3, r0, #32
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	40c2      	lsrs	r2, r0
 8006c40:	6163      	str	r3, [r4, #20]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2102      	movne	r1, #2
 8006c4c:	2101      	moveq	r1, #1
 8006c4e:	61a3      	str	r3, [r4, #24]
 8006c50:	6121      	str	r1, [r4, #16]
 8006c52:	b1c5      	cbz	r5, 8006c86 <__d2b+0x96>
 8006c54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c58:	4405      	add	r5, r0
 8006c5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c5e:	603d      	str	r5, [r7, #0]
 8006c60:	6030      	str	r0, [r6, #0]
 8006c62:	4620      	mov	r0, r4
 8006c64:	b002      	add	sp, #8
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c6e:	e7d6      	b.n	8006c1e <__d2b+0x2e>
 8006c70:	6161      	str	r1, [r4, #20]
 8006c72:	e7e7      	b.n	8006c44 <__d2b+0x54>
 8006c74:	a801      	add	r0, sp, #4
 8006c76:	f7ff fce7 	bl	8006648 <__lo0bits>
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	6121      	str	r1, [r4, #16]
 8006c80:	6163      	str	r3, [r4, #20]
 8006c82:	3020      	adds	r0, #32
 8006c84:	e7e5      	b.n	8006c52 <__d2b+0x62>
 8006c86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006c8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c8e:	6038      	str	r0, [r7, #0]
 8006c90:	6918      	ldr	r0, [r3, #16]
 8006c92:	f7ff fcb9 	bl	8006608 <__hi0bits>
 8006c96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006c9a:	6031      	str	r1, [r6, #0]
 8006c9c:	e7e1      	b.n	8006c62 <__d2b+0x72>
 8006c9e:	bf00      	nop
 8006ca0:	0800760b 	.word	0x0800760b
 8006ca4:	080076fc 	.word	0x080076fc

08006ca8 <__ratio>:
 8006ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	4688      	mov	r8, r1
 8006cae:	4669      	mov	r1, sp
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	f7ff ff49 	bl	8006b48 <__b2d>
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4604      	mov	r4, r0
 8006cba:	460d      	mov	r5, r1
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	a901      	add	r1, sp, #4
 8006cc0:	f7ff ff42 	bl	8006b48 <__b2d>
 8006cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cc8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006ccc:	468b      	mov	fp, r1
 8006cce:	eba3 0c02 	sub.w	ip, r3, r2
 8006cd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfd5      	itete	le
 8006ce0:	460a      	movle	r2, r1
 8006ce2:	462a      	movgt	r2, r5
 8006ce4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006ce8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006cec:	bfd8      	it	le
 8006cee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7f9 fd17 	bl	800072c <__aeabi_ddiv>
 8006cfe:	b003      	add	sp, #12
 8006d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d04 <__copybits>:
 8006d04:	3901      	subs	r1, #1
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	1149      	asrs	r1, r1, #5
 8006d0a:	6914      	ldr	r4, [r2, #16]
 8006d0c:	3101      	adds	r1, #1
 8006d0e:	f102 0314 	add.w	r3, r2, #20
 8006d12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d1a:	1f05      	subs	r5, r0, #4
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d30c      	bcc.n	8006d3a <__copybits+0x36>
 8006d20:	1aa3      	subs	r3, r4, r2
 8006d22:	3b11      	subs	r3, #17
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	3211      	adds	r2, #17
 8006d2a:	42a2      	cmp	r2, r4
 8006d2c:	bf88      	it	hi
 8006d2e:	2300      	movhi	r3, #0
 8006d30:	4418      	add	r0, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	4288      	cmp	r0, r1
 8006d36:	d305      	bcc.n	8006d44 <__copybits+0x40>
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d42:	e7eb      	b.n	8006d1c <__copybits+0x18>
 8006d44:	f840 3b04 	str.w	r3, [r0], #4
 8006d48:	e7f4      	b.n	8006d34 <__copybits+0x30>

08006d4a <__any_on>:
 8006d4a:	f100 0214 	add.w	r2, r0, #20
 8006d4e:	6900      	ldr	r0, [r0, #16]
 8006d50:	114b      	asrs	r3, r1, #5
 8006d52:	4298      	cmp	r0, r3
 8006d54:	b510      	push	{r4, lr}
 8006d56:	db11      	blt.n	8006d7c <__any_on+0x32>
 8006d58:	dd0a      	ble.n	8006d70 <__any_on+0x26>
 8006d5a:	f011 011f 	ands.w	r1, r1, #31
 8006d5e:	d007      	beq.n	8006d70 <__any_on+0x26>
 8006d60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d64:	fa24 f001 	lsr.w	r0, r4, r1
 8006d68:	fa00 f101 	lsl.w	r1, r0, r1
 8006d6c:	428c      	cmp	r4, r1
 8006d6e:	d10b      	bne.n	8006d88 <__any_on+0x3e>
 8006d70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d803      	bhi.n	8006d80 <__any_on+0x36>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	bd10      	pop	{r4, pc}
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	e7f7      	b.n	8006d70 <__any_on+0x26>
 8006d80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d0f5      	beq.n	8006d74 <__any_on+0x2a>
 8006d88:	2001      	movs	r0, #1
 8006d8a:	e7f6      	b.n	8006d7a <__any_on+0x30>

08006d8c <_calloc_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	fb02 f501 	mul.w	r5, r2, r1
 8006d92:	4629      	mov	r1, r5
 8006d94:	f000 f854 	bl	8006e40 <_malloc_r>
 8006d98:	4604      	mov	r4, r0
 8006d9a:	b118      	cbz	r0, 8006da4 <_calloc_r+0x18>
 8006d9c:	462a      	mov	r2, r5
 8006d9e:	2100      	movs	r1, #0
 8006da0:	f7fc fae2 	bl	8003368 <memset>
 8006da4:	4620      	mov	r0, r4
 8006da6:	bd38      	pop	{r3, r4, r5, pc}

08006da8 <_free_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4605      	mov	r5, r0
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d043      	beq.n	8006e38 <_free_r+0x90>
 8006db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db4:	1f0c      	subs	r4, r1, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bfb8      	it	lt
 8006dba:	18e4      	addlt	r4, r4, r3
 8006dbc:	f000 faf4 	bl	80073a8 <__malloc_lock>
 8006dc0:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <_free_r+0x94>)
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	b933      	cbnz	r3, 8006dd6 <_free_r+0x2e>
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	6014      	str	r4, [r2, #0]
 8006dcc:	4628      	mov	r0, r5
 8006dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd2:	f000 baef 	b.w	80073b4 <__malloc_unlock>
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	d90a      	bls.n	8006df0 <_free_r+0x48>
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	1862      	adds	r2, r4, r1
 8006dde:	4293      	cmp	r3, r2
 8006de0:	bf01      	itttt	eq
 8006de2:	681a      	ldreq	r2, [r3, #0]
 8006de4:	685b      	ldreq	r3, [r3, #4]
 8006de6:	1852      	addeq	r2, r2, r1
 8006de8:	6022      	streq	r2, [r4, #0]
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	6004      	str	r4, [r0, #0]
 8006dee:	e7ed      	b.n	8006dcc <_free_r+0x24>
 8006df0:	461a      	mov	r2, r3
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	b10b      	cbz	r3, 8006dfa <_free_r+0x52>
 8006df6:	42a3      	cmp	r3, r4
 8006df8:	d9fa      	bls.n	8006df0 <_free_r+0x48>
 8006dfa:	6811      	ldr	r1, [r2, #0]
 8006dfc:	1850      	adds	r0, r2, r1
 8006dfe:	42a0      	cmp	r0, r4
 8006e00:	d10b      	bne.n	8006e1a <_free_r+0x72>
 8006e02:	6820      	ldr	r0, [r4, #0]
 8006e04:	4401      	add	r1, r0
 8006e06:	1850      	adds	r0, r2, r1
 8006e08:	4283      	cmp	r3, r0
 8006e0a:	6011      	str	r1, [r2, #0]
 8006e0c:	d1de      	bne.n	8006dcc <_free_r+0x24>
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4401      	add	r1, r0
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	6053      	str	r3, [r2, #4]
 8006e18:	e7d8      	b.n	8006dcc <_free_r+0x24>
 8006e1a:	d902      	bls.n	8006e22 <_free_r+0x7a>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	e7d4      	b.n	8006dcc <_free_r+0x24>
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	1821      	adds	r1, r4, r0
 8006e26:	428b      	cmp	r3, r1
 8006e28:	bf01      	itttt	eq
 8006e2a:	6819      	ldreq	r1, [r3, #0]
 8006e2c:	685b      	ldreq	r3, [r3, #4]
 8006e2e:	1809      	addeq	r1, r1, r0
 8006e30:	6021      	streq	r1, [r4, #0]
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	6054      	str	r4, [r2, #4]
 8006e36:	e7c9      	b.n	8006dcc <_free_r+0x24>
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
 8006e3a:	bf00      	nop
 8006e3c:	2000020c 	.word	0x2000020c

08006e40 <_malloc_r>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	1ccd      	adds	r5, r1, #3
 8006e44:	f025 0503 	bic.w	r5, r5, #3
 8006e48:	3508      	adds	r5, #8
 8006e4a:	2d0c      	cmp	r5, #12
 8006e4c:	bf38      	it	cc
 8006e4e:	250c      	movcc	r5, #12
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	4606      	mov	r6, r0
 8006e54:	db01      	blt.n	8006e5a <_malloc_r+0x1a>
 8006e56:	42a9      	cmp	r1, r5
 8006e58:	d903      	bls.n	8006e62 <_malloc_r+0x22>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	2000      	movs	r0, #0
 8006e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e62:	f000 faa1 	bl	80073a8 <__malloc_lock>
 8006e66:	4921      	ldr	r1, [pc, #132]	; (8006eec <_malloc_r+0xac>)
 8006e68:	680a      	ldr	r2, [r1, #0]
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	b99c      	cbnz	r4, 8006e96 <_malloc_r+0x56>
 8006e6e:	4f20      	ldr	r7, [pc, #128]	; (8006ef0 <_malloc_r+0xb0>)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	b923      	cbnz	r3, 8006e7e <_malloc_r+0x3e>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 f99a 	bl	80071b0 <_sbrk_r>
 8006e7c:	6038      	str	r0, [r7, #0]
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 f995 	bl	80071b0 <_sbrk_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	d123      	bne.n	8006ed2 <_malloc_r+0x92>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	6033      	str	r3, [r6, #0]
 8006e90:	f000 fa90 	bl	80073b4 <__malloc_unlock>
 8006e94:	e7e3      	b.n	8006e5e <_malloc_r+0x1e>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	1b5b      	subs	r3, r3, r5
 8006e9a:	d417      	bmi.n	8006ecc <_malloc_r+0x8c>
 8006e9c:	2b0b      	cmp	r3, #11
 8006e9e:	d903      	bls.n	8006ea8 <_malloc_r+0x68>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	441c      	add	r4, r3
 8006ea4:	6025      	str	r5, [r4, #0]
 8006ea6:	e004      	b.n	8006eb2 <_malloc_r+0x72>
 8006ea8:	6863      	ldr	r3, [r4, #4]
 8006eaa:	42a2      	cmp	r2, r4
 8006eac:	bf0c      	ite	eq
 8006eae:	600b      	streq	r3, [r1, #0]
 8006eb0:	6053      	strne	r3, [r2, #4]
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f000 fa7e 	bl	80073b4 <__malloc_unlock>
 8006eb8:	f104 000b 	add.w	r0, r4, #11
 8006ebc:	1d23      	adds	r3, r4, #4
 8006ebe:	f020 0007 	bic.w	r0, r0, #7
 8006ec2:	1ac2      	subs	r2, r0, r3
 8006ec4:	d0cc      	beq.n	8006e60 <_malloc_r+0x20>
 8006ec6:	1a1b      	subs	r3, r3, r0
 8006ec8:	50a3      	str	r3, [r4, r2]
 8006eca:	e7c9      	b.n	8006e60 <_malloc_r+0x20>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	6864      	ldr	r4, [r4, #4]
 8006ed0:	e7cc      	b.n	8006e6c <_malloc_r+0x2c>
 8006ed2:	1cc4      	adds	r4, r0, #3
 8006ed4:	f024 0403 	bic.w	r4, r4, #3
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d0e3      	beq.n	8006ea4 <_malloc_r+0x64>
 8006edc:	1a21      	subs	r1, r4, r0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f966 	bl	80071b0 <_sbrk_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d1dd      	bne.n	8006ea4 <_malloc_r+0x64>
 8006ee8:	e7cf      	b.n	8006e8a <_malloc_r+0x4a>
 8006eea:	bf00      	nop
 8006eec:	2000020c 	.word	0x2000020c
 8006ef0:	20000210 	.word	0x20000210

08006ef4 <__sfputc_r>:
 8006ef4:	6893      	ldr	r3, [r2, #8]
 8006ef6:	b410      	push	{r4}
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	6093      	str	r3, [r2, #8]
 8006efe:	da07      	bge.n	8006f10 <__sfputc_r+0x1c>
 8006f00:	6994      	ldr	r4, [r2, #24]
 8006f02:	42a3      	cmp	r3, r4
 8006f04:	db01      	blt.n	8006f0a <__sfputc_r+0x16>
 8006f06:	290a      	cmp	r1, #10
 8006f08:	d102      	bne.n	8006f10 <__sfputc_r+0x1c>
 8006f0a:	bc10      	pop	{r4}
 8006f0c:	f7fd bd8a 	b.w	8004a24 <__swbuf_r>
 8006f10:	6813      	ldr	r3, [r2, #0]
 8006f12:	1c58      	adds	r0, r3, #1
 8006f14:	6010      	str	r0, [r2, #0]
 8006f16:	7019      	strb	r1, [r3, #0]
 8006f18:	4608      	mov	r0, r1
 8006f1a:	bc10      	pop	{r4}
 8006f1c:	4770      	bx	lr

08006f1e <__sfputs_r>:
 8006f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f20:	4606      	mov	r6, r0
 8006f22:	460f      	mov	r7, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	18d5      	adds	r5, r2, r3
 8006f28:	42ac      	cmp	r4, r5
 8006f2a:	d101      	bne.n	8006f30 <__sfputs_r+0x12>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e007      	b.n	8006f40 <__sfputs_r+0x22>
 8006f30:	463a      	mov	r2, r7
 8006f32:	4630      	mov	r0, r6
 8006f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f38:	f7ff ffdc 	bl	8006ef4 <__sfputc_r>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d1f3      	bne.n	8006f28 <__sfputs_r+0xa>
 8006f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f44 <_vfiprintf_r>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	460d      	mov	r5, r1
 8006f4a:	4614      	mov	r4, r2
 8006f4c:	4698      	mov	r8, r3
 8006f4e:	4606      	mov	r6, r0
 8006f50:	b09d      	sub	sp, #116	; 0x74
 8006f52:	b118      	cbz	r0, 8006f5c <_vfiprintf_r+0x18>
 8006f54:	6983      	ldr	r3, [r0, #24]
 8006f56:	b90b      	cbnz	r3, 8006f5c <_vfiprintf_r+0x18>
 8006f58:	f7fe fdba 	bl	8005ad0 <__sinit>
 8006f5c:	4b89      	ldr	r3, [pc, #548]	; (8007184 <_vfiprintf_r+0x240>)
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	d11b      	bne.n	8006f9a <_vfiprintf_r+0x56>
 8006f62:	6875      	ldr	r5, [r6, #4]
 8006f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d405      	bmi.n	8006f76 <_vfiprintf_r+0x32>
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	059a      	lsls	r2, r3, #22
 8006f6e:	d402      	bmi.n	8006f76 <_vfiprintf_r+0x32>
 8006f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f72:	f7ff f9b6 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	071b      	lsls	r3, r3, #28
 8006f7a:	d501      	bpl.n	8006f80 <_vfiprintf_r+0x3c>
 8006f7c:	692b      	ldr	r3, [r5, #16]
 8006f7e:	b9eb      	cbnz	r3, 8006fbc <_vfiprintf_r+0x78>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7fd fda0 	bl	8004ac8 <__swsetup_r>
 8006f88:	b1c0      	cbz	r0, 8006fbc <_vfiprintf_r+0x78>
 8006f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f8c:	07dc      	lsls	r4, r3, #31
 8006f8e:	d50e      	bpl.n	8006fae <_vfiprintf_r+0x6a>
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	b01d      	add	sp, #116	; 0x74
 8006f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9a:	4b7b      	ldr	r3, [pc, #492]	; (8007188 <_vfiprintf_r+0x244>)
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	d101      	bne.n	8006fa4 <_vfiprintf_r+0x60>
 8006fa0:	68b5      	ldr	r5, [r6, #8]
 8006fa2:	e7df      	b.n	8006f64 <_vfiprintf_r+0x20>
 8006fa4:	4b79      	ldr	r3, [pc, #484]	; (800718c <_vfiprintf_r+0x248>)
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	bf08      	it	eq
 8006faa:	68f5      	ldreq	r5, [r6, #12]
 8006fac:	e7da      	b.n	8006f64 <_vfiprintf_r+0x20>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	0598      	lsls	r0, r3, #22
 8006fb2:	d4ed      	bmi.n	8006f90 <_vfiprintf_r+0x4c>
 8006fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb6:	f7ff f995 	bl	80062e4 <__retarget_lock_release_recursive>
 8006fba:	e7e9      	b.n	8006f90 <_vfiprintf_r+0x4c>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fc6:	2330      	movs	r3, #48	; 0x30
 8006fc8:	f04f 0901 	mov.w	r9, #1
 8006fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007190 <_vfiprintf_r+0x24c>
 8006fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fd8:	4623      	mov	r3, r4
 8006fda:	469a      	mov	sl, r3
 8006fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_vfiprintf_r+0xa2>
 8006fe2:	2a25      	cmp	r2, #37	; 0x25
 8006fe4:	d1f9      	bne.n	8006fda <_vfiprintf_r+0x96>
 8006fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fea:	d00b      	beq.n	8007004 <_vfiprintf_r+0xc0>
 8006fec:	465b      	mov	r3, fp
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ff93 	bl	8006f1e <__sfputs_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f000 80aa 	beq.w	8007152 <_vfiprintf_r+0x20e>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007000:	445a      	add	r2, fp
 8007002:	9209      	str	r2, [sp, #36]	; 0x24
 8007004:	f89a 3000 	ldrb.w	r3, [sl]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80a2 	beq.w	8007152 <_vfiprintf_r+0x20e>
 800700e:	2300      	movs	r3, #0
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007024:	931a      	str	r3, [sp, #104]	; 0x68
 8007026:	4654      	mov	r4, sl
 8007028:	2205      	movs	r2, #5
 800702a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702e:	4858      	ldr	r0, [pc, #352]	; (8007190 <_vfiprintf_r+0x24c>)
 8007030:	f7ff f9d8 	bl	80063e4 <memchr>
 8007034:	9a04      	ldr	r2, [sp, #16]
 8007036:	b9d8      	cbnz	r0, 8007070 <_vfiprintf_r+0x12c>
 8007038:	06d1      	lsls	r1, r2, #27
 800703a:	bf44      	itt	mi
 800703c:	2320      	movmi	r3, #32
 800703e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007042:	0713      	lsls	r3, r2, #28
 8007044:	bf44      	itt	mi
 8007046:	232b      	movmi	r3, #43	; 0x2b
 8007048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b2a      	cmp	r3, #42	; 0x2a
 8007052:	d015      	beq.n	8007080 <_vfiprintf_r+0x13c>
 8007054:	4654      	mov	r4, sl
 8007056:	2000      	movs	r0, #0
 8007058:	f04f 0c0a 	mov.w	ip, #10
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	4621      	mov	r1, r4
 8007060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007064:	3b30      	subs	r3, #48	; 0x30
 8007066:	2b09      	cmp	r3, #9
 8007068:	d94e      	bls.n	8007108 <_vfiprintf_r+0x1c4>
 800706a:	b1b0      	cbz	r0, 800709a <_vfiprintf_r+0x156>
 800706c:	9207      	str	r2, [sp, #28]
 800706e:	e014      	b.n	800709a <_vfiprintf_r+0x156>
 8007070:	eba0 0308 	sub.w	r3, r0, r8
 8007074:	fa09 f303 	lsl.w	r3, r9, r3
 8007078:	4313      	orrs	r3, r2
 800707a:	46a2      	mov	sl, r4
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	e7d2      	b.n	8007026 <_vfiprintf_r+0xe2>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	1d19      	adds	r1, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	9103      	str	r1, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbb      	ittet	lt
 800708c:	425b      	neglt	r3, r3
 800708e:	f042 0202 	orrlt.w	r2, r2, #2
 8007092:	9307      	strge	r3, [sp, #28]
 8007094:	9307      	strlt	r3, [sp, #28]
 8007096:	bfb8      	it	lt
 8007098:	9204      	strlt	r2, [sp, #16]
 800709a:	7823      	ldrb	r3, [r4, #0]
 800709c:	2b2e      	cmp	r3, #46	; 0x2e
 800709e:	d10c      	bne.n	80070ba <_vfiprintf_r+0x176>
 80070a0:	7863      	ldrb	r3, [r4, #1]
 80070a2:	2b2a      	cmp	r3, #42	; 0x2a
 80070a4:	d135      	bne.n	8007112 <_vfiprintf_r+0x1ce>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	3402      	adds	r4, #2
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	9203      	str	r2, [sp, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bfb8      	it	lt
 80070b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80070b8:	9305      	str	r3, [sp, #20]
 80070ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071a0 <_vfiprintf_r+0x25c>
 80070be:	2203      	movs	r2, #3
 80070c0:	4650      	mov	r0, sl
 80070c2:	7821      	ldrb	r1, [r4, #0]
 80070c4:	f7ff f98e 	bl	80063e4 <memchr>
 80070c8:	b140      	cbz	r0, 80070dc <_vfiprintf_r+0x198>
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	eba0 000a 	sub.w	r0, r0, sl
 80070d0:	fa03 f000 	lsl.w	r0, r3, r0
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	3401      	adds	r4, #1
 80070d8:	4303      	orrs	r3, r0
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e0:	2206      	movs	r2, #6
 80070e2:	482c      	ldr	r0, [pc, #176]	; (8007194 <_vfiprintf_r+0x250>)
 80070e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070e8:	f7ff f97c 	bl	80063e4 <memchr>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d03f      	beq.n	8007170 <_vfiprintf_r+0x22c>
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <_vfiprintf_r+0x254>)
 80070f2:	bb1b      	cbnz	r3, 800713c <_vfiprintf_r+0x1f8>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	3307      	adds	r3, #7
 80070f8:	f023 0307 	bic.w	r3, r3, #7
 80070fc:	3308      	adds	r3, #8
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007102:	443b      	add	r3, r7
 8007104:	9309      	str	r3, [sp, #36]	; 0x24
 8007106:	e767      	b.n	8006fd8 <_vfiprintf_r+0x94>
 8007108:	460c      	mov	r4, r1
 800710a:	2001      	movs	r0, #1
 800710c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007110:	e7a5      	b.n	800705e <_vfiprintf_r+0x11a>
 8007112:	2300      	movs	r3, #0
 8007114:	f04f 0c0a 	mov.w	ip, #10
 8007118:	4619      	mov	r1, r3
 800711a:	3401      	adds	r4, #1
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	4620      	mov	r0, r4
 8007120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007124:	3a30      	subs	r2, #48	; 0x30
 8007126:	2a09      	cmp	r2, #9
 8007128:	d903      	bls.n	8007132 <_vfiprintf_r+0x1ee>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0c5      	beq.n	80070ba <_vfiprintf_r+0x176>
 800712e:	9105      	str	r1, [sp, #20]
 8007130:	e7c3      	b.n	80070ba <_vfiprintf_r+0x176>
 8007132:	4604      	mov	r4, r0
 8007134:	2301      	movs	r3, #1
 8007136:	fb0c 2101 	mla	r1, ip, r1, r2
 800713a:	e7f0      	b.n	800711e <_vfiprintf_r+0x1da>
 800713c:	ab03      	add	r3, sp, #12
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	462a      	mov	r2, r5
 8007142:	4630      	mov	r0, r6
 8007144:	4b15      	ldr	r3, [pc, #84]	; (800719c <_vfiprintf_r+0x258>)
 8007146:	a904      	add	r1, sp, #16
 8007148:	f7fc f9b4 	bl	80034b4 <_printf_float>
 800714c:	4607      	mov	r7, r0
 800714e:	1c78      	adds	r0, r7, #1
 8007150:	d1d6      	bne.n	8007100 <_vfiprintf_r+0x1bc>
 8007152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007154:	07d9      	lsls	r1, r3, #31
 8007156:	d405      	bmi.n	8007164 <_vfiprintf_r+0x220>
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	059a      	lsls	r2, r3, #22
 800715c:	d402      	bmi.n	8007164 <_vfiprintf_r+0x220>
 800715e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007160:	f7ff f8c0 	bl	80062e4 <__retarget_lock_release_recursive>
 8007164:	89ab      	ldrh	r3, [r5, #12]
 8007166:	065b      	lsls	r3, r3, #25
 8007168:	f53f af12 	bmi.w	8006f90 <_vfiprintf_r+0x4c>
 800716c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716e:	e711      	b.n	8006f94 <_vfiprintf_r+0x50>
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	462a      	mov	r2, r5
 8007176:	4630      	mov	r0, r6
 8007178:	4b08      	ldr	r3, [pc, #32]	; (800719c <_vfiprintf_r+0x258>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	f7fc fc36 	bl	80039ec <_printf_i>
 8007180:	e7e4      	b.n	800714c <_vfiprintf_r+0x208>
 8007182:	bf00      	nop
 8007184:	0800763c 	.word	0x0800763c
 8007188:	0800765c 	.word	0x0800765c
 800718c:	0800761c 	.word	0x0800761c
 8007190:	0800785c 	.word	0x0800785c
 8007194:	08007866 	.word	0x08007866
 8007198:	080034b5 	.word	0x080034b5
 800719c:	08006f1f 	.word	0x08006f1f
 80071a0:	08007862 	.word	0x08007862

080071a4 <nan>:
 80071a4:	2000      	movs	r0, #0
 80071a6:	4901      	ldr	r1, [pc, #4]	; (80071ac <nan+0x8>)
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	7ff80000 	.word	0x7ff80000

080071b0 <_sbrk_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	2300      	movs	r3, #0
 80071b4:	4d05      	ldr	r5, [pc, #20]	; (80071cc <_sbrk_r+0x1c>)
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fa fabe 	bl	800173c <_sbrk>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_sbrk_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_sbrk_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000330 	.word	0x20000330

080071d0 <nanf>:
 80071d0:	4800      	ldr	r0, [pc, #0]	; (80071d4 <nanf+0x4>)
 80071d2:	4770      	bx	lr
 80071d4:	7fc00000 	.word	0x7fc00000

080071d8 <__sread>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	f000 f8ee 	bl	80073c0 <_read_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	bfab      	itete	ge
 80071e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ea:	89a3      	ldrhlt	r3, [r4, #12]
 80071ec:	181b      	addge	r3, r3, r0
 80071ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071f2:	bfac      	ite	ge
 80071f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071f6:	81a3      	strhlt	r3, [r4, #12]
 80071f8:	bd10      	pop	{r4, pc}

080071fa <__swrite>:
 80071fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	461f      	mov	r7, r3
 8007200:	898b      	ldrh	r3, [r1, #12]
 8007202:	4605      	mov	r5, r0
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	460c      	mov	r4, r1
 8007208:	4616      	mov	r6, r2
 800720a:	d505      	bpl.n	8007218 <__swrite+0x1e>
 800720c:	2302      	movs	r3, #2
 800720e:	2200      	movs	r2, #0
 8007210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007214:	f000 f8b6 	bl	8007384 <_lseek_r>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	4632      	mov	r2, r6
 800721c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	4628      	mov	r0, r5
 8007224:	463b      	mov	r3, r7
 8007226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	f000 b835 	b.w	800729c <_write_r>

08007232 <__sseek>:
 8007232:	b510      	push	{r4, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723a:	f000 f8a3 	bl	8007384 <_lseek_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	bf15      	itete	ne
 8007244:	6560      	strne	r0, [r4, #84]	; 0x54
 8007246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800724a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800724e:	81a3      	strheq	r3, [r4, #12]
 8007250:	bf18      	it	ne
 8007252:	81a3      	strhne	r3, [r4, #12]
 8007254:	bd10      	pop	{r4, pc}

08007256 <__sclose>:
 8007256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725a:	f000 b84f 	b.w	80072fc <_close_r>

0800725e <strncmp>:
 800725e:	b510      	push	{r4, lr}
 8007260:	b16a      	cbz	r2, 800727e <strncmp+0x20>
 8007262:	3901      	subs	r1, #1
 8007264:	1884      	adds	r4, r0, r2
 8007266:	f810 3b01 	ldrb.w	r3, [r0], #1
 800726a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800726e:	4293      	cmp	r3, r2
 8007270:	d103      	bne.n	800727a <strncmp+0x1c>
 8007272:	42a0      	cmp	r0, r4
 8007274:	d001      	beq.n	800727a <strncmp+0x1c>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f5      	bne.n	8007266 <strncmp+0x8>
 800727a:	1a98      	subs	r0, r3, r2
 800727c:	bd10      	pop	{r4, pc}
 800727e:	4610      	mov	r0, r2
 8007280:	e7fc      	b.n	800727c <strncmp+0x1e>

08007282 <__ascii_wctomb>:
 8007282:	4603      	mov	r3, r0
 8007284:	4608      	mov	r0, r1
 8007286:	b141      	cbz	r1, 800729a <__ascii_wctomb+0x18>
 8007288:	2aff      	cmp	r2, #255	; 0xff
 800728a:	d904      	bls.n	8007296 <__ascii_wctomb+0x14>
 800728c:	228a      	movs	r2, #138	; 0x8a
 800728e:	f04f 30ff 	mov.w	r0, #4294967295
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	4770      	bx	lr
 8007296:	2001      	movs	r0, #1
 8007298:	700a      	strb	r2, [r1, #0]
 800729a:	4770      	bx	lr

0800729c <_write_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	2200      	movs	r2, #0
 80072a6:	4d05      	ldr	r5, [pc, #20]	; (80072bc <_write_r+0x20>)
 80072a8:	602a      	str	r2, [r5, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f7fa f9fa 	bl	80016a4 <_write>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_write_r+0x1e>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_write_r+0x1e>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	20000330 	.word	0x20000330

080072c0 <__assert_func>:
 80072c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072c2:	4614      	mov	r4, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <__assert_func+0x2c>)
 80072c8:	4605      	mov	r5, r0
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68d8      	ldr	r0, [r3, #12]
 80072ce:	b14c      	cbz	r4, 80072e4 <__assert_func+0x24>
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <__assert_func+0x30>)
 80072d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072d6:	9100      	str	r1, [sp, #0]
 80072d8:	462b      	mov	r3, r5
 80072da:	4906      	ldr	r1, [pc, #24]	; (80072f4 <__assert_func+0x34>)
 80072dc:	f000 f81e 	bl	800731c <fiprintf>
 80072e0:	f000 f880 	bl	80073e4 <abort>
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <__assert_func+0x38>)
 80072e6:	461c      	mov	r4, r3
 80072e8:	e7f3      	b.n	80072d2 <__assert_func+0x12>
 80072ea:	bf00      	nop
 80072ec:	2000000c 	.word	0x2000000c
 80072f0:	0800786d 	.word	0x0800786d
 80072f4:	0800787a 	.word	0x0800787a
 80072f8:	080078a8 	.word	0x080078a8

080072fc <_close_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_close_r+0x1c>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa f9e8 	bl	80016dc <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_close_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_close_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	20000330 	.word	0x20000330

0800731c <fiprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	b503      	push	{r0, r1, lr}
 8007320:	4601      	mov	r1, r0
 8007322:	ab03      	add	r3, sp, #12
 8007324:	4805      	ldr	r0, [pc, #20]	; (800733c <fiprintf+0x20>)
 8007326:	f853 2b04 	ldr.w	r2, [r3], #4
 800732a:	6800      	ldr	r0, [r0, #0]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	f7ff fe09 	bl	8006f44 <_vfiprintf_r>
 8007332:	b002      	add	sp, #8
 8007334:	f85d eb04 	ldr.w	lr, [sp], #4
 8007338:	b003      	add	sp, #12
 800733a:	4770      	bx	lr
 800733c:	2000000c 	.word	0x2000000c

08007340 <_fstat_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d06      	ldr	r5, [pc, #24]	; (8007360 <_fstat_r+0x20>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	f7fa f9d0 	bl	80016f2 <_fstat>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	d102      	bne.n	800735c <_fstat_r+0x1c>
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	b103      	cbz	r3, 800735c <_fstat_r+0x1c>
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	bd38      	pop	{r3, r4, r5, pc}
 800735e:	bf00      	nop
 8007360:	20000330 	.word	0x20000330

08007364 <_isatty_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	2300      	movs	r3, #0
 8007368:	4d05      	ldr	r5, [pc, #20]	; (8007380 <_isatty_r+0x1c>)
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	f7fa f9ce 	bl	8001710 <_isatty>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_isatty_r+0x1a>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_isatty_r+0x1a>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20000330 	.word	0x20000330

08007384 <_lseek_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	2200      	movs	r2, #0
 800738e:	4d05      	ldr	r5, [pc, #20]	; (80073a4 <_lseek_r+0x20>)
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fa f9c6 	bl	8001724 <_lseek>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_lseek_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_lseek_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20000330 	.word	0x20000330

080073a8 <__malloc_lock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	; (80073b0 <__malloc_lock+0x8>)
 80073aa:	f7fe bf9a 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	20000328 	.word	0x20000328

080073b4 <__malloc_unlock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_unlock+0x8>)
 80073b6:	f7fe bf95 	b.w	80062e4 <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	20000328 	.word	0x20000328

080073c0 <_read_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	2200      	movs	r2, #0
 80073ca:	4d05      	ldr	r5, [pc, #20]	; (80073e0 <_read_r+0x20>)
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7fa f94b 	bl	800166a <_read>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_read_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_read_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20000330 	.word	0x20000330

080073e4 <abort>:
 80073e4:	2006      	movs	r0, #6
 80073e6:	b508      	push	{r3, lr}
 80073e8:	f000 f82c 	bl	8007444 <raise>
 80073ec:	2001      	movs	r0, #1
 80073ee:	f7fa f932 	bl	8001656 <_exit>

080073f2 <_raise_r>:
 80073f2:	291f      	cmp	r1, #31
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	d904      	bls.n	8007406 <_raise_r+0x14>
 80073fc:	2316      	movs	r3, #22
 80073fe:	6003      	str	r3, [r0, #0]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007408:	b112      	cbz	r2, 8007410 <_raise_r+0x1e>
 800740a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800740e:	b94b      	cbnz	r3, 8007424 <_raise_r+0x32>
 8007410:	4620      	mov	r0, r4
 8007412:	f000 f831 	bl	8007478 <_getpid_r>
 8007416:	462a      	mov	r2, r5
 8007418:	4601      	mov	r1, r0
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007420:	f000 b818 	b.w	8007454 <_kill_r>
 8007424:	2b01      	cmp	r3, #1
 8007426:	d00a      	beq.n	800743e <_raise_r+0x4c>
 8007428:	1c59      	adds	r1, r3, #1
 800742a:	d103      	bne.n	8007434 <_raise_r+0x42>
 800742c:	2316      	movs	r3, #22
 800742e:	6003      	str	r3, [r0, #0]
 8007430:	2001      	movs	r0, #1
 8007432:	e7e7      	b.n	8007404 <_raise_r+0x12>
 8007434:	2400      	movs	r4, #0
 8007436:	4628      	mov	r0, r5
 8007438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800743c:	4798      	blx	r3
 800743e:	2000      	movs	r0, #0
 8007440:	e7e0      	b.n	8007404 <_raise_r+0x12>
	...

08007444 <raise>:
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <raise+0xc>)
 8007446:	4601      	mov	r1, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f7ff bfd2 	b.w	80073f2 <_raise_r>
 800744e:	bf00      	nop
 8007450:	2000000c 	.word	0x2000000c

08007454 <_kill_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	2300      	movs	r3, #0
 8007458:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_kill_r+0x20>)
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	4611      	mov	r1, r2
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	f7fa f8e8 	bl	8001636 <_kill>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d102      	bne.n	8007470 <_kill_r+0x1c>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	b103      	cbz	r3, 8007470 <_kill_r+0x1c>
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	20000330 	.word	0x20000330

08007478 <_getpid_r>:
 8007478:	f7fa b8d6 	b.w	8001628 <_getpid>

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
